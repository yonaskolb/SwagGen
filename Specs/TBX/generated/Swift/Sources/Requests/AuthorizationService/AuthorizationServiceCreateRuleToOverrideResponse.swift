//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension AuthorizationService {

    /** Create a rule to override the IDP response's */
    public enum AuthorizationServiceCreateRuleToOverrideResponse {

        public static let service = APIService<Response>(id: "AuthorizationService.createRuleToOverrideResponse", tag: "AuthorizationService", method: "POST", path: "/AuthorizationServices/overrideRule", hasBody: true)

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** List of URNs to override */
                public var urn: String

                /** Token credits */
                public var response: Bool

                /** List of actions to override */
                public var action: String?

                /** List of countries to override */
                public var country: String?

                /** Start date */
                public var dateFrom: DateTime?

                /** until date */
                public var dateUntil: DateTime?

                /** List of IDPs to override */
                public var idp: String?

                /** Priority Order */
                public var priority: Double?

                public init(urn: String, response: Bool, action: String? = nil, country: String? = nil, dateFrom: DateTime? = nil, dateUntil: DateTime? = nil, idp: String? = nil, priority: Double? = nil) {
                    self.urn = urn
                    self.response = response
                    self.action = action
                    self.country = country
                    self.dateFrom = dateFrom
                    self.dateUntil = dateUntil
                    self.idp = idp
                    self.priority = priority
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: AuthorizationServiceCreateRuleToOverrideResponse.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(urn: String, response: Bool, action: String? = nil, country: String? = nil, dateFrom: DateTime? = nil, dateUntil: DateTime? = nil, idp: String? = nil, priority: Double? = nil) {
                let options = Options(urn: urn, response: response, action: action, country: country, dateFrom: dateFrom, dateUntil: dateUntil, idp: idp, priority: priority)
                self.init(options: options)
            }

            public override var formParameters: [String: Any] {
                var params: [String: Any] = [:]
                params["urn"] = options.urn
                params["response"] = options.response
                if let action = options.action {
                  params["action"] = action
                }
                if let country = options.country {
                  params["country"] = country
                }
                if let dateFrom = options.dateFrom?.encode() {
                  params["dateFrom"] = dateFrom
                }
                if let dateUntil = options.dateUntil?.encode() {
                  params["dateUntil"] = dateUntil
                }
                if let idp = options.idp {
                  params["idp"] = idp
                }
                if let priority = options.priority {
                  params["priority"] = priority
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = OverrideRuleObject

            /** Request was successful */
            case status200(OverrideRuleObject)

            /** Bad Request  */
            case status400(ErrorObject)

            /** Unauthorized  */
            case status401(ErrorObject)

            /** Customer or Device not Found */
            case status404(ErrorObject)

            /** Device was Logged Out or the customer not longer exists */
            case status410(ErrorObject)

            public var success: OverrideRuleObject? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: ErrorObject? {
                switch self {
                case .status400(let response): return response
                case .status401(let response): return response
                case .status404(let response): return response
                case .status410(let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<OverrideRuleObject, ErrorObject> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status400(let response): return response
                case .status401(let response): return response
                case .status404(let response): return response
                case .status410(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status400: return 400
                case .status401: return 401
                case .status404: return 404
                case .status410: return 410
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status400: return false
                case .status401: return false
                case .status404: return false
                case .status410: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(OverrideRuleObject.self, from: data))
                case 400: self = try .status400(decoder.decode(ErrorObject.self, from: data))
                case 401: self = try .status401(decoder.decode(ErrorObject.self, from: data))
                case 404: self = try .status404(decoder.decode(ErrorObject.self, from: data))
                case 410: self = try .status410(decoder.decode(ErrorObject.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
