//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class ProfileTokenRequest: APIModel {

    /** The scope(s) of the token(s) required. */
    #if swift(>=4.2)
    public enum Scopes: String, Codable, Equatable, CaseIterable {
    #else
    public enum Scopes: String, Codable {
    #endif
        case catalog = "Catalog"
        case commerce = "Commerce"
        case settings = "Settings"
        #if swift(<4.2)
        public static let cases: [Scopes] = [
          .catalog,
          .commerce,
          .settings,
        ]
        #endif
    }

    /** The id of the profile the token should grant access rights to. */
    public var profileId: String

    /** The scope(s) of the token(s) required. */
    public var scopes: [Scopes]

    /** The pin associated with this profile, if any. */
    public var pin: String?

    public init(profileId: String, scopes: [Scopes], pin: String? = nil) {
        self.profileId = profileId
        self.scopes = scopes
        self.pin = pin
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        profileId = try container.decode("profileId")
        scopes = try container.decodeArray("scopes")
        pin = try container.decodeIfPresent("pin")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(profileId, forKey: "profileId")
        try container.encode(scopes, forKey: "scopes")
        try container.encodeIfPresent(pin, forKey: "pin")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ProfileTokenRequest else { return false }
      guard self.profileId == object.profileId else { return false }
      guard self.scopes == object.scopes else { return false }
      guard self.pin == object.pin else { return false }
      return true
    }

    public static func == (lhs: ProfileTokenRequest, rhs: ProfileTokenRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
