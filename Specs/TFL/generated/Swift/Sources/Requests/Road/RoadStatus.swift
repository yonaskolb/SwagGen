//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension Road {

    /** Gets the specified roads with the status aggregated over the date range specified, or now until the end of today if no dates are passed. */
    public enum RoadStatus {

        public static let service = APIService<Response>(id: "Road_Status", tag: "Road", method: "GET", path: "/Road/{ids}/Status", hasBody: false)

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** Comma-separated list of road identifiers e.g. "A406, A2" or use "all" to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint) */
                public var ids: [String]

                public var dateRangeNullableStartDate: DateTime?

                public var dateRangeNullableEndDate: DateTime?

                public init(ids: [String], dateRangeNullableStartDate: DateTime? = nil, dateRangeNullableEndDate: DateTime? = nil) {
                    self.ids = ids
                    self.dateRangeNullableStartDate = dateRangeNullableStartDate
                    self.dateRangeNullableEndDate = dateRangeNullableEndDate
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: RoadStatus.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(ids: [String], dateRangeNullableStartDate: DateTime? = nil, dateRangeNullableEndDate: DateTime? = nil) {
                let options = Options(ids: ids, dateRangeNullableStartDate: dateRangeNullableStartDate, dateRangeNullableEndDate: dateRangeNullableEndDate)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "ids" + "}", with: "\(self.options.ids.joined(separator: ","))")
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let dateRangeNullableStartDate = options.dateRangeNullableStartDate?.encode() {
                  params["dateRangeNullable.startDate"] = dateRangeNullableStartDate
                }
                if let dateRangeNullableEndDate = options.dateRangeNullableEndDate?.encode() {
                  params["dateRangeNullable.endDate"] = dateRangeNullableEndDate
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = [RoadCorridor]

            /** OK */
            case status200([RoadCorridor])

            public var success: [RoadCorridor]? {
                switch self {
                case .status200(let response): return response
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode([RoadCorridor].self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
