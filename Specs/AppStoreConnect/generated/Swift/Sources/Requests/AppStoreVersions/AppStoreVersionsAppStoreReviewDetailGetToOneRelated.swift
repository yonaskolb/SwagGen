//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension AppStoreConnect.AppStoreVersions {

    public enum AppStoreVersionsAppStoreReviewDetailGetToOneRelated {

        public static let service = APIService<Response>(id: "appStoreVersions-appStoreReviewDetail-get_to_one_related", tag: "AppStoreVersions", method: "GET", path: "/v1/appStoreVersions/{id}/appStoreReviewDetail", hasBody: false, securityRequirements: [SecurityRequirement(type: "itc-bearer-token", scopes: [])])

        /** the fields to include for returned resources of type appStoreReviewDetails */
        public enum FieldsappStoreReviewDetails: String, Codable, Equatable, CaseIterable {
            case appStoreReviewAttachments = "appStoreReviewAttachments"
            case appStoreVersion = "appStoreVersion"
            case contactEmail = "contactEmail"
            case contactFirstName = "contactFirstName"
            case contactLastName = "contactLastName"
            case contactPhone = "contactPhone"
            case demoAccountName = "demoAccountName"
            case demoAccountPassword = "demoAccountPassword"
            case demoAccountRequired = "demoAccountRequired"
            case notes = "notes"
        }

        /** the fields to include for returned resources of type appStoreVersions */
        public enum FieldsappStoreVersions: String, Codable, Equatable, CaseIterable {
            case ageRatingDeclaration = "ageRatingDeclaration"
            case app = "app"
            case appStoreReviewDetail = "appStoreReviewDetail"
            case appStoreState = "appStoreState"
            case appStoreVersionLocalizations = "appStoreVersionLocalizations"
            case appStoreVersionPhasedRelease = "appStoreVersionPhasedRelease"
            case appStoreVersionSubmission = "appStoreVersionSubmission"
            case build = "build"
            case copyright = "copyright"
            case createdDate = "createdDate"
            case downloadable = "downloadable"
            case earliestReleaseDate = "earliestReleaseDate"
            case idfaDeclaration = "idfaDeclaration"
            case platform = "platform"
            case releaseType = "releaseType"
            case routingAppCoverage = "routingAppCoverage"
            case usesIdfa = "usesIdfa"
            case versionString = "versionString"
        }

        /** the fields to include for returned resources of type appStoreReviewAttachments */
        public enum FieldsappStoreReviewAttachments: String, Codable, Equatable, CaseIterable {
            case appStoreReviewDetail = "appStoreReviewDetail"
            case assetDeliveryState = "assetDeliveryState"
            case fileName = "fileName"
            case fileSize = "fileSize"
            case sourceFileChecksum = "sourceFileChecksum"
            case uploadOperations = "uploadOperations"
            case uploaded = "uploaded"
        }

        /** comma-separated list of relationships to include */
        public enum Include: String, Codable, Equatable, CaseIterable {
            case appStoreReviewAttachments = "appStoreReviewAttachments"
            case appStoreVersion = "appStoreVersion"
        }

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** the id of the requested resource */
                public var id: String

                /** the fields to include for returned resources of type appStoreReviewDetails */
                public var fieldsappStoreReviewDetails: [FieldsappStoreReviewDetails]?

                /** the fields to include for returned resources of type appStoreVersions */
                public var fieldsappStoreVersions: [FieldsappStoreVersions]?

                /** the fields to include for returned resources of type appStoreReviewAttachments */
                public var fieldsappStoreReviewAttachments: [FieldsappStoreReviewAttachments]?

                /** comma-separated list of relationships to include */
                public var include: [Include]?

                public init(id: String, fieldsappStoreReviewDetails: [FieldsappStoreReviewDetails]? = nil, fieldsappStoreVersions: [FieldsappStoreVersions]? = nil, fieldsappStoreReviewAttachments: [FieldsappStoreReviewAttachments]? = nil, include: [Include]? = nil) {
                    self.id = id
                    self.fieldsappStoreReviewDetails = fieldsappStoreReviewDetails
                    self.fieldsappStoreVersions = fieldsappStoreVersions
                    self.fieldsappStoreReviewAttachments = fieldsappStoreReviewAttachments
                    self.include = include
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: AppStoreVersionsAppStoreReviewDetailGetToOneRelated.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(id: String, fieldsappStoreReviewDetails: [FieldsappStoreReviewDetails]? = nil, fieldsappStoreVersions: [FieldsappStoreVersions]? = nil, fieldsappStoreReviewAttachments: [FieldsappStoreReviewAttachments]? = nil, include: [Include]? = nil) {
                let options = Options(id: id, fieldsappStoreReviewDetails: fieldsappStoreReviewDetails, fieldsappStoreVersions: fieldsappStoreVersions, fieldsappStoreReviewAttachments: fieldsappStoreReviewAttachments, include: include)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "id" + "}", with: "\(self.options.id)")
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let fieldsappStoreReviewDetails = options.fieldsappStoreReviewDetails?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[appStoreReviewDetails]"] = fieldsappStoreReviewDetails
                }
                if let fieldsappStoreVersions = options.fieldsappStoreVersions?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[appStoreVersions]"] = fieldsappStoreVersions
                }
                if let fieldsappStoreReviewAttachments = options.fieldsappStoreReviewAttachments?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[appStoreReviewAttachments]"] = fieldsappStoreReviewAttachments
                }
                if let include = options.include?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["include"] = include
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = AppStoreReviewDetailResponse

            /** Related resource */
            case status200(AppStoreReviewDetailResponse)

            /** Parameter error(s) */
            case status400(ErrorResponse)

            /** Forbidden error */
            case status403(ErrorResponse)

            /** Not found error */
            case status404(ErrorResponse)

            public var success: AppStoreReviewDetailResponse? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: ErrorResponse? {
                switch self {
                case .status400(let response): return response
                case .status403(let response): return response
                case .status404(let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<AppStoreReviewDetailResponse, ErrorResponse> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status400(let response): return response
                case .status403(let response): return response
                case .status404(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status400: return 400
                case .status403: return 403
                case .status404: return 404
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status400: return false
                case .status403: return false
                case .status404: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(AppStoreReviewDetailResponse.self, from: data))
                case 400: self = try .status400(decoder.decode(ErrorResponse.self, from: data))
                case 403: self = try .status403(decoder.decode(ErrorResponse.self, from: data))
                case 404: self = try .status404(decoder.decode(ErrorResponse.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
