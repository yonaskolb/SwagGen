//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension AppStoreConnect.BundleIds {

    public enum BundleIdsGetInstance {

        public static let service = APIService<Response>(id: "bundleIds-get_instance", tag: "BundleIds", method: "GET", path: "/v1/bundleIds/{id}", hasBody: false, securityRequirements: [SecurityRequirement(type: "itc-bearer-token", scopes: [])])

        /** the fields to include for returned resources of type bundleIds */
        public enum FieldsbundleIds: String, Codable, Equatable, CaseIterable {
            case app = "app"
            case bundleIdCapabilities = "bundleIdCapabilities"
            case identifier = "identifier"
            case name = "name"
            case platform = "platform"
            case profiles = "profiles"
            case seedId = "seedId"
        }

        /** comma-separated list of relationships to include */
        public enum Include: String, Codable, Equatable, CaseIterable {
            case app = "app"
            case bundleIdCapabilities = "bundleIdCapabilities"
            case profiles = "profiles"
        }

        /** the fields to include for returned resources of type bundleIdCapabilities */
        public enum FieldsbundleIdCapabilities: String, Codable, Equatable, CaseIterable {
            case bundleId = "bundleId"
            case capabilityType = "capabilityType"
            case settings = "settings"
        }

        /** the fields to include for returned resources of type profiles */
        public enum Fieldsprofiles: String, Codable, Equatable, CaseIterable {
            case bundleId = "bundleId"
            case certificates = "certificates"
            case createdDate = "createdDate"
            case devices = "devices"
            case expirationDate = "expirationDate"
            case name = "name"
            case platform = "platform"
            case profileContent = "profileContent"
            case profileState = "profileState"
            case profileType = "profileType"
            case uuid = "uuid"
        }

        /** the fields to include for returned resources of type apps */
        public enum Fieldsapps: String, Codable, Equatable, CaseIterable {
            case appInfos = "appInfos"
            case appStoreVersions = "appStoreVersions"
            case availableInNewTerritories = "availableInNewTerritories"
            case availableTerritories = "availableTerritories"
            case betaAppLocalizations = "betaAppLocalizations"
            case betaAppReviewDetail = "betaAppReviewDetail"
            case betaGroups = "betaGroups"
            case betaLicenseAgreement = "betaLicenseAgreement"
            case betaTesters = "betaTesters"
            case builds = "builds"
            case bundleId = "bundleId"
            case contentRightsDeclaration = "contentRightsDeclaration"
            case endUserLicenseAgreement = "endUserLicenseAgreement"
            case gameCenterEnabledVersions = "gameCenterEnabledVersions"
            case inAppPurchases = "inAppPurchases"
            case isOrEverWasMadeForKids = "isOrEverWasMadeForKids"
            case name = "name"
            case perfPowerMetrics = "perfPowerMetrics"
            case preOrder = "preOrder"
            case preReleaseVersions = "preReleaseVersions"
            case prices = "prices"
            case primaryLocale = "primaryLocale"
            case sku = "sku"
        }

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** the id of the requested resource */
                public var id: String

                /** the fields to include for returned resources of type bundleIds */
                public var fieldsbundleIds: [FieldsbundleIds]?

                /** comma-separated list of relationships to include */
                public var include: [Include]?

                /** the fields to include for returned resources of type bundleIdCapabilities */
                public var fieldsbundleIdCapabilities: [FieldsbundleIdCapabilities]?

                /** the fields to include for returned resources of type profiles */
                public var fieldsprofiles: [Fieldsprofiles]?

                /** the fields to include for returned resources of type apps */
                public var fieldsapps: [Fieldsapps]?

                /** maximum number of related bundleIdCapabilities returned (when they are included) */
                public var limitbundleIdCapabilities: Int?

                /** maximum number of related profiles returned (when they are included) */
                public var limitprofiles: Int?

                public init(id: String, fieldsbundleIds: [FieldsbundleIds]? = nil, include: [Include]? = nil, fieldsbundleIdCapabilities: [FieldsbundleIdCapabilities]? = nil, fieldsprofiles: [Fieldsprofiles]? = nil, fieldsapps: [Fieldsapps]? = nil, limitbundleIdCapabilities: Int? = nil, limitprofiles: Int? = nil) {
                    self.id = id
                    self.fieldsbundleIds = fieldsbundleIds
                    self.include = include
                    self.fieldsbundleIdCapabilities = fieldsbundleIdCapabilities
                    self.fieldsprofiles = fieldsprofiles
                    self.fieldsapps = fieldsapps
                    self.limitbundleIdCapabilities = limitbundleIdCapabilities
                    self.limitprofiles = limitprofiles
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: BundleIdsGetInstance.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(id: String, fieldsbundleIds: [FieldsbundleIds]? = nil, include: [Include]? = nil, fieldsbundleIdCapabilities: [FieldsbundleIdCapabilities]? = nil, fieldsprofiles: [Fieldsprofiles]? = nil, fieldsapps: [Fieldsapps]? = nil, limitbundleIdCapabilities: Int? = nil, limitprofiles: Int? = nil) {
                let options = Options(id: id, fieldsbundleIds: fieldsbundleIds, include: include, fieldsbundleIdCapabilities: fieldsbundleIdCapabilities, fieldsprofiles: fieldsprofiles, fieldsapps: fieldsapps, limitbundleIdCapabilities: limitbundleIdCapabilities, limitprofiles: limitprofiles)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "id" + "}", with: "\(self.options.id)")
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let fieldsbundleIds = options.fieldsbundleIds?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[bundleIds]"] = fieldsbundleIds
                }
                if let include = options.include?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["include"] = include
                }
                if let fieldsbundleIdCapabilities = options.fieldsbundleIdCapabilities?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[bundleIdCapabilities]"] = fieldsbundleIdCapabilities
                }
                if let fieldsprofiles = options.fieldsprofiles?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[profiles]"] = fieldsprofiles
                }
                if let fieldsapps = options.fieldsapps?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[apps]"] = fieldsapps
                }
                if let limitbundleIdCapabilities = options.limitbundleIdCapabilities {
                  params["limit[bundleIdCapabilities]"] = limitbundleIdCapabilities
                }
                if let limitprofiles = options.limitprofiles {
                  params["limit[profiles]"] = limitprofiles
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = BundleIdResponse

            /** Single BundleId */
            case status200(BundleIdResponse)

            /** Parameter error(s) */
            case status400(ErrorResponse)

            /** Forbidden error */
            case status403(ErrorResponse)

            /** Not found error */
            case status404(ErrorResponse)

            public var success: BundleIdResponse? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: ErrorResponse? {
                switch self {
                case .status400(let response): return response
                case .status403(let response): return response
                case .status404(let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<BundleIdResponse, ErrorResponse> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status400(let response): return response
                case .status403(let response): return response
                case .status404(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status400: return 400
                case .status403: return 403
                case .status404: return 404
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status400: return false
                case .status403: return false
                case .status404: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(BundleIdResponse.self, from: data))
                case 400: self = try .status400(decoder.decode(ErrorResponse.self, from: data))
                case 403: self = try .status403(decoder.decode(ErrorResponse.self, from: data))
                case 404: self = try .status404(decoder.decode(ErrorResponse.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
