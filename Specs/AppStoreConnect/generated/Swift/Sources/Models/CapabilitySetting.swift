//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class CapabilitySetting: APIModel {

    public enum AllowedInstances: String, Codable, Equatable, CaseIterable {
        case entry = "ENTRY"
        case single = "SINGLE"
        case multiple = "MULTIPLE"
    }

    public enum Key: String, Codable, Equatable, CaseIterable {
        case icloudVersion = "ICLOUD_VERSION"
        case dataProtectionPermissionLevel = "DATA_PROTECTION_PERMISSION_LEVEL"
        case appleIdAuthAppConsent = "APPLE_ID_AUTH_APP_CONSENT"
    }

    public var allowedInstances: AllowedInstances?

    public var description: String?

    public var enabledByDefault: Bool?

    public var key: Key?

    public var minInstances: Int?

    public var name: String?

    public var options: [CapabilityOption]?

    public var visible: Bool?

    public init(allowedInstances: AllowedInstances? = nil, description: String? = nil, enabledByDefault: Bool? = nil, key: Key? = nil, minInstances: Int? = nil, name: String? = nil, options: [CapabilityOption]? = nil, visible: Bool? = nil) {
        self.allowedInstances = allowedInstances
        self.description = description
        self.enabledByDefault = enabledByDefault
        self.key = key
        self.minInstances = minInstances
        self.name = name
        self.options = options
        self.visible = visible
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        allowedInstances = try container.decodeIfPresent("allowedInstances")
        description = try container.decodeIfPresent("description")
        enabledByDefault = try container.decodeIfPresent("enabledByDefault")
        key = try container.decodeIfPresent("key")
        minInstances = try container.decodeIfPresent("minInstances")
        name = try container.decodeIfPresent("name")
        options = try container.decodeArrayIfPresent("options")
        visible = try container.decodeIfPresent("visible")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(allowedInstances, forKey: "allowedInstances")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(enabledByDefault, forKey: "enabledByDefault")
        try container.encodeIfPresent(key, forKey: "key")
        try container.encodeIfPresent(minInstances, forKey: "minInstances")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(options, forKey: "options")
        try container.encodeIfPresent(visible, forKey: "visible")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? CapabilitySetting else { return false }
      guard self.allowedInstances == object.allowedInstances else { return false }
      guard self.description == object.description else { return false }
      guard self.enabledByDefault == object.enabledByDefault else { return false }
      guard self.key == object.key else { return false }
      guard self.minInstances == object.minInstances else { return false }
      guard self.name == object.name else { return false }
      guard self.options == object.options else { return false }
      guard self.visible == object.visible else { return false }
      return true
    }

    public static func == (lhs: CapabilitySetting, rhs: CapabilitySetting) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
