//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension AppStoreConnect.PreReleaseVersions {

    public enum PreReleaseVersionsGetCollection {

        public static let service = APIService<Response>(id: "preReleaseVersions-get_collection", tag: "PreReleaseVersions", method: "GET", path: "/v1/preReleaseVersions", hasBody: false, securityRequirements: [SecurityRequirement(type: "itc-bearer-token", scopes: [])])

        /** filter by attribute 'builds.processingState' */
        public enum FilterbuildsProcessingState: String, Codable, Equatable, CaseIterable {
            case processing = "PROCESSING"
            case failed = "FAILED"
            case invalid = "INVALID"
            case valid = "VALID"
        }

        /** filter by attribute 'platform' */
        public enum Filterplatform: String, Codable, Equatable, CaseIterable {
            case ios = "IOS"
            case macOs = "MAC_OS"
            case tvOs = "TV_OS"
        }

        /** comma-separated list of sort expressions; resources will be sorted as specified */
        public enum Sort: String, Codable, Equatable, CaseIterable {
            case version = "version"
            case _version = "-version"
        }

        /** the fields to include for returned resources of type preReleaseVersions */
        public enum FieldspreReleaseVersions: String, Codable, Equatable, CaseIterable {
            case app = "app"
            case builds = "builds"
            case platform = "platform"
            case version = "version"
        }

        /** comma-separated list of relationships to include */
        public enum Include: String, Codable, Equatable, CaseIterable {
            case app = "app"
            case builds = "builds"
        }

        /** the fields to include for returned resources of type builds */
        public enum Fieldsbuilds: String, Codable, Equatable, CaseIterable {
            case app = "app"
            case appEncryptionDeclaration = "appEncryptionDeclaration"
            case appStoreVersion = "appStoreVersion"
            case betaAppReviewSubmission = "betaAppReviewSubmission"
            case betaBuildLocalizations = "betaBuildLocalizations"
            case betaGroups = "betaGroups"
            case buildBetaDetail = "buildBetaDetail"
            case diagnosticSignatures = "diagnosticSignatures"
            case expirationDate = "expirationDate"
            case expired = "expired"
            case iconAssetToken = "iconAssetToken"
            case icons = "icons"
            case individualTesters = "individualTesters"
            case minOsVersion = "minOsVersion"
            case perfPowerMetrics = "perfPowerMetrics"
            case preReleaseVersion = "preReleaseVersion"
            case processingState = "processingState"
            case uploadedDate = "uploadedDate"
            case usesNonExemptEncryption = "usesNonExemptEncryption"
            case version = "version"
        }

        /** the fields to include for returned resources of type apps */
        public enum Fieldsapps: String, Codable, Equatable, CaseIterable {
            case appInfos = "appInfos"
            case appStoreVersions = "appStoreVersions"
            case availableInNewTerritories = "availableInNewTerritories"
            case availableTerritories = "availableTerritories"
            case betaAppLocalizations = "betaAppLocalizations"
            case betaAppReviewDetail = "betaAppReviewDetail"
            case betaGroups = "betaGroups"
            case betaLicenseAgreement = "betaLicenseAgreement"
            case betaTesters = "betaTesters"
            case builds = "builds"
            case bundleId = "bundleId"
            case contentRightsDeclaration = "contentRightsDeclaration"
            case endUserLicenseAgreement = "endUserLicenseAgreement"
            case gameCenterEnabledVersions = "gameCenterEnabledVersions"
            case inAppPurchases = "inAppPurchases"
            case isOrEverWasMadeForKids = "isOrEverWasMadeForKids"
            case name = "name"
            case perfPowerMetrics = "perfPowerMetrics"
            case preOrder = "preOrder"
            case preReleaseVersions = "preReleaseVersions"
            case prices = "prices"
            case primaryLocale = "primaryLocale"
            case sku = "sku"
        }

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** filter by attribute 'builds.expired' */
                public var filterbuildsExpired: [String]?

                /** filter by attribute 'builds.processingState' */
                public var filterbuildsProcessingState: [FilterbuildsProcessingState]?

                /** filter by attribute 'platform' */
                public var filterplatform: [Filterplatform]?

                /** filter by attribute 'version' */
                public var filterversion: [String]?

                /** filter by id(s) of related 'app' */
                public var filterapp: [String]?

                /** filter by id(s) of related 'builds' */
                public var filterbuilds: [String]?

                /** comma-separated list of sort expressions; resources will be sorted as specified */
                public var sort: [Sort]?

                /** the fields to include for returned resources of type preReleaseVersions */
                public var fieldspreReleaseVersions: [FieldspreReleaseVersions]?

                /** maximum resources per page */
                public var limit: Int?

                /** comma-separated list of relationships to include */
                public var include: [Include]?

                /** the fields to include for returned resources of type builds */
                public var fieldsbuilds: [Fieldsbuilds]?

                /** the fields to include for returned resources of type apps */
                public var fieldsapps: [Fieldsapps]?

                /** maximum number of related builds returned (when they are included) */
                public var limitbuilds: Int?

                public init(filterbuildsExpired: [String]? = nil, filterbuildsProcessingState: [FilterbuildsProcessingState]? = nil, filterplatform: [Filterplatform]? = nil, filterversion: [String]? = nil, filterapp: [String]? = nil, filterbuilds: [String]? = nil, sort: [Sort]? = nil, fieldspreReleaseVersions: [FieldspreReleaseVersions]? = nil, limit: Int? = nil, include: [Include]? = nil, fieldsbuilds: [Fieldsbuilds]? = nil, fieldsapps: [Fieldsapps]? = nil, limitbuilds: Int? = nil) {
                    self.filterbuildsExpired = filterbuildsExpired
                    self.filterbuildsProcessingState = filterbuildsProcessingState
                    self.filterplatform = filterplatform
                    self.filterversion = filterversion
                    self.filterapp = filterapp
                    self.filterbuilds = filterbuilds
                    self.sort = sort
                    self.fieldspreReleaseVersions = fieldspreReleaseVersions
                    self.limit = limit
                    self.include = include
                    self.fieldsbuilds = fieldsbuilds
                    self.fieldsapps = fieldsapps
                    self.limitbuilds = limitbuilds
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: PreReleaseVersionsGetCollection.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(filterbuildsExpired: [String]? = nil, filterbuildsProcessingState: [FilterbuildsProcessingState]? = nil, filterplatform: [Filterplatform]? = nil, filterversion: [String]? = nil, filterapp: [String]? = nil, filterbuilds: [String]? = nil, sort: [Sort]? = nil, fieldspreReleaseVersions: [FieldspreReleaseVersions]? = nil, limit: Int? = nil, include: [Include]? = nil, fieldsbuilds: [Fieldsbuilds]? = nil, fieldsapps: [Fieldsapps]? = nil, limitbuilds: Int? = nil) {
                let options = Options(filterbuildsExpired: filterbuildsExpired, filterbuildsProcessingState: filterbuildsProcessingState, filterplatform: filterplatform, filterversion: filterversion, filterapp: filterapp, filterbuilds: filterbuilds, sort: sort, fieldspreReleaseVersions: fieldspreReleaseVersions, limit: limit, include: include, fieldsbuilds: fieldsbuilds, fieldsapps: fieldsapps, limitbuilds: limitbuilds)
                self.init(options: options)
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let filterbuildsExpired = options.filterbuildsExpired?.joined(separator: ",") {
                  params["filter[builds.expired]"] = filterbuildsExpired
                }
                if let filterbuildsProcessingState = options.filterbuildsProcessingState?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["filter[builds.processingState]"] = filterbuildsProcessingState
                }
                if let filterplatform = options.filterplatform?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["filter[platform]"] = filterplatform
                }
                if let filterversion = options.filterversion?.joined(separator: ",") {
                  params["filter[version]"] = filterversion
                }
                if let filterapp = options.filterapp?.joined(separator: ",") {
                  params["filter[app]"] = filterapp
                }
                if let filterbuilds = options.filterbuilds?.joined(separator: ",") {
                  params["filter[builds]"] = filterbuilds
                }
                if let sort = options.sort?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["sort"] = sort
                }
                if let fieldspreReleaseVersions = options.fieldspreReleaseVersions?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[preReleaseVersions]"] = fieldspreReleaseVersions
                }
                if let limit = options.limit {
                  params["limit"] = limit
                }
                if let include = options.include?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["include"] = include
                }
                if let fieldsbuilds = options.fieldsbuilds?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[builds]"] = fieldsbuilds
                }
                if let fieldsapps = options.fieldsapps?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[apps]"] = fieldsapps
                }
                if let limitbuilds = options.limitbuilds {
                  params["limit[builds]"] = limitbuilds
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = PreReleaseVersionsResponse

            /** List of PreReleaseVersions */
            case status200(PreReleaseVersionsResponse)

            /** Parameter error(s) */
            case status400(ErrorResponse)

            /** Forbidden error */
            case status403(ErrorResponse)

            public var success: PreReleaseVersionsResponse? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: ErrorResponse? {
                switch self {
                case .status400(let response): return response
                case .status403(let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<PreReleaseVersionsResponse, ErrorResponse> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status400(let response): return response
                case .status403(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status400: return 400
                case .status403: return 403
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status400: return false
                case .status403: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(PreReleaseVersionsResponse.self, from: data))
                case 400: self = try .status400(decoder.decode(ErrorResponse.self, from: data))
                case 403: self = try .status403(decoder.decode(ErrorResponse.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
