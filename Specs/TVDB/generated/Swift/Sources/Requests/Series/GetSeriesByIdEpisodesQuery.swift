//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension TVDB.Series {

    /** This route allows the user to query against episodes for the given series. The response is a paginated array of episode records. */
    public enum GetSeriesByIdEpisodesQuery {

        public static let service = APIService<Response>(id: "getSeriesByIdEpisodesQuery", tag: "Series", method: "GET", path: "/series/{id}/episodes/query", hasBody: false, securityRequirement: SecurityRequirement(type: "jwtToken", scopes: []))

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** ID of the series */
                public var id: Int

                /** Absolute number of the episode */
                public var absoluteNumber: String?

                /** Aired season number */
                public var airedSeason: String?

                /** Aired episode number */
                public var airedEpisode: String?

                /** DVD season number */
                public var dvdSeason: String?

                /** DVD episode number */
                public var dvdEpisode: String?

                /** IMDB id of the series */
                public var imdbId: String?

                /** Page of results to fetch. Defaults to page 1 if not provided. */
                public var page: String?

                /** Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. */
                public var acceptLanguage: String?

                public init(id: Int, absoluteNumber: String? = nil, airedSeason: String? = nil, airedEpisode: String? = nil, dvdSeason: String? = nil, dvdEpisode: String? = nil, imdbId: String? = nil, page: String? = nil, acceptLanguage: String? = nil) {
                    self.id = id
                    self.absoluteNumber = absoluteNumber
                    self.airedSeason = airedSeason
                    self.airedEpisode = airedEpisode
                    self.dvdSeason = dvdSeason
                    self.dvdEpisode = dvdEpisode
                    self.imdbId = imdbId
                    self.page = page
                    self.acceptLanguage = acceptLanguage
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetSeriesByIdEpisodesQuery.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(id: Int, absoluteNumber: String? = nil, airedSeason: String? = nil, airedEpisode: String? = nil, dvdSeason: String? = nil, dvdEpisode: String? = nil, imdbId: String? = nil, page: String? = nil, acceptLanguage: String? = nil) {
                let options = Options(id: id, absoluteNumber: absoluteNumber, airedSeason: airedSeason, airedEpisode: airedEpisode, dvdSeason: dvdSeason, dvdEpisode: dvdEpisode, imdbId: imdbId, page: page, acceptLanguage: acceptLanguage)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "id" + "}", with: "\(self.options.id)")
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let absoluteNumber = options.absoluteNumber {
                  params["absoluteNumber"] = absoluteNumber
                }
                if let airedSeason = options.airedSeason {
                  params["airedSeason"] = airedSeason
                }
                if let airedEpisode = options.airedEpisode {
                  params["airedEpisode"] = airedEpisode
                }
                if let dvdSeason = options.dvdSeason {
                  params["dvdSeason"] = dvdSeason
                }
                if let dvdEpisode = options.dvdEpisode {
                  params["dvdEpisode"] = dvdEpisode
                }
                if let imdbId = options.imdbId {
                  params["imdbId"] = imdbId
                }
                if let page = options.page {
                  params["page"] = page
                }
                return params
            }

            override var headerParameters: [String: String] {
                var headers: [String: String] = [:]
                if let acceptLanguage = options.acceptLanguage {
                  headers["Accept-Language"] = acceptLanguage
                }
                return headers
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = SeriesEpisodesQuery

            /** An array of basic Episode results that matched the query */
            case status200(SeriesEpisodesQuery)

            /** Returned if your JWT token is missing or expired */
            case status401(NotAuthorized)

            /** Returned if the given series ID does not exist or the query returns no results. */
            case status404(NotFound)

            public var success: SeriesEpisodesQuery? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status401(let response): return response
                case .status404(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status401: return 401
                case .status404: return 404
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status401: return false
                case .status404: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(SeriesEpisodesQuery.self, from: data))
                case 401: self = try .status401(decoder.decode(NotAuthorized.self, from: data))
                case 404: self = try .status404(decoder.decode(NotFound.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
