//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension BinaryUpload {

    /**
    Create New User

    Create a new user.
    */
    public enum PostUser {

        public static let service = APIService<Response>(id: "post-user", tag: "", method: "POST", path: "/withoutModel", hasBody: true, securityRequirements: [])

        public final class Request: APIRequest<Response> {

            /** Create a new user. */
            public class Body: APIModel {

                public var binary: File

                public init(binary: File) {
                    self.binary = binary
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    binary = try container.decode("binary")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encode(binary, forKey: "binary")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Body else { return false }
                  guard self.binary == object.binary else { return false }
                  return true
                }

                public static func == (lhs: Body, rhs: Body) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            public var body: Body?

            public init(body: Body?, encoder: RequestEncoder? = nil) {
                self.body = body
                super.init(service: PostUser.service) { defaultEncoder in
                    return try (encoder ?? defaultEncoder).encode(body)
                }
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = Void

            /** Missing Required Information */
            case status400

            /** Email Already Taken */
            case status409

            public var success: Void? {
                switch self {
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status400: return 400
                case .status409: return 409
                }
            }

            public var successful: Bool {
                switch self {
                case .status400: return false
                case .status409: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 400: self = .status400
                case 409: self = .status409
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
