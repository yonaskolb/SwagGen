//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension AppStoreConnect.AppStoreVersionLocalizations {

    public enum AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelated {

        public static let service = APIService<Response>(id: "appStoreVersionLocalizations-appPreviewSets-get_to_many_related", tag: "AppStoreVersionLocalizations", method: "GET", path: "/v1/appStoreVersionLocalizations/{id}/appPreviewSets", hasBody: false, securityRequirements: [SecurityRequirement(type: "itc-bearer-token", scopes: [])])

        /** filter by attribute 'previewType' */
        public enum FilterpreviewType: String, Codable, Equatable, CaseIterable {
            case iphone65 = "IPHONE_65"
            case iphone58 = "IPHONE_58"
            case iphone55 = "IPHONE_55"
            case iphone47 = "IPHONE_47"
            case iphone40 = "IPHONE_40"
            case iphone35 = "IPHONE_35"
            case ipadPro3gen129 = "IPAD_PRO_3GEN_129"
            case ipadPro3gen11 = "IPAD_PRO_3GEN_11"
            case ipadPro129 = "IPAD_PRO_129"
            case ipad105 = "IPAD_105"
            case ipad97 = "IPAD_97"
            case desktop = "DESKTOP"
            case watchSeries4 = "WATCH_SERIES_4"
            case watchSeries3 = "WATCH_SERIES_3"
            case appleTv = "APPLE_TV"
        }

        /** the fields to include for returned resources of type appStoreVersionLocalizations */
        public enum FieldsappStoreVersionLocalizations: String, Codable, Equatable, CaseIterable {
            case appPreviewSets = "appPreviewSets"
            case appScreenshotSets = "appScreenshotSets"
            case appStoreVersion = "appStoreVersion"
            case description = "description"
            case keywords = "keywords"
            case locale = "locale"
            case marketingUrl = "marketingUrl"
            case promotionalText = "promotionalText"
            case supportUrl = "supportUrl"
            case whatsNew = "whatsNew"
        }

        /** the fields to include for returned resources of type appPreviews */
        public enum FieldsappPreviews: String, Codable, Equatable, CaseIterable {
            case appPreviewSet = "appPreviewSet"
            case assetDeliveryState = "assetDeliveryState"
            case fileName = "fileName"
            case fileSize = "fileSize"
            case mimeType = "mimeType"
            case previewFrameTimeCode = "previewFrameTimeCode"
            case previewImage = "previewImage"
            case sourceFileChecksum = "sourceFileChecksum"
            case uploadOperations = "uploadOperations"
            case uploaded = "uploaded"
            case videoUrl = "videoUrl"
        }

        /** the fields to include for returned resources of type appPreviewSets */
        public enum FieldsappPreviewSets: String, Codable, Equatable, CaseIterable {
            case appPreviews = "appPreviews"
            case appStoreVersionLocalization = "appStoreVersionLocalization"
            case previewType = "previewType"
        }

        /** comma-separated list of relationships to include */
        public enum Include: String, Codable, Equatable, CaseIterable {
            case appPreviews = "appPreviews"
            case appStoreVersionLocalization = "appStoreVersionLocalization"
        }

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** the id of the requested resource */
                public var id: String

                /** filter by attribute 'previewType' */
                public var filterpreviewType: [FilterpreviewType]?

                /** the fields to include for returned resources of type appStoreVersionLocalizations */
                public var fieldsappStoreVersionLocalizations: [FieldsappStoreVersionLocalizations]?

                /** the fields to include for returned resources of type appPreviews */
                public var fieldsappPreviews: [FieldsappPreviews]?

                /** the fields to include for returned resources of type appPreviewSets */
                public var fieldsappPreviewSets: [FieldsappPreviewSets]?

                /** maximum resources per page */
                public var limit: Int?

                /** comma-separated list of relationships to include */
                public var include: [Include]?

                public init(id: String, filterpreviewType: [FilterpreviewType]? = nil, fieldsappStoreVersionLocalizations: [FieldsappStoreVersionLocalizations]? = nil, fieldsappPreviews: [FieldsappPreviews]? = nil, fieldsappPreviewSets: [FieldsappPreviewSets]? = nil, limit: Int? = nil, include: [Include]? = nil) {
                    self.id = id
                    self.filterpreviewType = filterpreviewType
                    self.fieldsappStoreVersionLocalizations = fieldsappStoreVersionLocalizations
                    self.fieldsappPreviews = fieldsappPreviews
                    self.fieldsappPreviewSets = fieldsappPreviewSets
                    self.limit = limit
                    self.include = include
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelated.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(id: String, filterpreviewType: [FilterpreviewType]? = nil, fieldsappStoreVersionLocalizations: [FieldsappStoreVersionLocalizations]? = nil, fieldsappPreviews: [FieldsappPreviews]? = nil, fieldsappPreviewSets: [FieldsappPreviewSets]? = nil, limit: Int? = nil, include: [Include]? = nil) {
                let options = Options(id: id, filterpreviewType: filterpreviewType, fieldsappStoreVersionLocalizations: fieldsappStoreVersionLocalizations, fieldsappPreviews: fieldsappPreviews, fieldsappPreviewSets: fieldsappPreviewSets, limit: limit, include: include)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "id" + "}", with: "\(self.options.id)")
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let filterpreviewType = options.filterpreviewType?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["filter[previewType]"] = filterpreviewType
                }
                if let fieldsappStoreVersionLocalizations = options.fieldsappStoreVersionLocalizations?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[appStoreVersionLocalizations]"] = fieldsappStoreVersionLocalizations
                }
                if let fieldsappPreviews = options.fieldsappPreviews?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[appPreviews]"] = fieldsappPreviews
                }
                if let fieldsappPreviewSets = options.fieldsappPreviewSets?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[appPreviewSets]"] = fieldsappPreviewSets
                }
                if let limit = options.limit {
                  params["limit"] = limit
                }
                if let include = options.include?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["include"] = include
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = AppPreviewSetsResponse

            /** List of related resources */
            case status200(AppPreviewSetsResponse)

            /** Parameter error(s) */
            case status400(ErrorResponse)

            /** Forbidden error */
            case status403(ErrorResponse)

            /** Not found error */
            case status404(ErrorResponse)

            public var success: AppPreviewSetsResponse? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: ErrorResponse? {
                switch self {
                case .status400(let response): return response
                case .status403(let response): return response
                case .status404(let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<AppPreviewSetsResponse, ErrorResponse> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status400(let response): return response
                case .status403(let response): return response
                case .status404(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status400: return 400
                case .status403: return 403
                case .status404: return 404
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status400: return false
                case .status403: return false
                case .status404: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(AppPreviewSetsResponse.self, from: data))
                case 400: self = try .status400(decoder.decode(ErrorResponse.self, from: data))
                case 403: self = try .status403(decoder.decode(ErrorResponse.self, from: data))
                case 404: self = try .status404(decoder.decode(ErrorResponse.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
