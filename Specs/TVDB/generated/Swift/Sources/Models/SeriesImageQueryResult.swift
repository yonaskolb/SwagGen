//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct SeriesImageQueryResult: APIModel {

    public var fileName: String?

    public var _id: Int?

    public var keyType: String?

    public var languageId: Int?

    public var ratingsInfo: RatingsInfo?

    public var resolution: String?

    public var subKey: String?

    public var thumbnail: String?

    public struct RatingsInfo: APIModel {

        /** Average rating for the given record. */
        public var average: Double?

        /** Number of ratings for the given record. */
        public var count: Int?

        public init(average: Double? = nil, count: Int? = nil) {
            self.average = average
            self.count = count
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            average = try container.decodeIfPresent("average")
            count = try container.decodeIfPresent("count")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encodeIfPresent(average, forKey: "average")
            try container.encodeIfPresent(count, forKey: "count")
        }

    }

    public init(fileName: String? = nil, _id: Int? = nil, keyType: String? = nil, languageId: Int? = nil, ratingsInfo: RatingsInfo? = nil, resolution: String? = nil, subKey: String? = nil, thumbnail: String? = nil) {
        self.fileName = fileName
        self._id = _id
        self.keyType = keyType
        self.languageId = languageId
        self.ratingsInfo = ratingsInfo
        self.resolution = resolution
        self.subKey = subKey
        self.thumbnail = thumbnail
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        fileName = try container.decodeIfPresent("fileName")
        _id = try container.decodeIfPresent("id")
        keyType = try container.decodeIfPresent("keyType")
        languageId = try container.decodeIfPresent("languageId")
        ratingsInfo = try container.decodeIfPresent("ratingsInfo")
        resolution = try container.decodeIfPresent("resolution")
        subKey = try container.decodeIfPresent("subKey")
        thumbnail = try container.decodeIfPresent("thumbnail")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(fileName, forKey: "fileName")
        try container.encodeIfPresent(_id, forKey: "id")
        try container.encodeIfPresent(keyType, forKey: "keyType")
        try container.encodeIfPresent(languageId, forKey: "languageId")
        try container.encodeIfPresent(ratingsInfo, forKey: "ratingsInfo")
        try container.encodeIfPresent(resolution, forKey: "resolution")
        try container.encodeIfPresent(subKey, forKey: "subKey")
        try container.encodeIfPresent(thumbnail, forKey: "thumbnail")
    }

}
