//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class AgeRatingDeclaration: APIModel {

    public enum `Type`: String, Codable, Equatable, CaseIterable {
        case ageRatingDeclarations = "ageRatingDeclarations"
    }

    public var links: ResourceLinks

    public var id: String

    public var type: `Type`

    public var attributes: Attributes?

    public class Attributes: APIModel {

        public enum AlcoholTobaccoOrDrugUseOrReferences: String, Codable, Equatable, CaseIterable {
            case none = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum GamblingSimulated: String, Codable, Equatable, CaseIterable {
            case none = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum HorrorOrFearThemes: String, Codable, Equatable, CaseIterable {
            case none = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum MatureOrSuggestiveThemes: String, Codable, Equatable, CaseIterable {
            case none = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum MedicalOrTreatmentInformation: String, Codable, Equatable, CaseIterable {
            case none = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum ProfanityOrCrudeHumor: String, Codable, Equatable, CaseIterable {
            case none = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum SexualContentGraphicAndNudity: String, Codable, Equatable, CaseIterable {
            case none = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum SexualContentOrNudity: String, Codable, Equatable, CaseIterable {
            case none = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum ViolenceCartoonOrFantasy: String, Codable, Equatable, CaseIterable {
            case none = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum ViolenceRealistic: String, Codable, Equatable, CaseIterable {
            case none = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public enum ViolenceRealisticProlongedGraphicOrSadistic: String, Codable, Equatable, CaseIterable {
            case none = "NONE"
            case infrequentOrMild = "INFREQUENT_OR_MILD"
            case frequentOrIntense = "FREQUENT_OR_INTENSE"
        }

        public var alcoholTobaccoOrDrugUseOrReferences: AlcoholTobaccoOrDrugUseOrReferences?

        public var gamblingAndContests: Bool?

        public var gamblingSimulated: GamblingSimulated?

        public var horrorOrFearThemes: HorrorOrFearThemes?

        public var kidsAgeBand: KidsAgeBand?

        public var matureOrSuggestiveThemes: MatureOrSuggestiveThemes?

        public var medicalOrTreatmentInformation: MedicalOrTreatmentInformation?

        public var profanityOrCrudeHumor: ProfanityOrCrudeHumor?

        public var sexualContentGraphicAndNudity: SexualContentGraphicAndNudity?

        public var sexualContentOrNudity: SexualContentOrNudity?

        public var unrestrictedWebAccess: Bool?

        public var violenceCartoonOrFantasy: ViolenceCartoonOrFantasy?

        public var violenceRealistic: ViolenceRealistic?

        public var violenceRealisticProlongedGraphicOrSadistic: ViolenceRealisticProlongedGraphicOrSadistic?

        public init(alcoholTobaccoOrDrugUseOrReferences: AlcoholTobaccoOrDrugUseOrReferences? = nil, gamblingAndContests: Bool? = nil, gamblingSimulated: GamblingSimulated? = nil, horrorOrFearThemes: HorrorOrFearThemes? = nil, kidsAgeBand: KidsAgeBand? = nil, matureOrSuggestiveThemes: MatureOrSuggestiveThemes? = nil, medicalOrTreatmentInformation: MedicalOrTreatmentInformation? = nil, profanityOrCrudeHumor: ProfanityOrCrudeHumor? = nil, sexualContentGraphicAndNudity: SexualContentGraphicAndNudity? = nil, sexualContentOrNudity: SexualContentOrNudity? = nil, unrestrictedWebAccess: Bool? = nil, violenceCartoonOrFantasy: ViolenceCartoonOrFantasy? = nil, violenceRealistic: ViolenceRealistic? = nil, violenceRealisticProlongedGraphicOrSadistic: ViolenceRealisticProlongedGraphicOrSadistic? = nil) {
            self.alcoholTobaccoOrDrugUseOrReferences = alcoholTobaccoOrDrugUseOrReferences
            self.gamblingAndContests = gamblingAndContests
            self.gamblingSimulated = gamblingSimulated
            self.horrorOrFearThemes = horrorOrFearThemes
            self.kidsAgeBand = kidsAgeBand
            self.matureOrSuggestiveThemes = matureOrSuggestiveThemes
            self.medicalOrTreatmentInformation = medicalOrTreatmentInformation
            self.profanityOrCrudeHumor = profanityOrCrudeHumor
            self.sexualContentGraphicAndNudity = sexualContentGraphicAndNudity
            self.sexualContentOrNudity = sexualContentOrNudity
            self.unrestrictedWebAccess = unrestrictedWebAccess
            self.violenceCartoonOrFantasy = violenceCartoonOrFantasy
            self.violenceRealistic = violenceRealistic
            self.violenceRealisticProlongedGraphicOrSadistic = violenceRealisticProlongedGraphicOrSadistic
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            alcoholTobaccoOrDrugUseOrReferences = try container.decodeIfPresent("alcoholTobaccoOrDrugUseOrReferences")
            gamblingAndContests = try container.decodeIfPresent("gamblingAndContests")
            gamblingSimulated = try container.decodeIfPresent("gamblingSimulated")
            horrorOrFearThemes = try container.decodeIfPresent("horrorOrFearThemes")
            kidsAgeBand = try container.decodeIfPresent("kidsAgeBand")
            matureOrSuggestiveThemes = try container.decodeIfPresent("matureOrSuggestiveThemes")
            medicalOrTreatmentInformation = try container.decodeIfPresent("medicalOrTreatmentInformation")
            profanityOrCrudeHumor = try container.decodeIfPresent("profanityOrCrudeHumor")
            sexualContentGraphicAndNudity = try container.decodeIfPresent("sexualContentGraphicAndNudity")
            sexualContentOrNudity = try container.decodeIfPresent("sexualContentOrNudity")
            unrestrictedWebAccess = try container.decodeIfPresent("unrestrictedWebAccess")
            violenceCartoonOrFantasy = try container.decodeIfPresent("violenceCartoonOrFantasy")
            violenceRealistic = try container.decodeIfPresent("violenceRealistic")
            violenceRealisticProlongedGraphicOrSadistic = try container.decodeIfPresent("violenceRealisticProlongedGraphicOrSadistic")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encodeIfPresent(alcoholTobaccoOrDrugUseOrReferences, forKey: "alcoholTobaccoOrDrugUseOrReferences")
            try container.encodeIfPresent(gamblingAndContests, forKey: "gamblingAndContests")
            try container.encodeIfPresent(gamblingSimulated, forKey: "gamblingSimulated")
            try container.encodeIfPresent(horrorOrFearThemes, forKey: "horrorOrFearThemes")
            try container.encodeIfPresent(kidsAgeBand, forKey: "kidsAgeBand")
            try container.encodeIfPresent(matureOrSuggestiveThemes, forKey: "matureOrSuggestiveThemes")
            try container.encodeIfPresent(medicalOrTreatmentInformation, forKey: "medicalOrTreatmentInformation")
            try container.encodeIfPresent(profanityOrCrudeHumor, forKey: "profanityOrCrudeHumor")
            try container.encodeIfPresent(sexualContentGraphicAndNudity, forKey: "sexualContentGraphicAndNudity")
            try container.encodeIfPresent(sexualContentOrNudity, forKey: "sexualContentOrNudity")
            try container.encodeIfPresent(unrestrictedWebAccess, forKey: "unrestrictedWebAccess")
            try container.encodeIfPresent(violenceCartoonOrFantasy, forKey: "violenceCartoonOrFantasy")
            try container.encodeIfPresent(violenceRealistic, forKey: "violenceRealistic")
            try container.encodeIfPresent(violenceRealisticProlongedGraphicOrSadistic, forKey: "violenceRealisticProlongedGraphicOrSadistic")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Attributes else { return false }
          guard self.alcoholTobaccoOrDrugUseOrReferences == object.alcoholTobaccoOrDrugUseOrReferences else { return false }
          guard self.gamblingAndContests == object.gamblingAndContests else { return false }
          guard self.gamblingSimulated == object.gamblingSimulated else { return false }
          guard self.horrorOrFearThemes == object.horrorOrFearThemes else { return false }
          guard self.kidsAgeBand == object.kidsAgeBand else { return false }
          guard self.matureOrSuggestiveThemes == object.matureOrSuggestiveThemes else { return false }
          guard self.medicalOrTreatmentInformation == object.medicalOrTreatmentInformation else { return false }
          guard self.profanityOrCrudeHumor == object.profanityOrCrudeHumor else { return false }
          guard self.sexualContentGraphicAndNudity == object.sexualContentGraphicAndNudity else { return false }
          guard self.sexualContentOrNudity == object.sexualContentOrNudity else { return false }
          guard self.unrestrictedWebAccess == object.unrestrictedWebAccess else { return false }
          guard self.violenceCartoonOrFantasy == object.violenceCartoonOrFantasy else { return false }
          guard self.violenceRealistic == object.violenceRealistic else { return false }
          guard self.violenceRealisticProlongedGraphicOrSadistic == object.violenceRealisticProlongedGraphicOrSadistic else { return false }
          return true
        }

        public static func == (lhs: Attributes, rhs: Attributes) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(links: ResourceLinks, id: String, type: `Type`, attributes: Attributes? = nil) {
        self.links = links
        self.id = id
        self.type = type
        self.attributes = attributes
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decode("links")
        id = try container.decode("id")
        type = try container.decode("type")
        attributes = try container.decodeIfPresent("attributes")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(links, forKey: "links")
        try container.encode(id, forKey: "id")
        try container.encode(type, forKey: "type")
        try container.encodeIfPresent(attributes, forKey: "attributes")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? AgeRatingDeclaration else { return false }
      guard self.links == object.links else { return false }
      guard self.id == object.id else { return false }
      guard self.type == object.type else { return false }
      guard self.attributes == object.attributes else { return false }
      return true
    }

    public static func == (lhs: AgeRatingDeclaration, rhs: AgeRatingDeclaration) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
