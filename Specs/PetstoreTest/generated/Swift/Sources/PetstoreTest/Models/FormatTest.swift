//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

public class FormatTest: JSONDecodable, JSONEncodable, PrettyPrintable {

    public var number: Double

    public var byte: String

    public var date: Date

    public var password: String

    public var binary: String?

    public var dateTime: Date?

    public var double: Double?

    public var float: Float?

    public var int32: Int?

    public var int64: Int?

    public var integer: Int?

    public var string: String?

    public var uuid: String?

    public init(number: Double, byte: String, date: Date, password: String, binary: String? = nil, dateTime: Date? = nil, double: Double? = nil, float: Float? = nil, int32: Int? = nil, int64: Int? = nil, integer: Int? = nil, string: String? = nil, uuid: String? = nil) {
        self.number = number
        self.byte = byte
        self.date = date
        self.password = password
        self.binary = binary
        self.dateTime = dateTime
        self.double = double
        self.float = float
        self.int32 = int32
        self.int64 = int64
        self.integer = integer
        self.string = string
        self.uuid = uuid
    }

    public required init(jsonDictionary: JSONDictionary) throws {
        number = try jsonDictionary.json(atKeyPath: "number")
        byte = try jsonDictionary.json(atKeyPath: "byte")
        date = try jsonDictionary.json(atKeyPath: "date")
        password = try jsonDictionary.json(atKeyPath: "password")
        binary = jsonDictionary.json(atKeyPath: "binary")
        dateTime = jsonDictionary.json(atKeyPath: "dateTime")
        double = jsonDictionary.json(atKeyPath: "double")
        float = jsonDictionary.json(atKeyPath: "float")
        int32 = jsonDictionary.json(atKeyPath: "int32")
        int64 = jsonDictionary.json(atKeyPath: "int64")
        integer = jsonDictionary.json(atKeyPath: "integer")
        string = jsonDictionary.json(atKeyPath: "string")
        uuid = jsonDictionary.json(atKeyPath: "uuid")
    }

    public func encode() -> JSONDictionary {
        var dictionary: JSONDictionary = [:]
        dictionary["number"] = number
        dictionary["byte"] = byte
        dictionary["date"] = date.encode()
        dictionary["password"] = password
        if let binary = binary {
            dictionary["binary"] = binary
        }
        if let dateTime = dateTime?.encode() {
            dictionary["dateTime"] = dateTime
        }
        if let double = double {
            dictionary["double"] = double
        }
        if let float = float {
            dictionary["float"] = float
        }
        if let int32 = int32 {
            dictionary["int32"] = int32
        }
        if let int64 = int64 {
            dictionary["int64"] = int64
        }
        if let integer = integer {
            dictionary["integer"] = integer
        }
        if let string = string {
            dictionary["string"] = string
        }
        if let uuid = uuid {
            dictionary["uuid"] = uuid
        }
        return dictionary
    }

    /// pretty prints all properties including nested models
    public var prettyPrinted: String {
        return "\(type(of: self)):\n\(encode().recursivePrint(indentIndex: 1))"
    }
}
