//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension TVDB.Users {

    /** Adds the supplied series ID to the user’s favorite’s list and returns the updated list. */
    public enum PutUserFavoritesById {

        public static let service = APIService<Response>(id: "putUserFavoritesById", tag: "Users", method: "PUT", path: "/user/favorites/{id}", hasBody: false, securityRequirement: SecurityRequirement(type: "jwtToken", scopes: []))

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** ID of the series */
                public var id: Int

                public init(id: Int) {
                    self.id = id
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: PutUserFavoritesById.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(id: Int) {
                let options = Options(id: id)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "id" + "}", with: "\(self.options.id)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = UserFavoritesData

            /** List of user favorites. */
            case status200(UserFavoritesData)

            /** Returned if your JWT token is missing or expired */
            case status401(NotAuthorized)

            /** Returned if no information exists for the current user */
            case status404(NotFound)

            /** Returned if requested record could not be updated */
            case status409(Conflict)

            public var success: UserFavoritesData? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status401(let response): return response
                case .status404(let response): return response
                case .status409(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status401: return 401
                case .status404: return 404
                case .status409: return 409
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status401: return false
                case .status404: return false
                case .status409: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(UserFavoritesData.self, from: data))
                case 401: self = try .status401(decoder.decode(NotAuthorized.self, from: data))
                case 404: self = try .status404(decoder.decode(NotFound.self, from: data))
                case 409: self = try .status409(decoder.decode(Conflict.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
