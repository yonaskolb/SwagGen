//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension AppStoreConnect.Apps {

    public enum AppsGetInstance {

        public static let service = APIService<Response>(id: "apps-get_instance", tag: "Apps", method: "GET", path: "/v1/apps/{id}", hasBody: false, securityRequirements: [SecurityRequirement(type: "itc-bearer-token", scopes: [])])

        /** the fields to include for returned resources of type apps */
        public enum Fieldsapps: String, Codable, Equatable, CaseIterable {
            case appInfos = "appInfos"
            case appStoreVersions = "appStoreVersions"
            case availableInNewTerritories = "availableInNewTerritories"
            case availableTerritories = "availableTerritories"
            case betaAppLocalizations = "betaAppLocalizations"
            case betaAppReviewDetail = "betaAppReviewDetail"
            case betaGroups = "betaGroups"
            case betaLicenseAgreement = "betaLicenseAgreement"
            case betaTesters = "betaTesters"
            case builds = "builds"
            case bundleId = "bundleId"
            case contentRightsDeclaration = "contentRightsDeclaration"
            case endUserLicenseAgreement = "endUserLicenseAgreement"
            case gameCenterEnabledVersions = "gameCenterEnabledVersions"
            case inAppPurchases = "inAppPurchases"
            case isOrEverWasMadeForKids = "isOrEverWasMadeForKids"
            case name = "name"
            case perfPowerMetrics = "perfPowerMetrics"
            case preOrder = "preOrder"
            case preReleaseVersions = "preReleaseVersions"
            case prices = "prices"
            case primaryLocale = "primaryLocale"
            case sku = "sku"
        }

        /** comma-separated list of relationships to include */
        public enum Include: String, Codable, Equatable, CaseIterable {
            case appInfos = "appInfos"
            case appStoreVersions = "appStoreVersions"
            case availableTerritories = "availableTerritories"
            case betaAppLocalizations = "betaAppLocalizations"
            case betaAppReviewDetail = "betaAppReviewDetail"
            case betaGroups = "betaGroups"
            case betaLicenseAgreement = "betaLicenseAgreement"
            case builds = "builds"
            case endUserLicenseAgreement = "endUserLicenseAgreement"
            case gameCenterEnabledVersions = "gameCenterEnabledVersions"
            case inAppPurchases = "inAppPurchases"
            case preOrder = "preOrder"
            case preReleaseVersions = "preReleaseVersions"
            case prices = "prices"
        }

        /** the fields to include for returned resources of type betaGroups */
        public enum FieldsbetaGroups: String, Codable, Equatable, CaseIterable {
            case app = "app"
            case betaTesters = "betaTesters"
            case builds = "builds"
            case createdDate = "createdDate"
            case feedbackEnabled = "feedbackEnabled"
            case isInternalGroup = "isInternalGroup"
            case name = "name"
            case publicLink = "publicLink"
            case publicLinkEnabled = "publicLinkEnabled"
            case publicLinkId = "publicLinkId"
            case publicLinkLimit = "publicLinkLimit"
            case publicLinkLimitEnabled = "publicLinkLimitEnabled"
        }

        /** the fields to include for returned resources of type perfPowerMetrics */
        public enum FieldsperfPowerMetrics: String, Codable, Equatable, CaseIterable {
            case deviceType = "deviceType"
            case metricType = "metricType"
            case platform = "platform"
        }

        /** the fields to include for returned resources of type appInfos */
        public enum FieldsappInfos: String, Codable, Equatable, CaseIterable {
            case app = "app"
            case appInfoLocalizations = "appInfoLocalizations"
            case appStoreAgeRating = "appStoreAgeRating"
            case appStoreState = "appStoreState"
            case brazilAgeRating = "brazilAgeRating"
            case kidsAgeBand = "kidsAgeBand"
            case primaryCategory = "primaryCategory"
            case primarySubcategoryOne = "primarySubcategoryOne"
            case primarySubcategoryTwo = "primarySubcategoryTwo"
            case secondaryCategory = "secondaryCategory"
            case secondarySubcategoryOne = "secondarySubcategoryOne"
            case secondarySubcategoryTwo = "secondarySubcategoryTwo"
        }

        /** the fields to include for returned resources of type appPreOrders */
        public enum FieldsappPreOrders: String, Codable, Equatable, CaseIterable {
            case app = "app"
            case appReleaseDate = "appReleaseDate"
            case preOrderAvailableDate = "preOrderAvailableDate"
        }

        /** the fields to include for returned resources of type preReleaseVersions */
        public enum FieldspreReleaseVersions: String, Codable, Equatable, CaseIterable {
            case app = "app"
            case builds = "builds"
            case platform = "platform"
            case version = "version"
        }

        /** the fields to include for returned resources of type appPrices */
        public enum FieldsappPrices: String, Codable, Equatable, CaseIterable {
            case app = "app"
            case priceTier = "priceTier"
        }

        /** the fields to include for returned resources of type inAppPurchases */
        public enum FieldsinAppPurchases: String, Codable, Equatable, CaseIterable {
            case apps = "apps"
            case inAppPurchaseType = "inAppPurchaseType"
            case productId = "productId"
            case referenceName = "referenceName"
            case state = "state"
        }

        /** the fields to include for returned resources of type betaAppReviewDetails */
        public enum FieldsbetaAppReviewDetails: String, Codable, Equatable, CaseIterable {
            case app = "app"
            case contactEmail = "contactEmail"
            case contactFirstName = "contactFirstName"
            case contactLastName = "contactLastName"
            case contactPhone = "contactPhone"
            case demoAccountName = "demoAccountName"
            case demoAccountPassword = "demoAccountPassword"
            case demoAccountRequired = "demoAccountRequired"
            case notes = "notes"
        }

        /** the fields to include for returned resources of type territories */
        public enum Fieldsterritories: String, Codable, Equatable, CaseIterable {
            case currency = "currency"
        }

        /** the fields to include for returned resources of type gameCenterEnabledVersions */
        public enum FieldsgameCenterEnabledVersions: String, Codable, Equatable, CaseIterable {
            case app = "app"
            case compatibleVersions = "compatibleVersions"
            case iconAsset = "iconAsset"
            case platform = "platform"
            case versionString = "versionString"
        }

        /** the fields to include for returned resources of type appStoreVersions */
        public enum FieldsappStoreVersions: String, Codable, Equatable, CaseIterable {
            case ageRatingDeclaration = "ageRatingDeclaration"
            case app = "app"
            case appStoreReviewDetail = "appStoreReviewDetail"
            case appStoreState = "appStoreState"
            case appStoreVersionLocalizations = "appStoreVersionLocalizations"
            case appStoreVersionPhasedRelease = "appStoreVersionPhasedRelease"
            case appStoreVersionSubmission = "appStoreVersionSubmission"
            case build = "build"
            case copyright = "copyright"
            case createdDate = "createdDate"
            case downloadable = "downloadable"
            case earliestReleaseDate = "earliestReleaseDate"
            case idfaDeclaration = "idfaDeclaration"
            case platform = "platform"
            case releaseType = "releaseType"
            case routingAppCoverage = "routingAppCoverage"
            case usesIdfa = "usesIdfa"
            case versionString = "versionString"
        }

        /** the fields to include for returned resources of type builds */
        public enum Fieldsbuilds: String, Codable, Equatable, CaseIterable {
            case app = "app"
            case appEncryptionDeclaration = "appEncryptionDeclaration"
            case appStoreVersion = "appStoreVersion"
            case betaAppReviewSubmission = "betaAppReviewSubmission"
            case betaBuildLocalizations = "betaBuildLocalizations"
            case betaGroups = "betaGroups"
            case buildBetaDetail = "buildBetaDetail"
            case diagnosticSignatures = "diagnosticSignatures"
            case expirationDate = "expirationDate"
            case expired = "expired"
            case iconAssetToken = "iconAssetToken"
            case icons = "icons"
            case individualTesters = "individualTesters"
            case minOsVersion = "minOsVersion"
            case perfPowerMetrics = "perfPowerMetrics"
            case preReleaseVersion = "preReleaseVersion"
            case processingState = "processingState"
            case uploadedDate = "uploadedDate"
            case usesNonExemptEncryption = "usesNonExemptEncryption"
            case version = "version"
        }

        /** the fields to include for returned resources of type betaAppLocalizations */
        public enum FieldsbetaAppLocalizations: String, Codable, Equatable, CaseIterable {
            case app = "app"
            case description = "description"
            case feedbackEmail = "feedbackEmail"
            case locale = "locale"
            case marketingUrl = "marketingUrl"
            case privacyPolicyUrl = "privacyPolicyUrl"
            case tvOsPrivacyPolicy = "tvOsPrivacyPolicy"
        }

        /** the fields to include for returned resources of type betaLicenseAgreements */
        public enum FieldsbetaLicenseAgreements: String, Codable, Equatable, CaseIterable {
            case agreementText = "agreementText"
            case app = "app"
        }

        /** the fields to include for returned resources of type endUserLicenseAgreements */
        public enum FieldsendUserLicenseAgreements: String, Codable, Equatable, CaseIterable {
            case agreementText = "agreementText"
            case app = "app"
            case territories = "territories"
        }

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** the id of the requested resource */
                public var id: String

                /** the fields to include for returned resources of type apps */
                public var fieldsapps: [Fieldsapps]?

                /** comma-separated list of relationships to include */
                public var include: [Include]?

                /** the fields to include for returned resources of type betaGroups */
                public var fieldsbetaGroups: [FieldsbetaGroups]?

                /** the fields to include for returned resources of type perfPowerMetrics */
                public var fieldsperfPowerMetrics: [FieldsperfPowerMetrics]?

                /** the fields to include for returned resources of type appInfos */
                public var fieldsappInfos: [FieldsappInfos]?

                /** the fields to include for returned resources of type appPreOrders */
                public var fieldsappPreOrders: [FieldsappPreOrders]?

                /** the fields to include for returned resources of type preReleaseVersions */
                public var fieldspreReleaseVersions: [FieldspreReleaseVersions]?

                /** the fields to include for returned resources of type appPrices */
                public var fieldsappPrices: [FieldsappPrices]?

                /** the fields to include for returned resources of type inAppPurchases */
                public var fieldsinAppPurchases: [FieldsinAppPurchases]?

                /** the fields to include for returned resources of type betaAppReviewDetails */
                public var fieldsbetaAppReviewDetails: [FieldsbetaAppReviewDetails]?

                /** the fields to include for returned resources of type territories */
                public var fieldsterritories: [Fieldsterritories]?

                /** the fields to include for returned resources of type gameCenterEnabledVersions */
                public var fieldsgameCenterEnabledVersions: [FieldsgameCenterEnabledVersions]?

                /** the fields to include for returned resources of type appStoreVersions */
                public var fieldsappStoreVersions: [FieldsappStoreVersions]?

                /** the fields to include for returned resources of type builds */
                public var fieldsbuilds: [Fieldsbuilds]?

                /** the fields to include for returned resources of type betaAppLocalizations */
                public var fieldsbetaAppLocalizations: [FieldsbetaAppLocalizations]?

                /** the fields to include for returned resources of type betaLicenseAgreements */
                public var fieldsbetaLicenseAgreements: [FieldsbetaLicenseAgreements]?

                /** the fields to include for returned resources of type endUserLicenseAgreements */
                public var fieldsendUserLicenseAgreements: [FieldsendUserLicenseAgreements]?

                /** maximum number of related appInfos returned (when they are included) */
                public var limitappInfos: Int?

                /** maximum number of related appStoreVersions returned (when they are included) */
                public var limitappStoreVersions: Int?

                /** maximum number of related availableTerritories returned (when they are included) */
                public var limitavailableTerritories: Int?

                /** maximum number of related betaAppLocalizations returned (when they are included) */
                public var limitbetaAppLocalizations: Int?

                /** maximum number of related betaGroups returned (when they are included) */
                public var limitbetaGroups: Int?

                /** maximum number of related builds returned (when they are included) */
                public var limitbuilds: Int?

                /** maximum number of related gameCenterEnabledVersions returned (when they are included) */
                public var limitgameCenterEnabledVersions: Int?

                /** maximum number of related inAppPurchases returned (when they are included) */
                public var limitinAppPurchases: Int?

                /** maximum number of related preReleaseVersions returned (when they are included) */
                public var limitpreReleaseVersions: Int?

                /** maximum number of related prices returned (when they are included) */
                public var limitprices: Int?

                public init(id: String, fieldsapps: [Fieldsapps]? = nil, include: [Include]? = nil, fieldsbetaGroups: [FieldsbetaGroups]? = nil, fieldsperfPowerMetrics: [FieldsperfPowerMetrics]? = nil, fieldsappInfos: [FieldsappInfos]? = nil, fieldsappPreOrders: [FieldsappPreOrders]? = nil, fieldspreReleaseVersions: [FieldspreReleaseVersions]? = nil, fieldsappPrices: [FieldsappPrices]? = nil, fieldsinAppPurchases: [FieldsinAppPurchases]? = nil, fieldsbetaAppReviewDetails: [FieldsbetaAppReviewDetails]? = nil, fieldsterritories: [Fieldsterritories]? = nil, fieldsgameCenterEnabledVersions: [FieldsgameCenterEnabledVersions]? = nil, fieldsappStoreVersions: [FieldsappStoreVersions]? = nil, fieldsbuilds: [Fieldsbuilds]? = nil, fieldsbetaAppLocalizations: [FieldsbetaAppLocalizations]? = nil, fieldsbetaLicenseAgreements: [FieldsbetaLicenseAgreements]? = nil, fieldsendUserLicenseAgreements: [FieldsendUserLicenseAgreements]? = nil, limitappInfos: Int? = nil, limitappStoreVersions: Int? = nil, limitavailableTerritories: Int? = nil, limitbetaAppLocalizations: Int? = nil, limitbetaGroups: Int? = nil, limitbuilds: Int? = nil, limitgameCenterEnabledVersions: Int? = nil, limitinAppPurchases: Int? = nil, limitpreReleaseVersions: Int? = nil, limitprices: Int? = nil) {
                    self.id = id
                    self.fieldsapps = fieldsapps
                    self.include = include
                    self.fieldsbetaGroups = fieldsbetaGroups
                    self.fieldsperfPowerMetrics = fieldsperfPowerMetrics
                    self.fieldsappInfos = fieldsappInfos
                    self.fieldsappPreOrders = fieldsappPreOrders
                    self.fieldspreReleaseVersions = fieldspreReleaseVersions
                    self.fieldsappPrices = fieldsappPrices
                    self.fieldsinAppPurchases = fieldsinAppPurchases
                    self.fieldsbetaAppReviewDetails = fieldsbetaAppReviewDetails
                    self.fieldsterritories = fieldsterritories
                    self.fieldsgameCenterEnabledVersions = fieldsgameCenterEnabledVersions
                    self.fieldsappStoreVersions = fieldsappStoreVersions
                    self.fieldsbuilds = fieldsbuilds
                    self.fieldsbetaAppLocalizations = fieldsbetaAppLocalizations
                    self.fieldsbetaLicenseAgreements = fieldsbetaLicenseAgreements
                    self.fieldsendUserLicenseAgreements = fieldsendUserLicenseAgreements
                    self.limitappInfos = limitappInfos
                    self.limitappStoreVersions = limitappStoreVersions
                    self.limitavailableTerritories = limitavailableTerritories
                    self.limitbetaAppLocalizations = limitbetaAppLocalizations
                    self.limitbetaGroups = limitbetaGroups
                    self.limitbuilds = limitbuilds
                    self.limitgameCenterEnabledVersions = limitgameCenterEnabledVersions
                    self.limitinAppPurchases = limitinAppPurchases
                    self.limitpreReleaseVersions = limitpreReleaseVersions
                    self.limitprices = limitprices
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: AppsGetInstance.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(id: String, fieldsapps: [Fieldsapps]? = nil, include: [Include]? = nil, fieldsbetaGroups: [FieldsbetaGroups]? = nil, fieldsperfPowerMetrics: [FieldsperfPowerMetrics]? = nil, fieldsappInfos: [FieldsappInfos]? = nil, fieldsappPreOrders: [FieldsappPreOrders]? = nil, fieldspreReleaseVersions: [FieldspreReleaseVersions]? = nil, fieldsappPrices: [FieldsappPrices]? = nil, fieldsinAppPurchases: [FieldsinAppPurchases]? = nil, fieldsbetaAppReviewDetails: [FieldsbetaAppReviewDetails]? = nil, fieldsterritories: [Fieldsterritories]? = nil, fieldsgameCenterEnabledVersions: [FieldsgameCenterEnabledVersions]? = nil, fieldsappStoreVersions: [FieldsappStoreVersions]? = nil, fieldsbuilds: [Fieldsbuilds]? = nil, fieldsbetaAppLocalizations: [FieldsbetaAppLocalizations]? = nil, fieldsbetaLicenseAgreements: [FieldsbetaLicenseAgreements]? = nil, fieldsendUserLicenseAgreements: [FieldsendUserLicenseAgreements]? = nil, limitappInfos: Int? = nil, limitappStoreVersions: Int? = nil, limitavailableTerritories: Int? = nil, limitbetaAppLocalizations: Int? = nil, limitbetaGroups: Int? = nil, limitbuilds: Int? = nil, limitgameCenterEnabledVersions: Int? = nil, limitinAppPurchases: Int? = nil, limitpreReleaseVersions: Int? = nil, limitprices: Int? = nil) {
                let options = Options(id: id, fieldsapps: fieldsapps, include: include, fieldsbetaGroups: fieldsbetaGroups, fieldsperfPowerMetrics: fieldsperfPowerMetrics, fieldsappInfos: fieldsappInfos, fieldsappPreOrders: fieldsappPreOrders, fieldspreReleaseVersions: fieldspreReleaseVersions, fieldsappPrices: fieldsappPrices, fieldsinAppPurchases: fieldsinAppPurchases, fieldsbetaAppReviewDetails: fieldsbetaAppReviewDetails, fieldsterritories: fieldsterritories, fieldsgameCenterEnabledVersions: fieldsgameCenterEnabledVersions, fieldsappStoreVersions: fieldsappStoreVersions, fieldsbuilds: fieldsbuilds, fieldsbetaAppLocalizations: fieldsbetaAppLocalizations, fieldsbetaLicenseAgreements: fieldsbetaLicenseAgreements, fieldsendUserLicenseAgreements: fieldsendUserLicenseAgreements, limitappInfos: limitappInfos, limitappStoreVersions: limitappStoreVersions, limitavailableTerritories: limitavailableTerritories, limitbetaAppLocalizations: limitbetaAppLocalizations, limitbetaGroups: limitbetaGroups, limitbuilds: limitbuilds, limitgameCenterEnabledVersions: limitgameCenterEnabledVersions, limitinAppPurchases: limitinAppPurchases, limitpreReleaseVersions: limitpreReleaseVersions, limitprices: limitprices)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "id" + "}", with: "\(self.options.id)")
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let fieldsapps = options.fieldsapps?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[apps]"] = fieldsapps
                }
                if let include = options.include?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["include"] = include
                }
                if let fieldsbetaGroups = options.fieldsbetaGroups?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[betaGroups]"] = fieldsbetaGroups
                }
                if let fieldsperfPowerMetrics = options.fieldsperfPowerMetrics?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[perfPowerMetrics]"] = fieldsperfPowerMetrics
                }
                if let fieldsappInfos = options.fieldsappInfos?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[appInfos]"] = fieldsappInfos
                }
                if let fieldsappPreOrders = options.fieldsappPreOrders?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[appPreOrders]"] = fieldsappPreOrders
                }
                if let fieldspreReleaseVersions = options.fieldspreReleaseVersions?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[preReleaseVersions]"] = fieldspreReleaseVersions
                }
                if let fieldsappPrices = options.fieldsappPrices?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[appPrices]"] = fieldsappPrices
                }
                if let fieldsinAppPurchases = options.fieldsinAppPurchases?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[inAppPurchases]"] = fieldsinAppPurchases
                }
                if let fieldsbetaAppReviewDetails = options.fieldsbetaAppReviewDetails?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[betaAppReviewDetails]"] = fieldsbetaAppReviewDetails
                }
                if let fieldsterritories = options.fieldsterritories?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[territories]"] = fieldsterritories
                }
                if let fieldsgameCenterEnabledVersions = options.fieldsgameCenterEnabledVersions?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[gameCenterEnabledVersions]"] = fieldsgameCenterEnabledVersions
                }
                if let fieldsappStoreVersions = options.fieldsappStoreVersions?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[appStoreVersions]"] = fieldsappStoreVersions
                }
                if let fieldsbuilds = options.fieldsbuilds?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[builds]"] = fieldsbuilds
                }
                if let fieldsbetaAppLocalizations = options.fieldsbetaAppLocalizations?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[betaAppLocalizations]"] = fieldsbetaAppLocalizations
                }
                if let fieldsbetaLicenseAgreements = options.fieldsbetaLicenseAgreements?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[betaLicenseAgreements]"] = fieldsbetaLicenseAgreements
                }
                if let fieldsendUserLicenseAgreements = options.fieldsendUserLicenseAgreements?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[endUserLicenseAgreements]"] = fieldsendUserLicenseAgreements
                }
                if let limitappInfos = options.limitappInfos {
                  params["limit[appInfos]"] = limitappInfos
                }
                if let limitappStoreVersions = options.limitappStoreVersions {
                  params["limit[appStoreVersions]"] = limitappStoreVersions
                }
                if let limitavailableTerritories = options.limitavailableTerritories {
                  params["limit[availableTerritories]"] = limitavailableTerritories
                }
                if let limitbetaAppLocalizations = options.limitbetaAppLocalizations {
                  params["limit[betaAppLocalizations]"] = limitbetaAppLocalizations
                }
                if let limitbetaGroups = options.limitbetaGroups {
                  params["limit[betaGroups]"] = limitbetaGroups
                }
                if let limitbuilds = options.limitbuilds {
                  params["limit[builds]"] = limitbuilds
                }
                if let limitgameCenterEnabledVersions = options.limitgameCenterEnabledVersions {
                  params["limit[gameCenterEnabledVersions]"] = limitgameCenterEnabledVersions
                }
                if let limitinAppPurchases = options.limitinAppPurchases {
                  params["limit[inAppPurchases]"] = limitinAppPurchases
                }
                if let limitpreReleaseVersions = options.limitpreReleaseVersions {
                  params["limit[preReleaseVersions]"] = limitpreReleaseVersions
                }
                if let limitprices = options.limitprices {
                  params["limit[prices]"] = limitprices
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = AppResponse

            /** Single App */
            case status200(AppResponse)

            /** Parameter error(s) */
            case status400(ErrorResponse)

            /** Forbidden error */
            case status403(ErrorResponse)

            /** Not found error */
            case status404(ErrorResponse)

            public var success: AppResponse? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: ErrorResponse? {
                switch self {
                case .status400(let response): return response
                case .status403(let response): return response
                case .status404(let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<AppResponse, ErrorResponse> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status400(let response): return response
                case .status403(let response): return response
                case .status404(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status400: return 400
                case .status403: return 403
                case .status404: return 404
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status400: return false
                case .status403: return false
                case .status404: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(AppResponse.self, from: data))
                case 400: self = try .status400(decoder.decode(ErrorResponse.self, from: data))
                case 403: self = try .status403(decoder.decode(ErrorResponse.self, from: data))
                case 404: self = try .status404(decoder.decode(ErrorResponse.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
