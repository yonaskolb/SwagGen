//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class BetaAppLocalizationUpdateRequest: APIModel {

    public var data: DataType

    public class DataType: APIModel {

        public enum `Type`: String, Codable, Equatable, CaseIterable {
            case betaAppLocalizations = "betaAppLocalizations"
        }

        public var id: String

        public var type: `Type`

        public var attributes: Attributes?

        public class Attributes: APIModel {

            public var description: String?

            public var feedbackEmail: String?

            public var marketingUrl: String?

            public var privacyPolicyUrl: String?

            public var tvOsPrivacyPolicy: String?

            public init(description: String? = nil, feedbackEmail: String? = nil, marketingUrl: String? = nil, privacyPolicyUrl: String? = nil, tvOsPrivacyPolicy: String? = nil) {
                self.description = description
                self.feedbackEmail = feedbackEmail
                self.marketingUrl = marketingUrl
                self.privacyPolicyUrl = privacyPolicyUrl
                self.tvOsPrivacyPolicy = tvOsPrivacyPolicy
            }

            public required init(from decoder: Decoder) throws {
                let container = try decoder.container(keyedBy: StringCodingKey.self)

                description = try container.decodeIfPresent("description")
                feedbackEmail = try container.decodeIfPresent("feedbackEmail")
                marketingUrl = try container.decodeIfPresent("marketingUrl")
                privacyPolicyUrl = try container.decodeIfPresent("privacyPolicyUrl")
                tvOsPrivacyPolicy = try container.decodeIfPresent("tvOsPrivacyPolicy")
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.container(keyedBy: StringCodingKey.self)

                try container.encodeIfPresent(description, forKey: "description")
                try container.encodeIfPresent(feedbackEmail, forKey: "feedbackEmail")
                try container.encodeIfPresent(marketingUrl, forKey: "marketingUrl")
                try container.encodeIfPresent(privacyPolicyUrl, forKey: "privacyPolicyUrl")
                try container.encodeIfPresent(tvOsPrivacyPolicy, forKey: "tvOsPrivacyPolicy")
            }

            public func isEqual(to object: Any?) -> Bool {
              guard let object = object as? Attributes else { return false }
              guard self.description == object.description else { return false }
              guard self.feedbackEmail == object.feedbackEmail else { return false }
              guard self.marketingUrl == object.marketingUrl else { return false }
              guard self.privacyPolicyUrl == object.privacyPolicyUrl else { return false }
              guard self.tvOsPrivacyPolicy == object.tvOsPrivacyPolicy else { return false }
              return true
            }

            public static func == (lhs: Attributes, rhs: Attributes) -> Bool {
                return lhs.isEqual(to: rhs)
            }
        }

        public init(id: String, type: `Type`, attributes: Attributes? = nil) {
            self.id = id
            self.type = type
            self.attributes = attributes
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            id = try container.decode("id")
            type = try container.decode("type")
            attributes = try container.decodeIfPresent("attributes")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encode(id, forKey: "id")
            try container.encode(type, forKey: "type")
            try container.encodeIfPresent(attributes, forKey: "attributes")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? DataType else { return false }
          guard self.id == object.id else { return false }
          guard self.type == object.type else { return false }
          guard self.attributes == object.attributes else { return false }
          return true
        }

        public static func == (lhs: DataType, rhs: DataType) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(data: DataType) {
        self.data = data
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        data = try container.decode("data")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(data, forKey: "data")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? BetaAppLocalizationUpdateRequest else { return false }
      guard self.data == object.data else { return false }
      return true
    }

    public static func == (lhs: BetaAppLocalizationUpdateRequest, rhs: BetaAppLocalizationUpdateRequest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
