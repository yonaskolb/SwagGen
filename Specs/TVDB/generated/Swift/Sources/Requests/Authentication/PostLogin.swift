//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension TVDB.Authentication {

    /** Returns a session token to be included in the rest of the requests. Note that API key authentication is required for all subsequent requests and user auth is required for routes in the `User` section */
    public enum PostLogin {

        public static let service = APIService<Response>(id: "postLogin", tag: "Authentication", method: "POST", path: "/login", hasBody: true)

        public final class Request: APIRequest<Response> {

            public var body: Auth

            public init(body: Auth) {
                self.body = body
                super.init(service: PostLogin.service) {
                    let jsonEncoder = JSONEncoder()
                    return try jsonEncoder.encode(body)
                }
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = Token

            /** Returns a JWT token for use with the rest of the API routes */
            case status200(Token)

            /** Invalid credentials and/or API token */
            case status401(NotAuthorized)

            public var success: Token? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: NotAuthorized? {
                switch self {
                case .status401(let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<Token, NotAuthorized> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status401(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status401: return 401
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status401: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(Token.self, from: data))
                case 401: self = try .status401(decoder.decode(NotAuthorized.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
