//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension AppStoreConnect.Devices {

    public enum DevicesGetCollection {

        public static let service = APIService<Response>(id: "devices-get_collection", tag: "Devices", method: "GET", path: "/v1/devices", hasBody: false, securityRequirements: [SecurityRequirement(type: "itc-bearer-token", scopes: [])])

        /** filter by attribute 'platform' */
        public enum Filterplatform: String, Codable, Equatable, CaseIterable {
            case ios = "IOS"
            case macOs = "MAC_OS"
        }

        /** filter by attribute 'status' */
        public enum Filterstatus: String, Codable, Equatable, CaseIterable {
            case enabled = "ENABLED"
            case disabled = "DISABLED"
        }

        /** comma-separated list of sort expressions; resources will be sorted as specified */
        public enum Sort: String, Codable, Equatable, CaseIterable {
            case id = "id"
            case _id = "-id"
            case name = "name"
            case _name = "-name"
            case platform = "platform"
            case _platform = "-platform"
            case status = "status"
            case _status = "-status"
            case udid = "udid"
            case _udid = "-udid"
        }

        /** the fields to include for returned resources of type devices */
        public enum Fieldsdevices: String, Codable, Equatable, CaseIterable {
            case addedDate = "addedDate"
            case deviceClass = "deviceClass"
            case model = "model"
            case name = "name"
            case platform = "platform"
            case status = "status"
            case udid = "udid"
        }

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** filter by attribute 'name' */
                public var filtername: [String]?

                /** filter by attribute 'platform' */
                public var filterplatform: [Filterplatform]?

                /** filter by attribute 'status' */
                public var filterstatus: [Filterstatus]?

                /** filter by attribute 'udid' */
                public var filterudid: [String]?

                /** filter by id(s) */
                public var filterid: [String]?

                /** comma-separated list of sort expressions; resources will be sorted as specified */
                public var sort: [Sort]?

                /** the fields to include for returned resources of type devices */
                public var fieldsdevices: [Fieldsdevices]?

                /** maximum resources per page */
                public var limit: Int?

                public init(filtername: [String]? = nil, filterplatform: [Filterplatform]? = nil, filterstatus: [Filterstatus]? = nil, filterudid: [String]? = nil, filterid: [String]? = nil, sort: [Sort]? = nil, fieldsdevices: [Fieldsdevices]? = nil, limit: Int? = nil) {
                    self.filtername = filtername
                    self.filterplatform = filterplatform
                    self.filterstatus = filterstatus
                    self.filterudid = filterudid
                    self.filterid = filterid
                    self.sort = sort
                    self.fieldsdevices = fieldsdevices
                    self.limit = limit
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: DevicesGetCollection.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(filtername: [String]? = nil, filterplatform: [Filterplatform]? = nil, filterstatus: [Filterstatus]? = nil, filterudid: [String]? = nil, filterid: [String]? = nil, sort: [Sort]? = nil, fieldsdevices: [Fieldsdevices]? = nil, limit: Int? = nil) {
                let options = Options(filtername: filtername, filterplatform: filterplatform, filterstatus: filterstatus, filterudid: filterudid, filterid: filterid, sort: sort, fieldsdevices: fieldsdevices, limit: limit)
                self.init(options: options)
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let filtername = options.filtername?.joined(separator: ",") {
                  params["filter[name]"] = filtername
                }
                if let filterplatform = options.filterplatform?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["filter[platform]"] = filterplatform
                }
                if let filterstatus = options.filterstatus?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["filter[status]"] = filterstatus
                }
                if let filterudid = options.filterudid?.joined(separator: ",") {
                  params["filter[udid]"] = filterudid
                }
                if let filterid = options.filterid?.joined(separator: ",") {
                  params["filter[id]"] = filterid
                }
                if let sort = options.sort?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["sort"] = sort
                }
                if let fieldsdevices = options.fieldsdevices?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[devices]"] = fieldsdevices
                }
                if let limit = options.limit {
                  params["limit"] = limit
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = DevicesResponse

            /** List of Devices */
            case status200(DevicesResponse)

            /** Parameter error(s) */
            case status400(ErrorResponse)

            /** Forbidden error */
            case status403(ErrorResponse)

            public var success: DevicesResponse? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: ErrorResponse? {
                switch self {
                case .status400(let response): return response
                case .status403(let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<DevicesResponse, ErrorResponse> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status400(let response): return response
                case .status403(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status400: return 400
                case .status403: return 403
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status400: return false
                case .status403: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(DevicesResponse.self, from: data))
                case 400: self = try .status400(decoder.decode(ErrorResponse.self, from: data))
                case 403: self = try .status403(decoder.decode(ErrorResponse.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
