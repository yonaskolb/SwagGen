//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension Operation {

    /** Has all sorts of parameters */
    public enum PostAllParams {

        public static let service = APIService<Response>(id: "postAllParams", tag: "", method: "POST", path: "/all-params", hasBody: true, securityRequirement: SecurityRequirement(type: "test_auth", scopes: ["read"]))

        public final class Request: APIRequest<Response> {

            /** Has all sorts of parameters */
            public class Body: APIModel {

                /** Updated name of the pet */
                public var name: String?

                /** Updated status of the pet */
                public var status: String?

                public init(name: String? = nil, status: String? = nil) {
                    self.name = name
                    self.status = status
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    name = try container.decodeIfPresent("name")
                    status = try container.decodeIfPresent("status")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(name, forKey: "name")
                    try container.encodeIfPresent(status, forKey: "status")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Body else { return false }
                  guard self.name == object.name else { return false }
                  guard self.status == object.status else { return false }
                  return true
                }

                public static func == (lhs: Body, rhs: Body) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            public struct Options {

                /** The id of the user */
                public var userId: String

                /** The id of the pet */
                public var petId: String

                /** The api key */
                public var apiKey: String

                /** Cookie that tracks pets */
                public var hasPets: Bool

                public init(userId: String, petId: String, apiKey: String, hasPets: Bool) {
                    self.userId = userId
                    self.petId = petId
                    self.apiKey = apiKey
                    self.hasPets = hasPets
                }
            }

            public var options: Options

            public var body: Body?

            public init(body: Body?, options: Options) {
                self.body = body
                self.options = options
                super.init(service: PostAllParams.service) {
                    let jsonEncoder = JSONEncoder()
                    return try jsonEncoder.encode(body)
                }
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(userId: String, petId: String, apiKey: String, hasPets: Bool, body: Body? = nil) {
                let options = Options(userId: userId, petId: petId, apiKey: apiKey, hasPets: hasPets)
                self.init(body: body, options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "userId" + "}", with: "\(self.options.userId)")
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                params["petId"] = options.petId
                return params
            }

            override var headerParameters: [String: String] {
                var headers: [String: String] = [:]
                headers["apiKey"] = options.apiKey
                return headers
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = Void

            /** Invalid input */
            case status405

            public var success: Void? {
                switch self {
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status405: return 405
                }
            }

            public var successful: Bool {
                switch self {
                case .status405: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 405: self = .status405
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
