{
   "openapi": "3.0.0",
   "info": {
     "version": "v1",
     "title": "Transport for London Unified API"
   },
   "paths": {
     "/AccidentStats/{year}": {
       "get": {
         "tags": [
           "AccidentStats"
         ],
         "summary": "Gets all accident details for accidents occuring in the specified year",
         "operationId": "AccidentStats_Get",
         "parameters": [
           {
             "name": "year",
             "in": "path",
             "description": "The year for which to filter the accidents on.",
             "required": true,
             "schema": {
               "type": "integer",
               "format": "int32"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/AccidentDetail"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/AccidentDetail"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/AccidentDetail"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/AccidentDetail"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/AirQuality": {
       "get": {
         "tags": [
           "AirQuality"
         ],
         "summary": "Gets air quality data feed",
         "operationId": "AirQuality_Get",
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               },
               "text/json": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               },
               "application/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               },
               "text/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/BikePoint": {
       "get": {
         "tags": [
           "BikePoint"
         ],
         "summary": "Gets all bike point locations. The Place object has an addtionalProperties array which contains the nbBikes, nbDocks and nbSpaces\r\n            numbers which give the status of the BikePoint. A mismatch in these numbers i.e. nbDocks - (nbBikes + nbSpaces) != 0 indicates broken docks.",
         "operationId": "BikePoint_GetAll",
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Place"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Place"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Place"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Place"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/BikePoint/{id}": {
       "get": {
         "tags": [
           "BikePoint"
         ],
         "summary": "Gets the bike point with the given id.",
         "operationId": "BikePoint_Get",
         "parameters": [
           {
             "name": "id",
             "in": "path",
             "description": "A bike point id (a list of ids can be obtained from the above BikePoint call)",
             "required": true,
             "schema": {
               "type": "string"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "$ref": "#/components/schemas/Place"
                 }
               },
               "text/json": {
                 "schema": {
                   "$ref": "#/components/schemas/Place"
                 }
               },
               "application/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/Place"
                 }
               },
               "text/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/Place"
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/BikePoint/Search": {
       "get": {
         "tags": [
           "BikePoint"
         ],
         "summary": "Search for bike stations by their name, a bike point's name often contains information about the name of the street\r\n            or nearby landmarks, for example. Note that the search result does not contain the PlaceProperties i.e. the status\r\n            or occupancy of the BikePoint, to get that information you should retrieve the BikePoint by its id on /BikePoint/id.",
         "operationId": "BikePoint_Search",
         "parameters": [
           {
             "name": "query",
             "in": "query",
             "description": "The search term e.g. \"St. James\"",
             "required": true,
             "schema": {
               "type": "string"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Place"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Place"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Place"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Place"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Cabwise/search": {
       "get": {
         "tags": [
           "Cabwise"
         ],
         "summary": "Gets taxis and minicabs contact information",
         "operationId": "Cabwise_Get",
         "parameters": [
           {
             "name": "lat",
             "in": "query",
             "description": "Latitude",
             "required": true,
             "schema": {
               "type": "number",
               "format": "double"
             }
           },
           {
             "name": "lon",
             "in": "query",
             "description": "Longitude",
             "required": true,
             "schema": {
               "type": "number",
               "format": "double"
             }
           },
           {
             "name": "optype",
             "in": "query",
             "description": "Operator Type e.g Minicab, Executive, Limousine",
             "required": false,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "wc",
             "in": "query",
             "description": "Wheelchair accessible",
             "required": false,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "radius",
             "in": "query",
             "description": "The radius of the bounding circle in metres",
             "required": false,
             "schema": {
               "type": "number",
               "format": "double"
             }
           },
           {
             "name": "name",
             "in": "query",
             "description": "Trading name of operating company",
             "required": false,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "maxResults",
             "in": "query",
             "description": "An optional parameter to limit the number of results return. Default and maximum is 20.",
             "required": false,
             "schema": {
               "type": "integer",
               "format": "int32"
             }
           },
           {
             "name": "legacyFormat",
             "in": "query",
             "description": "Legacy Format",
             "required": false,
             "schema": {
               "type": "boolean"
             }
           },
           {
             "name": "forceXml",
             "in": "query",
             "description": "Force Xml",
             "required": false,
             "schema": {
               "type": "boolean"
             }
           },
           {
             "name": "twentyFourSevenOnly",
             "in": "query",
             "description": "Twenty Four Seven Only",
             "required": false,
             "schema": {
               "type": "boolean"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               },
               "text/json": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               },
               "application/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               },
               "text/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Journey/Meta/Modes": {
       "get": {
         "tags": [
           "Journey"
         ],
         "summary": "Gets a list of all of the available journey planner modes",
         "operationId": "Journey_Meta",
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Mode"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Mode"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Mode"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Mode"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Journey/JourneyResults/{from}/to/{to}": {
       "get": {
         "tags": [
           "Journey"
         ],
         "summary": "Perform a Journey Planner search from the parameters specified in simple types",
         "operationId": "Journey_JourneyResults",
         "parameters": [
           {
             "name": "from",
             "in": "path",
             "description": "Origin of the journey. Can be WGS84 coordinates expressed as \"lat,long\", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "to",
             "in": "path",
             "description": "Destination of the journey. Can be WGS84 coordinates expressed as \"lat,long\", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "via",
             "in": "query",
             "description": "Travel through point on the journey. Can be WGS84 coordinates expressed as \"lat,long\", a UK postcode, a Naptan (StopPoint) id, an ICS StopId, or a free-text string (will cause disambiguation unless it exactly matches a point of interest name).",
             "required": false,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "nationalSearch",
             "in": "query",
             "description": "Does the journey cover stops outside London? eg. \"nationalSearch=true\"",
             "required": false,
             "schema": {
               "type": "boolean"
             }
           },
           {
             "name": "date",
             "in": "query",
             "description": "The date must be in yyyyMMdd format",
             "required": false,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "time",
             "in": "query",
             "description": "The time must be in HHmm format",
             "required": false,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "timeIs",
             "in": "query",
             "description": "Does the time given relate to arrival or leaving time? Possible options: \"departing\" | \"arriving\"",
             "required": false,
             "schema": {
               "type": "string",
               "enum": [
                 "Arriving",
                 "Departing"
               ]
             }
           },
           {
             "name": "journeyPreference",
             "in": "query",
             "description": "The journey preference eg possible options: \"leastinterchange\" | \"leasttime\" | \"leastwalking\"",
             "required": false,
             "schema": {
               "type": "string",
               "enum": [
                 "LeastInterchange",
                 "LeastTime",
                 "LeastWalking"
               ]
             }
           },
           {
             "name": "mode",
             "in": "query",
             "description": "The mode must be a comma separated list of modes. eg possible options: \"public-bus,overground,train,tube,coach,dlr,cablecar,tram,river,walking,cycle\"",
             "required": false,
             "explode": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           },
           {
             "name": "accessibilityPreference",
             "in": "query",
             "description": "The accessibility preference must be a comma separated list eg. \"noSolidStairs,noEscalators,noElevators,stepFreeToVehicle,stepFreeToPlatform\"",
             "required": false,
             "explode": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string",
                 "enum": [
                   "NoRequirements",
                   "NoSolidStairs",
                   "NoEscalators",
                   "NoElevators",
                   "StepFreeToVehicle",
                   "StepFreeToPlatform"
                 ]
               }
             }
           },
           {
             "name": "fromName",
             "in": "query",
             "description": "An optional name to associate with the origin of the journey in the results.",
             "required": false,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "toName",
             "in": "query",
             "description": "An optional name to associate with the destination of the journey in the results.",
             "required": false,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "viaName",
             "in": "query",
             "description": "An optional name to associate with the via point of the journey in the results.",
             "required": false,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "maxTransferMinutes",
             "in": "query",
             "description": "The max walking time in minutes for transfer eg. \"120\"",
             "required": false,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "maxWalkingMinutes",
             "in": "query",
             "description": "The max walking time in minutes for journeys eg. \"120\"",
             "required": false,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "walkingSpeed",
             "in": "query",
             "description": "The walking speed. eg possible options: \"slow\" | \"average\" | \"fast\".",
             "required": false,
             "schema": {
               "type": "string",
               "enum": [
                 "Slow",
                 "Average",
                 "Fast"
               ]
             }
           },
           {
             "name": "cyclePreference",
             "in": "query",
             "description": "The cycle preference. eg possible options: \"allTheWay\" | \"leaveAtStation\" | \"takeOnTransport\" | \"cycleHire\"",
             "required": false,
             "schema": {
               "type": "string",
               "enum": [
                 "None",
                 "LeaveAtStation",
                 "TakeOnTransport",
                 "AllTheWay",
                 "CycleHire"
               ]
             }
           },
           {
             "name": "adjustment",
             "in": "query",
             "description": "Time adjustment command. eg possible options: \"TripFirst\" | \"TripLast\"",
             "required": false,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "bikeProficiency",
             "in": "query",
             "description": "A comma separated list of cycling proficiency levels. eg possible options: \"easy,moderate,fast\"",
             "required": false,
             "explode": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string",
                 "enum": [
                   "Easy",
                   "Moderate",
                   "Fast"
                 ]
               }
             }
           },
           {
             "name": "alternativeCycle",
             "in": "query",
             "description": "Option to determine whether to return alternative cycling journey",
             "required": false,
             "schema": {
               "type": "boolean"
             }
           },
           {
             "name": "alternativeWalking",
             "in": "query",
             "description": "Option to determine whether to return alternative walking journey",
             "required": false,
             "schema": {
               "type": "boolean"
             }
           },
           {
             "name": "applyHtmlMarkup",
             "in": "query",
             "description": "Flag to determine whether certain text (e.g. walking instructions) should be output with HTML tags or not.",
             "required": false,
             "schema": {
               "type": "boolean"
             }
           },
           {
             "name": "useMultiModalCall",
             "in": "query",
             "description": "A boolean to indicate whether or not to return 3 public transport journeys, a bus journey, a cycle hire journey, a personal cycle journey and a walking journey",
             "required": false,
             "schema": {
               "type": "boolean"
             }
           },
           {
             "name": "walkingOptimization",
             "in": "query",
             "description": "A boolean to indicate whether to optimize journeys using walking",
             "required": false,
             "schema": {
               "type": "boolean"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "$ref": "#/components/schemas/ItineraryResult"
                 }
               },
               "text/json": {
                 "schema": {
                   "$ref": "#/components/schemas/ItineraryResult"
                 }
               },
               "application/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/ItineraryResult"
                 }
               },
               "text/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/ItineraryResult"
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Line/Meta/Modes": {
       "get": {
         "tags": [
           "Line"
         ],
         "summary": "Gets a list of valid modes",
         "operationId": "Line_MetaModes",
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Mode"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Mode"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Mode"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Mode"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Line/Meta/Severity": {
       "get": {
         "tags": [
           "Line"
         ],
         "summary": "Gets a list of valid severity codes",
         "operationId": "Line_MetaSeverity",
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StatusSeverity"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StatusSeverity"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StatusSeverity"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StatusSeverity"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Line/Meta/DisruptionCategories": {
       "get": {
         "tags": [
           "Line"
         ],
         "summary": "Gets a list of valid disruption categories",
         "operationId": "Line_MetaDisruptionCategories",
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "type": "string"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "type": "string"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "type": "string"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "type": "string"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Line/Meta/ServiceTypes": {
       "get": {
         "tags": [
           "Line"
         ],
         "summary": "Gets a list of valid ServiceTypes to filter on",
         "operationId": "Line_MetaServiceTypes",
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "type": "string"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "type": "string"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "type": "string"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "type": "string"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Line/{ids}": {
       "get": {
         "tags": [
           "Line"
         ],
         "summary": "Gets lines that match the specified line ids.",
         "operationId": "Line_Get",
         "parameters": [
           {
             "name": "ids",
             "in": "path",
             "description": "A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.",
             "required": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Line/Mode/{modes}": {
       "get": {
         "tags": [
           "Line"
         ],
         "summary": "Gets lines that serve the given modes.",
         "operationId": "Line_GetByMode",
         "parameters": [
           {
             "name": "modes",
             "in": "path",
             "description": "A comma-separated list of modes e.g. tube,dlr",
             "required": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Line/Route": {
       "get": {
         "tags": [
           "Line"
         ],
         "summary": "Get all valid routes for all lines, including the name and id of the originating and terminating stops for each route.",
         "operationId": "Line_Route",
         "parameters": [
           {
             "name": "serviceTypes",
             "in": "query",
             "description": "A comma separated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified",
             "required": false,
             "explode": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string",
                 "enum": [
                   "Regular",
                   "Night"
                 ]
               }
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Line/{ids}/Route": {
       "get": {
         "tags": [
           "Line"
         ],
         "summary": "Get all valid routes for given line ids, including the name and id of the originating and terminating stops for each route.",
         "operationId": "Line_LineRoutesByIds",
         "parameters": [
           {
             "name": "ids",
             "in": "path",
             "description": "A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.",
             "required": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           },
           {
             "name": "serviceTypes",
             "in": "query",
             "description": "A comma separated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified",
             "required": false,
             "explode": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string",
                 "enum": [
                   "Regular",
                   "Night"
                 ]
               }
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Line/Mode/{modes}/Route": {
       "get": {
         "tags": [
           "Line"
         ],
         "summary": "Gets all lines and their valid routes for given modes, including the name and id of the originating and terminating stops for each route",
         "operationId": "Line_RouteByMode",
         "parameters": [
           {
             "name": "modes",
             "in": "path",
             "description": "A comma-separated list of modes e.g. tube,dlr",
             "required": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           },
           {
             "name": "serviceTypes",
             "in": "query",
             "description": "A comma separated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified",
             "required": false,
             "explode": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string",
                 "enum": [
                   "Regular",
                   "Night"
                 ]
               }
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Line/{id}/Route/Sequence/{direction}": {
       "get": {
         "tags": [
           "Line"
         ],
         "summary": "Gets all valid routes for given line id, including the sequence of stops on each route.",
         "operationId": "Line_RouteSequence",
         "parameters": [
           {
             "name": "id",
             "in": "path",
             "description": "A single line id e.g. victoria",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "direction",
             "in": "path",
             "description": "The direction of travel. Can be inbound or outbound.",
             "required": true,
             "schema": {
               "type": "string",
               "enum": [
                 "inbound",
                 "outbound",
                 "all"
               ]
             }
           },
           {
             "name": "serviceTypes",
             "in": "query",
             "description": "A comma separated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified",
             "required": false,
             "explode": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string",
                 "enum": [
                   "Regular",
                   "Night"
                 ]
               }
             }
           },
           {
             "name": "excludeCrowding",
             "in": "query",
             "description": "That excludes crowding from line disruptions. Can be true or false.",
             "required": false,
             "schema": {
               "type": "boolean"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "$ref": "#/components/schemas/RouteSequence"
                 }
               },
               "text/json": {
                 "schema": {
                   "$ref": "#/components/schemas/RouteSequence"
                 }
               },
               "application/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/RouteSequence"
                 }
               },
               "text/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/RouteSequence"
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Line/{ids}/Status/{StartDate}/to/{EndDate}": {
       "get": {
         "tags": [
           "Line"
         ],
         "summary": "Gets the line status for given line ids during the provided dates e.g Minor Delays",
         "operationId": "Get_Line_Status",
         "parameters": [
           {
             "name": "ids",
             "in": "path",
             "description": "A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.",
             "required": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           },
           {
             "name": "detail",
             "in": "query",
             "description": "Include details of the disruptions that are causing the line status including the affected stops and routes",
             "required": false,
             "schema": {
               "type": "boolean"
             }
           },
           {
             "name": "startDate",
             "in": "query",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "endDate",
             "in": "query",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "dateRange.startDate",
             "in": "query",
             "required": false,
             "schema": {
               "type": "string",
               "format": "date-time"
             }
           },
           {
             "name": "dateRange.endDate",
             "in": "query",
             "required": false,
             "schema": {
               "type": "string",
               "format": "date-time"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Line/{ids}/Status": {
       "get": {
         "tags": [
           "Line"
         ],
         "summary": "Gets the line status of for given line ids e.g Minor Delays",
         "operationId": "Line_StatusByIds",
         "parameters": [
           {
             "name": "ids",
             "in": "path",
             "description": "A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.",
             "required": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           },
           {
             "name": "detail",
             "in": "query",
             "description": "Include details of the disruptions that are causing the line status including the affected stops and routes",
             "required": false,
             "schema": {
               "type": "boolean"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Line/Search/{query}": {
       "get": {
         "tags": [
           "Line"
         ],
         "summary": "Search for lines or routes matching the query string",
         "operationId": "Line_Search",
         "parameters": [
           {
             "name": "query",
             "in": "path",
             "description": "Search term e.g victoria",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "modes",
             "in": "query",
             "description": "Optionally filter by the specified modes",
             "required": false,
             "explode": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           },
           {
             "name": "serviceTypes",
             "in": "query",
             "description": "A comma separated list of service types to filter on. Supported values: Regular, Night. Defaulted to 'Regular' if not specified",
             "required": false,
             "explode": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string",
                 "enum": [
                   "Regular",
                   "Night"
                 ]
               }
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "$ref": "#/components/schemas/RouteSearchResponse"
                 }
               },
               "text/json": {
                 "schema": {
                   "$ref": "#/components/schemas/RouteSearchResponse"
                 }
               },
               "application/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/RouteSearchResponse"
                 }
               },
               "text/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/RouteSearchResponse"
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Line/Status/{severity}": {
       "get": {
         "tags": [
           "Line"
         ],
         "summary": "Gets the line status for all lines with a given severity\r\n            A list of valid severity codes can be obtained from a call to Line/Meta/Severity",
         "operationId": "Line_StatusBySeverity",
         "parameters": [
           {
             "name": "severity",
             "in": "path",
             "description": "The level of severity (eg: a number from 0 to 14)",
             "required": true,
             "schema": {
               "type": "integer",
               "format": "int32"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Line/Mode/{modes}/Status": {
       "get": {
         "tags": [
           "Line"
         ],
         "summary": "Gets the line status of for all lines for the given modes",
         "operationId": "Line_StatusByMode",
         "parameters": [
           {
             "name": "modes",
             "in": "path",
             "description": "A comma-separated list of modes to filter by. e.g. tube,dlr",
             "required": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           },
           {
             "name": "detail",
             "in": "query",
             "description": "Include details of the disruptions that are causing the line status including the affected stops and routes",
             "required": false,
             "schema": {
               "type": "boolean"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Line"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Line/{id}/StopPoints": {
       "get": {
         "tags": [
           "Line"
         ],
         "summary": "Gets a list of the stations that serve the given line id",
         "operationId": "Line_StopPoints",
         "parameters": [
           {
             "name": "id",
             "in": "path",
             "description": "A single line id e.g. victoria",
             "required": true,
             "schema": {
               "type": "string"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StopPoint"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StopPoint"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StopPoint"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StopPoint"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Line/{id}/Timetable/{fromStopPointId}": {
       "get": {
         "tags": [
           "Line"
         ],
         "summary": "Gets the timetable for a specified station on the give line",
         "operationId": "Line_Timetable",
         "parameters": [
           {
             "name": "fromStopPointId",
             "in": "path",
             "description": "The originating station's stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "id",
             "in": "path",
             "description": "A single line id e.g. victoria",
             "required": true,
             "schema": {
               "type": "string"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "$ref": "#/components/schemas/TimetableResponse"
                 }
               },
               "text/json": {
                 "schema": {
                   "$ref": "#/components/schemas/TimetableResponse"
                 }
               },
               "application/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/TimetableResponse"
                 }
               },
               "text/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/TimetableResponse"
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Line/{id}/Timetable/{fromStopPointId}/to/{toStopPointId}": {
       "get": {
         "tags": [
           "Line"
         ],
         "summary": "Gets the timetable for a specified station on the give line with specified destination",
         "operationId": "Line_TimetableTo",
         "parameters": [
           {
             "name": "fromStopPointId",
             "in": "path",
             "description": "The originating station's stop point id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "id",
             "in": "path",
             "description": "A single line id e.g. victoria",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "toStopPointId",
             "in": "path",
             "description": "The destination stations's Naptan code",
             "required": true,
             "schema": {
               "type": "string"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "$ref": "#/components/schemas/TimetableResponse"
                 }
               },
               "text/json": {
                 "schema": {
                   "$ref": "#/components/schemas/TimetableResponse"
                 }
               },
               "application/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/TimetableResponse"
                 }
               },
               "text/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/TimetableResponse"
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Line/{ids}/Disruption": {
       "get": {
         "tags": [
           "Line"
         ],
         "summary": "Get disruptions for the given line ids",
         "operationId": "Line_Disruption",
         "parameters": [
           {
             "name": "ids",
             "in": "path",
             "description": "A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.",
             "required": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Disruption"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Disruption"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Disruption"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Disruption"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Line/Mode/{modes}/Disruption": {
       "get": {
         "tags": [
           "Line"
         ],
         "summary": "Get disruptions for all lines of the given modes.",
         "operationId": "Line_DisruptionByMode",
         "parameters": [
           {
             "name": "modes",
             "in": "path",
             "description": "A comma-separated list of modes e.g. tube,dlr",
             "required": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Disruption"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Disruption"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Disruption"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Disruption"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Line/{ids}/Arrivals": {
       "get": {
         "tags": [
           "Line"
         ],
         "summary": "Get the list of arrival predictions for given line ids based at the given stop",
         "operationId": "getLineArrivals",
         "parameters": [
           {
             "name": "stopPointId",
             "in": "query",
             "description": "Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "ids",
             "in": "path",
             "description": "A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.",
             "required": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Prediction"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Prediction"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Prediction"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Prediction"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Line/{ids}/Arrivals/{stopPointId}": {
       "get": {
         "tags": [
           "Line"
         ],
         "summary": "Get the list of arrival predictions for given line ids based at the given stop going in the procided direction",
         "operationId": "getLineArrivalsByPath",
         "parameters": [
           {
             "name": "stopPointId",
             "in": "path",
             "description": "Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "ids",
             "in": "path",
             "description": "A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids.",
             "required": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           },
           {
             "name": "direction",
             "in": "query",
             "description": "The direction of travel. Can be inbound or outbound",
             "required": true,
             "schema": {
               "type": "string",
               "enum": [
                 "inbound",
                 "outbound",
                 "all"
               ]
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Prediction"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Prediction"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Prediction"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Prediction"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Mode/ActiveServiceTypes": {
       "get": {
         "tags": [
           "Mode"
         ],
         "summary": "Returns the service type active for a mode.\r\n            Currently only supports tube",
         "operationId": "Mode_GetActiveServiceTypes",
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/ActiveServiceType"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/ActiveServiceType"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/ActiveServiceType"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/ActiveServiceType"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Mode/{mode}/Arrivals": {
       "get": {
         "tags": [
           "Mode"
         ],
         "summary": "Gets the next arrival predictions for all stops of a given mode",
         "operationId": "Mode_Arrivals",
         "parameters": [
           {
             "name": "mode",
             "in": "path",
             "description": "A mode name e.g. tube, dlr",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "count",
             "in": "query",
             "description": "A number of arrivals to return for each stop, -1 to return all available.",
             "required": false,
             "schema": {
               "type": "integer",
               "format": "int32"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Prediction"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Prediction"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Prediction"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Prediction"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Occupancy/CarPark/{id}": {
       "get": {
         "tags": [
           "Occupancy"
         ],
         "summary": "Gets the occupancy for a car park with a given id",
         "operationId": "getOccupant",
         "parameters": [
           {
             "name": "id",
             "in": "path",
             "description": "",
             "required": true,
             "schema": {
               "type": "string"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "$ref": "#/components/schemas/CarParkOccupancy"
                 }
               },
               "text/json": {
                 "schema": {
                   "$ref": "#/components/schemas/CarParkOccupancy"
                 }
               },
               "application/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/CarParkOccupancy"
                 }
               },
               "text/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/CarParkOccupancy"
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Occupancy/CarPark": {
       "get": {
         "tags": [
           "Occupancy"
         ],
         "summary": "Gets the occupancy for all car parks that have occupancy data",
         "operationId": "getOccupants",
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/CarParkOccupancy"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/CarParkOccupancy"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/CarParkOccupancy"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/CarParkOccupancy"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Place/Meta/Categories": {
       "get": {
         "tags": [
           "Place"
         ],
         "summary": "Gets a list of all of the available place property categories and keys.",
         "operationId": "Place_MetaCategories",
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/PlaceCategory"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/PlaceCategory"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/PlaceCategory"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/PlaceCategory"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Place/Meta/PlaceTypes": {
       "get": {
         "tags": [
           "Place"
         ],
         "summary": "Gets a list of the available types of Place.",
         "operationId": "Place_MetaPlaceTypes",
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/PlaceCategory"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/PlaceCategory"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/PlaceCategory"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/PlaceCategory"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Place/Address/Streets/{Postcode}": {
       "get": {
         "tags": [
           "Place"
         ],
         "summary": "Gets the set of streets associated with a post code.",
         "operationId": "Place_GetStreetsByPostCode",
         "parameters": [
           {
             "name": "postcode",
             "in": "query",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "postcodeInput.postcode",
             "in": "query",
             "required": false,
             "schema": {
               "type": "string",
               "pattern": "^(([gG][iI][rR] {0,}0[aA]{2})|((([a-pr-uwyzA-PR-UWYZ][a-hk-yA-HK-Y]?[0-9][0-9]?)|(([a-pr-uwyzA-PR-UWYZ][0-9][a-hjkstuwA-HJKSTUW])|([a-pr-uwyzA-PR-UWYZ][a-hk-yA-HK-Y][0-9][abehmnprv-yABEHMNPRV-Y]))) {0,}[0-9][abd-hjlnp-uw-zABD-HJLNP-UW-Z]{2}))$"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               },
               "text/json": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               },
               "application/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               },
               "text/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Place/Type/{types}": {
       "get": {
         "tags": [
           "Place"
         ],
         "summary": "Gets all places of a given type",
         "operationId": "Place_GetByType",
         "parameters": [
           {
             "name": "types",
             "in": "path",
             "description": "A comma-separated list of the types to return. Max. approx 12 types.\r\n            A valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint.",
             "required": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           },
           {
             "name": "activeOnly",
             "in": "query",
             "description": "An optional parameter to limit the results to active records only (Currently only the 'VariableMessageSign' place type is supported)",
             "required": false,
             "schema": {
               "type": "boolean"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Place"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Place"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Place"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Place"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Place/{id}": {
       "get": {
         "tags": [
           "Place"
         ],
         "summary": "Gets the place with the given id.",
         "operationId": "Place_Get",
         "parameters": [
           {
             "name": "id",
             "in": "path",
             "description": "The id of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their ids",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "includeChildren",
             "in": "query",
             "description": "Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned",
             "required": false,
             "schema": {
               "type": "boolean"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Place"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Place"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Place"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Place"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Place": {
       "get": {
         "tags": [
           "Place"
         ],
         "summary": "Gets the places that lie within the bounding box defined by the lat/lon of its north-west and south-east corners. Optionally filters\r\n            on type and can strip properties for a smaller payload.",
         "operationId": "Place_GetByGeoBox",
         "parameters": [
           {
             "name": "categories",
             "in": "query",
             "description": "an optional list of comma separated property categories to return in the Place's property bag. If null or empty, all categories of property are returned. Pass the keyword \"none\" to return no properties (a valid list of categories can be obtained from the /Place/Meta/categories endpoint)",
             "required": false,
             "explode": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           },
           {
             "name": "includeChildren",
             "in": "query",
             "description": "Defaults to false. If true child places e.g. individual charging stations at a charge point while be included, otherwise just the URLs of any child places will be returned",
             "required": false,
             "schema": {
               "type": "boolean"
             }
           },
           {
             "name": "type",
             "in": "query",
             "description": "place types to filter on, or null to return all types",
             "required": false,
             "explode": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           },
           {
             "name": "activeOnly",
             "in": "query",
             "description": "An optional parameter to limit the results to active records only (Currently only the 'VariableMessageSign' place type is supported)",
             "required": false,
             "schema": {
               "type": "boolean"
             }
           },
           {
             "name": "bbBoxpoints.swLat",
             "in": "query",
             "required": true,
             "schema": {
               "type": "number",
               "format": "double"
             }
           },
           {
             "name": "bbBoxpoints.swLon",
             "in": "query",
             "required": true,
             "schema": {
               "type": "number",
               "format": "double"
             }
           },
           {
             "name": "bbBoxpoints.neLat",
             "in": "query",
             "required": true,
             "schema": {
               "type": "number",
               "format": "double"
             }
           },
           {
             "name": "bbBoxpoints.neLon",
             "in": "query",
             "required": true,
             "schema": {
               "type": "number",
               "format": "double"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StopPoint"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StopPoint"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StopPoint"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StopPoint"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Place/{type}/At/{Lat}/{Lon}": {
       "get": {
         "tags": [
           "Place"
         ],
         "summary": "Gets any places of the given type whose geography intersects the given latitude and longitude. In practice this means the Place\r\n            must be polygonal e.g. a BoroughBoundary.",
         "operationId": "Place_GetAt",
         "parameters": [
           {
             "name": "type",
             "in": "path",
             "description": "The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint)",
             "required": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           },
           {
             "name": "lat",
             "in": "query",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "lon",
             "in": "query",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "location.lat",
             "in": "query",
             "required": true,
             "schema": {
               "type": "number",
               "format": "double"
             }
           },
           {
             "name": "location.lon",
             "in": "query",
             "required": true,
             "schema": {
               "type": "number",
               "format": "double"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               },
               "text/json": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               },
               "application/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               },
               "text/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Place/{type}/overlay/{z}/{Lat}/{Lon}/{width}/{height}": {
       "get": {
         "tags": [
           "Place"
         ],
         "summary": "Gets the place overlay for a given set of co-ordinates and a given width/height.",
         "operationId": "Place_GetOverlay",
         "parameters": [
           {
             "name": "z",
             "in": "path",
             "description": "The zoom level",
             "required": true,
             "schema": {
               "type": "integer",
               "format": "int32"
             }
           },
           {
             "name": "type",
             "in": "path",
             "description": "The place type (a valid list of place types can be obtained from the /Place/Meta/placeTypes endpoint)",
             "required": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           },
           {
             "name": "width",
             "in": "path",
             "description": "The width of the requested overlay.",
             "required": true,
             "schema": {
               "type": "integer",
               "format": "int32"
             }
           },
           {
             "name": "height",
             "in": "path",
             "description": "The height of the requested overlay.",
             "required": true,
             "schema": {
               "type": "integer",
               "format": "int32"
             }
           },
           {
             "name": "lat",
             "in": "query",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "lon",
             "in": "query",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "location.lat",
             "in": "query",
             "required": true,
             "schema": {
               "type": "number",
               "format": "double"
             }
           },
           {
             "name": "location.lon",
             "in": "query",
             "required": true,
             "schema": {
               "type": "number",
               "format": "double"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               },
               "text/json": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               },
               "application/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               },
               "text/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Place/Search": {
       "get": {
         "tags": [
           "Place"
         ],
         "summary": "Gets all places that matches the given query",
         "operationId": "Place_Search",
         "parameters": [
           {
             "name": "name",
             "in": "query",
             "description": "The name of the place, you can use the /Place/Types/{types} endpoint to get a list of places for a given type including their names.",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "types",
             "in": "query",
             "description": "A comma-separated list of the types to return. Max. approx 12 types.",
             "required": false,
             "explode": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Place"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Place"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Place"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Place"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Road": {
       "get": {
         "tags": [
           "Road"
         ],
         "summary": "Gets all roads managed by TfL",
         "operationId": "getRoads",
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/RoadCorridor"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/RoadCorridor"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/RoadCorridor"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/RoadCorridor"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Road/{ids}": {
       "get": {
         "tags": [
           "Road"
         ],
         "summary": "Gets the road with the specified id (e.g. A1)",
         "operationId": "getRoad",
         "parameters": [
           {
             "name": "ids",
             "in": "path",
             "description": "Comma-separated list of road identifiers e.g. \"A406, A2\" (a full list of supported road identifiers can be found at the /Road/ endpoint)",
             "required": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/RoadCorridor"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/RoadCorridor"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/RoadCorridor"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/RoadCorridor"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Road/{ids}/Status": {
       "get": {
         "tags": [
           "Road"
         ],
         "summary": "Gets the specified roads with the status aggregated over the date range specified, or now until the end of today if no dates are passed.",
         "operationId": "Road_Status",
         "parameters": [
           {
             "name": "ids",
             "in": "path",
             "description": "Comma-separated list of road identifiers e.g. \"A406, A2\" or use \"all\" to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)",
             "required": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           },
           {
             "name": "dateRangeNullable.startDate",
             "in": "query",
             "required": false,
             "schema": {
               "type": "string",
               "format": "date-time"
             }
           },
           {
             "name": "dateRangeNullable.endDate",
             "in": "query",
             "required": false,
             "schema": {
               "type": "string",
               "format": "date-time"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/RoadCorridor"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/RoadCorridor"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/RoadCorridor"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/RoadCorridor"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Road/{ids}/Disruption": {
       "get": {
         "tags": [
           "Road"
         ],
         "summary": "Get active disruptions, filtered by road ids",
         "operationId": "Get_Road_Disruption",
         "parameters": [
           {
             "name": "ids",
             "in": "path",
             "description": "Comma-separated list of road identifiers e.g. \"A406, A2\" use all for all to ignore id filter (a full list of supported road identifiers can be found at the /Road/ endpoint)",
             "required": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           },
           {
             "name": "stripContent",
             "in": "query",
             "description": "Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location, comments and streets",
             "required": false,
             "schema": {
               "type": "boolean"
             }
           },
           {
             "name": "severities",
             "in": "query",
             "description": "an optional list of Severity names to filter on (a valid list of severities can be obtained from the /Road/Meta/severities endpoint)",
             "required": false,
             "explode": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           },
           {
             "name": "categories",
             "in": "query",
             "description": "an optional list of category names to filter on (a valid list of categories can be obtained from the /Road/Meta/categories endpoint)",
             "required": false,
             "explode": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           },
           {
             "name": "closures",
             "in": "query",
             "description": "Optional, defaults to true. When true, always includes disruptions that have road closures, regardless of the severity filter. When false, the severity filter works as normal.",
             "required": false,
             "schema": {
               "type": "boolean"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/RoadDisruption"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/RoadDisruption"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/RoadDisruption"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/RoadDisruption"
                   }
                 }
               },
               "application/geo+json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/RoadDisruption"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Road/all/Street/Disruption": {
       "get": {
         "tags": [
           "Road"
         ],
         "summary": "Gets a list of disrupted streets. If no date filters are provided, current disruptions are returned.",
         "operationId": "Road_DisruptedStreets",
         "parameters": [
           {
             "name": "startDate",
             "in": "query",
             "description": "Optional, the start time to filter on.",
             "required": true,
             "schema": {
               "type": "string",
               "format": "date-time"
             }
           },
           {
             "name": "endDate",
             "in": "query",
             "description": "Optional, The end time to filter on.",
             "required": true,
             "schema": {
               "type": "string",
               "format": "date-time"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               },
               "text/json": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               },
               "application/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               },
               "text/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Road/all/Disruption/{disruptionIds}": {
       "get": {
         "tags": [
           "Road"
         ],
         "summary": "Gets a list of active disruptions filtered by disruption Ids.",
         "operationId": "Road_DisruptionById",
         "parameters": [
           {
             "name": "disruptionIds",
             "in": "path",
             "description": "Comma-separated list of disruption identifiers to filter by.",
             "required": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           },
           {
             "name": "stripContent",
             "in": "query",
             "description": "Optional, defaults to false. When true, removes every property/node except for id, point, severity, severityDescription, startDate, endDate, corridor details, location and comments.",
             "required": false,
             "schema": {
               "type": "boolean"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "$ref": "#/components/schemas/RoadDisruption"
                 }
               },
               "text/json": {
                 "schema": {
                   "$ref": "#/components/schemas/RoadDisruption"
                 }
               },
               "application/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/RoadDisruption"
                 }
               },
               "text/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/RoadDisruption"
                 }
               },
               "application/geo+json": {
                 "schema": {
                   "$ref": "#/components/schemas/RoadDisruption"
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Road/Meta/Categories": {
       "get": {
         "tags": [
           "Road"
         ],
         "summary": "Gets a list of valid RoadDisruption categories",
         "operationId": "Road_MetaCategories",
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "type": "string"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "type": "string"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "type": "string"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "type": "string"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Road/Meta/Severities": {
       "get": {
         "tags": [
           "Road"
         ],
         "summary": "Gets a list of valid RoadDisruption severity codes",
         "operationId": "Road_MetaSeverities",
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StatusSeverity"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StatusSeverity"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StatusSeverity"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StatusSeverity"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Search": {
       "get": {
         "tags": [
           "Search"
         ],
         "summary": "Search the site for occurrences of the query string. The maximum number of results returned is equal to the maximum page size\r\n            of 100. To return subsequent pages, use the paginated overload.",
         "operationId": "Search_Get",
         "parameters": [
           {
             "name": "query",
             "in": "query",
             "description": "The search query",
             "required": true,
             "schema": {
               "type": "string"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "$ref": "#/components/schemas/SearchResponse"
                 }
               },
               "text/json": {
                 "schema": {
                   "$ref": "#/components/schemas/SearchResponse"
                 }
               },
               "application/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/SearchResponse"
                 }
               },
               "text/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/SearchResponse"
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Search/BusSchedules": {
       "get": {
         "tags": [
           "Search"
         ],
         "summary": "Searches the bus schedules folder on S3 for a given bus number.",
         "operationId": "Search_BusSchedules",
         "parameters": [
           {
             "name": "query",
             "in": "query",
             "description": "The search query",
             "required": true,
             "schema": {
               "type": "string"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "$ref": "#/components/schemas/SearchResponse"
                 }
               },
               "text/json": {
                 "schema": {
                   "$ref": "#/components/schemas/SearchResponse"
                 }
               },
               "application/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/SearchResponse"
                 }
               },
               "text/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/SearchResponse"
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Search/Meta/SearchProviders": {
       "get": {
         "tags": [
           "Search"
         ],
         "summary": "Gets the available searchProvider names.",
         "operationId": "Search_MetaSearchProviders",
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "type": "string"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "type": "string"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "type": "string"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "type": "string"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Search/Meta/Categories": {
       "get": {
         "tags": [
           "Search"
         ],
         "summary": "Gets the available search categories.",
         "operationId": "Search_MetaCategories",
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "type": "string"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "type": "string"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "type": "string"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "type": "string"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Search/Meta/Sorts": {
       "get": {
         "tags": [
           "Search"
         ],
         "summary": "Gets the available sorting options.",
         "operationId": "Search_MetaSorts",
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "type": "string"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "type": "string"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "type": "string"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "type": "string"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/StopPoint/Meta/Categories": {
       "get": {
         "tags": [
           "StopPoint"
         ],
         "summary": "Gets the list of available StopPoint additional information categories",
         "operationId": "StopPoint_MetaCategories",
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StopPointCategory"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StopPointCategory"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StopPointCategory"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StopPointCategory"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/StopPoint/Meta/StopTypes": {
       "get": {
         "tags": [
           "StopPoint"
         ],
         "summary": "Gets the list of available StopPoint types",
         "operationId": "StopPoint_MetaStopTypes",
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "type": "string"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "type": "string"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "type": "string"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "type": "string"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/StopPoint/Meta/Modes": {
       "get": {
         "tags": [
           "StopPoint"
         ],
         "summary": "Gets the list of available StopPoint modes",
         "operationId": "StopPoint_MetaModes",
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Mode"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Mode"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Mode"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Mode"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/StopPoint/{ids}": {
       "get": {
         "tags": [
           "StopPoint"
         ],
         "summary": "Gets a list of StopPoints corresponding to the given list of stop ids.",
         "operationId": "StopPoint_Get",
         "parameters": [
           {
             "name": "ids",
             "in": "path",
             "description": "A comma-separated list of stop point ids (station naptan code e.g. 940GZZLUASL). Max. approx. 20 ids.\r\n            You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name.",
             "required": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           },
           {
             "name": "includeCrowdingData",
             "in": "query",
             "description": "Include the crowding data (static). To Filter further use: /StopPoint/{ids}/Crowding/{line}",
             "required": false,
             "schema": {
               "type": "boolean"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StopPoint"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StopPoint"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StopPoint"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StopPoint"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/StopPoint/{id}/Crowding/{line}": {
       "get": {
         "tags": [
           "StopPoint"
         ],
         "summary": "Gets all the Crowding data (static) for the StopPointId, plus crowding data for a given line and optionally a particular direction.",
         "operationId": "StopPoint_Crowding",
         "parameters": [
           {
             "name": "id",
             "in": "path",
             "description": "The Naptan id of the stop",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "line",
             "in": "path",
             "description": "A particular line e.g. victoria, circle, northern etc.",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "direction",
             "in": "query",
             "description": "The direction of travel. Can be inbound or outbound.",
             "required": true,
             "schema": {
               "type": "string",
               "enum": [
                 "inbound",
                 "outbound",
                 "all"
               ]
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StopPoint"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StopPoint"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StopPoint"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StopPoint"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/StopPoint/Type/{types}": {
       "get": {
         "tags": [
           "StopPoint"
         ],
         "summary": "Gets all stop points of a given type",
         "operationId": "StopPoint_GetByType",
         "parameters": [
           {
             "name": "types",
             "in": "path",
             "description": "A comma-separated list of the types to return. Max. approx. 12 types. \r\n            A list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint.",
             "required": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StopPoint"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StopPoint"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StopPoint"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StopPoint"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/StopPoint/ServiceTypes": {
       "get": {
         "tags": [
           "StopPoint"
         ],
         "summary": "Gets the service types for a given stoppoint",
         "operationId": "StopPoint_GetServiceTypes",
         "parameters": [
           {
             "name": "id",
             "in": "query",
             "description": "The Naptan id of the stop",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "lineIds",
             "in": "query",
             "description": "The lines which contain the given Naptan id (all lines relevant to the given stoppoint if empty)",
             "required": false,
             "explode": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           },
           {
             "name": "modes",
             "in": "query",
             "description": "The modes which the lines are relevant to (all if empty)",
             "required": false,
             "explode": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/LineServiceType"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/LineServiceType"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/LineServiceType"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/LineServiceType"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/StopPoint/{id}/Arrivals": {
       "get": {
         "tags": [
           "StopPoint"
         ],
         "summary": "Gets the list of arrival predictions for the given stop point id",
         "operationId": "StopPoint_Arrivals",
         "parameters": [
           {
             "name": "id",
             "in": "path",
             "description": "A StopPoint id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)",
             "required": true,
             "schema": {
               "type": "string"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Prediction"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Prediction"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Prediction"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Prediction"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/StopPoint/{id}/CanReachOnLine/{lineId}": {
       "get": {
         "tags": [
           "StopPoint"
         ],
         "summary": "Gets Stopoints that are reachable from a station/line combination.",
         "operationId": "StopPoint_ReachableFrom",
         "parameters": [
           {
             "name": "id",
             "in": "path",
             "description": "The id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) of the stop point to filter by",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "lineId",
             "in": "path",
             "description": "Line id of the line to filter by (e.g. victoria)",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "serviceTypes",
             "in": "query",
             "description": "A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to 'Regular' if not specified",
             "required": false,
             "explode": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string",
                 "enum": [
                   "Regular",
                   "Night"
                 ]
               }
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StopPoint"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StopPoint"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StopPoint"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StopPoint"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/StopPoint/{id}/Route": {
       "get": {
         "tags": [
           "StopPoint"
         ],
         "summary": "Returns the route sections for all the lines that service the given stop point ids",
         "operationId": "StopPoint_Route",
         "parameters": [
           {
             "name": "id",
             "in": "path",
             "description": "A stop point id (station naptan codes e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "serviceTypes",
             "in": "query",
             "description": "A comma-separated list of service types to filter on. If not specified. Supported values: Regular, Night. Defaulted to 'Regular' if not specified",
             "required": false,
             "explode": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string",
                 "enum": [
                   "Regular",
                   "Night"
                 ]
               }
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StopPointRouteSection"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StopPointRouteSection"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StopPointRouteSection"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/StopPointRouteSection"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/StopPoint/Mode/{modes}/Disruption": {
       "get": {
         "tags": [
           "StopPoint"
         ],
         "summary": "Gets a distinct list of disrupted stop points for the given modes",
         "operationId": "StopPoint_DisruptionByMode",
         "parameters": [
           {
             "name": "modes",
             "in": "path",
             "description": "A comma-separated list of modes e.g. tube,dlr",
             "required": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           },
           {
             "name": "includeRouteBlockedStops",
             "in": "query",
             "description": "",
             "required": false,
             "schema": {
               "type": "boolean"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/DisruptedPoint"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/DisruptedPoint"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/DisruptedPoint"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/DisruptedPoint"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/StopPoint/{ids}/Disruption": {
       "get": {
         "tags": [
           "StopPoint"
         ],
         "summary": "Gets all disruptions for the specified StopPointId, plus disruptions for any child Naptan records it may have.",
         "operationId": "StopPoint_Disruption",
         "parameters": [
           {
             "name": "ids",
             "in": "path",
             "description": "A comma-separated list of stop point ids. Max. approx. 20 ids.\r\n            You can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name.",
             "required": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           },
           {
             "name": "getFamily",
             "in": "query",
             "description": "Specify true to return disruptions for entire family, or false to return disruptions for just this stop point. Defaults to false.",
             "required": false,
             "schema": {
               "type": "boolean"
             }
           },
           {
             "name": "includeRouteBlockedStops",
             "in": "query",
             "description": "",
             "required": false,
             "schema": {
               "type": "boolean"
             }
           },
           {
             "name": "flattenResponse",
             "in": "query",
             "description": "Specify true to associate all disruptions with parent stop point. (Only applicable when getFamily is true).",
             "required": false,
             "schema": {
               "type": "boolean"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/DisruptedPoint"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/DisruptedPoint"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/DisruptedPoint"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/DisruptedPoint"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/StopPoint/{id}/DirectionTo/{toStopPointId}": {
       "get": {
         "tags": [
           "StopPoint"
         ],
         "summary": "Returns the canonical direction, \"inbound\" or \"outbound\", for a given pair of stop point Ids in the direction from -> to.",
         "operationId": "StopPoint_Direction",
         "parameters": [
           {
             "name": "id",
             "in": "path",
             "description": "Originating stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "toStopPointId",
             "in": "path",
             "description": "Destination stop id (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name)",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "lineId",
             "in": "query",
             "description": "Optional line id filter e.g. victoria",
             "required": false,
             "schema": {
               "type": "string"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "string"
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "string"
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "string"
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "string"
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/StopPoint": {
       "get": {
         "tags": [
           "StopPoint"
         ],
         "summary": "Gets a list of StopPoints within {radius} by the specified criteria",
         "operationId": "StopPoint_GetByGeoPoint",
         "parameters": [
           {
             "name": "stopTypes",
             "in": "query",
             "description": "a list of stopTypes that should be returned (a list of valid stop types can be obtained from the StopPoint/meta/stoptypes endpoint)",
             "required": true,
             "explode": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           },
           {
             "name": "radius",
             "in": "query",
             "description": "the radius of the bounding circle in metres (default : 200)",
             "required": false,
             "schema": {
               "type": "integer",
               "format": "int32"
             }
           },
           {
             "name": "useStopPointHierarchy",
             "in": "query",
             "description": "Re-arrange the output into a parent/child hierarchy",
             "required": false,
             "schema": {
               "type": "boolean"
             }
           },
           {
             "name": "modes",
             "in": "query",
             "description": "the list of modes to search (comma separated mode names e.g. tube,dlr)",
             "required": false,
             "explode": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           },
           {
             "name": "categories",
             "in": "query",
             "description": "an optional list of comma separated property categories to return in the StopPoint's property bag. If null or empty, all categories of property are returned. Pass the keyword \"none\" to return no properties (a valid list of categories can be obtained from the /StopPoint/Meta/categories endpoint)",
             "required": false,
             "explode": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           },
           {
             "name": "returnLines",
             "in": "query",
             "description": "true to return the lines that each stop point serves as a nested resource",
             "required": false,
             "schema": {
               "type": "boolean"
             }
           },
           {
             "name": "location.lat",
             "in": "query",
             "required": true,
             "schema": {
               "type": "number",
               "format": "double"
             }
           },
           {
             "name": "location.lon",
             "in": "query",
             "required": true,
             "schema": {
               "type": "number",
               "format": "double"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "$ref": "#/components/schemas/StopPointsResponse"
                 }
               },
               "text/json": {
                 "schema": {
                   "$ref": "#/components/schemas/StopPointsResponse"
                 }
               },
               "application/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/StopPointsResponse"
                 }
               },
               "text/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/StopPointsResponse"
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/StopPoint/Mode/{modes}": {
       "get": {
         "tags": [
           "StopPoint"
         ],
         "summary": "Gets a list of StopPoints filtered by the modes available at that StopPoint.",
         "operationId": "StopPoint_GetByMode",
         "parameters": [
           {
             "name": "modes",
             "in": "path",
             "description": "A comma-separated list of modes e.g. tube,dlr",
             "required": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           },
           {
             "name": "page",
             "in": "query",
             "description": "The data set page to return. Page 1 equates to the first 1000 stop points, page 2 equates to 1001-2000 etc. Must be entered for bus mode as data set is too large.",
             "required": false,
             "schema": {
               "type": "integer",
               "format": "int32"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "$ref": "#/components/schemas/StopPointsResponse"
                 }
               },
               "text/json": {
                 "schema": {
                   "$ref": "#/components/schemas/StopPointsResponse"
                 }
               },
               "application/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/StopPointsResponse"
                 }
               },
               "text/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/StopPointsResponse"
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/StopPoint/Search/{query}": {
       "get": {
         "tags": [
           "StopPoint"
         ],
         "summary": "Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.",
         "operationId": "searchStopPointsByPath",
         "parameters": [
           {
             "name": "query",
             "in": "path",
             "description": "The query string, case-insensitive. Leading and trailing wildcards are applied automatically.",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "modes",
             "in": "query",
             "description": "An optional, parameter separated list of the modes to filter by",
             "required": false,
             "explode": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           },
           {
             "name": "faresOnly",
             "in": "query",
             "description": "True to only return stations in that have Fares data available for single fares to another station.",
             "required": false,
             "schema": {
               "type": "boolean"
             }
           },
           {
             "name": "maxResults",
             "in": "query",
             "description": "An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,\r\n            it is possible that the flattened result set will contain more than 50 items.",
             "required": false,
             "schema": {
               "type": "integer",
               "format": "int32"
             }
           },
           {
             "name": "lines",
             "in": "query",
             "description": "An optional, parameter separated list of the lines to filter by",
             "required": false,
             "explode": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           },
           {
             "name": "includeHubs",
             "in": "query",
             "description": "If true, returns results including HUBs.",
             "required": false,
             "schema": {
               "type": "boolean"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "$ref": "#/components/schemas/SearchResponse"
                 }
               },
               "text/json": {
                 "schema": {
                   "$ref": "#/components/schemas/SearchResponse"
                 }
               },
               "application/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/SearchResponse"
                 }
               },
               "text/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/SearchResponse"
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/StopPoint/Search": {
       "get": {
         "tags": [
           "StopPoint"
         ],
         "summary": "Search StopPoints by their common name, or their 5-digit Countdown Bus Stop Code.",
         "operationId": "searchStopPoints",
         "parameters": [
           {
             "name": "query",
             "in": "query",
             "description": "The query string, case-insensitive. Leading and trailing wildcards are applied automatically.",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "modes",
             "in": "query",
             "description": "An optional, parameter separated list of the modes to filter by",
             "required": false,
             "explode": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           },
           {
             "name": "faresOnly",
             "in": "query",
             "description": "True to only return stations in that have Fares data available for single fares to another station.",
             "required": false,
             "schema": {
               "type": "boolean"
             }
           },
           {
             "name": "maxResults",
             "in": "query",
             "description": "An optional result limit, defaulting to and with a maximum of 50. Since children of the stop point heirarchy are returned for matches,\r\n            it is possible that the flattened result set will contain more than 50 items.",
             "required": false,
             "schema": {
               "type": "integer",
               "format": "int32"
             }
           },
           {
             "name": "lines",
             "in": "query",
             "description": "An optional, parameter separated list of the lines to filter by",
             "required": false,
             "explode": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           },
           {
             "name": "includeHubs",
             "in": "query",
             "description": "If true, returns results including HUBs.",
             "required": false,
             "schema": {
               "type": "boolean"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "$ref": "#/components/schemas/SearchResponse"
                 }
               },
               "text/json": {
                 "schema": {
                   "$ref": "#/components/schemas/SearchResponse"
                 }
               },
               "application/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/SearchResponse"
                 }
               },
               "text/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/SearchResponse"
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/StopPoint/Sms/{id}": {
       "get": {
         "tags": [
           "StopPoint"
         ],
         "summary": "Gets a StopPoint for a given sms code.",
         "operationId": "StopPoint_GetBySms",
         "parameters": [
           {
             "name": "id",
             "in": "path",
             "description": "A 5-digit Countdown Bus Stop Code e.g. 73241, 50435, 56334.",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "output",
             "in": "query",
             "description": "If set to \"web\", a 302 redirect to relevant website bus stop page is returned. Valid values are : web. All other values are ignored.",
             "required": false,
             "schema": {
               "type": "string"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               },
               "text/json": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               },
               "application/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               },
               "text/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/StopPoint/{stopPointId}/TaxiRanks": {
       "get": {
         "tags": [
           "StopPoint"
         ],
         "summary": "Gets a list of taxi ranks corresponding to the given stop point id.",
         "operationId": "StopPoint_GetTaxiRanksByIds",
         "parameters": [
           {
             "name": "stopPointId",
             "in": "path",
             "description": "stopPointId is required to get the taxi ranks.",
             "required": true,
             "schema": {
               "type": "string"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Place"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Place"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Place"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Place"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/StopPoint/{stopPointId}/CarParks": {
       "get": {
         "tags": [
           "StopPoint"
         ],
         "summary": "Get car parks corresponding to the given stop point id.",
         "operationId": "StopPoint_GetCarParksById",
         "parameters": [
           {
             "name": "stopPointId",
             "in": "path",
             "description": "stopPointId is required to get the car parks.",
             "required": true,
             "schema": {
               "type": "string"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Place"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Place"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Place"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Place"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/TravelTimes/overlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}": {
       "get": {
         "tags": [
           "TravelTime"
         ],
         "summary": "Gets the TravelTime overlay.",
         "operationId": "TravelTime_GetOverlay",
         "parameters": [
           {
             "name": "z",
             "in": "path",
             "description": "The zoom level.",
             "required": true,
             "schema": {
               "type": "integer",
               "format": "int32"
             }
           },
           {
             "name": "pinLat",
             "in": "path",
             "description": "The latitude of the pin.",
             "required": true,
             "schema": {
               "type": "number",
               "format": "double"
             }
           },
           {
             "name": "pinLon",
             "in": "path",
             "description": "The longitude of the pin.",
             "required": true,
             "schema": {
               "type": "number",
               "format": "double"
             }
           },
           {
             "name": "mapCenterLat",
             "in": "path",
             "description": "The map center latitude.",
             "required": true,
             "schema": {
               "type": "number",
               "format": "double"
             }
           },
           {
             "name": "mapCenterLon",
             "in": "path",
             "description": "The map center longitude.",
             "required": true,
             "schema": {
               "type": "number",
               "format": "double"
             }
           },
           {
             "name": "scenarioTitle",
             "in": "query",
             "description": "The title of the scenario.",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "timeOfDayId",
             "in": "query",
             "description": "The id for the time of day (AM/INTER/PM)",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "modeId",
             "in": "query",
             "description": "The id of the mode.",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "width",
             "in": "path",
             "description": "The width of the requested overlay.",
             "required": true,
             "schema": {
               "type": "integer",
               "format": "int32"
             }
           },
           {
             "name": "height",
             "in": "path",
             "description": "The height of the requested overlay.",
             "required": true,
             "schema": {
               "type": "integer",
               "format": "int32"
             }
           },
           {
             "name": "direction",
             "in": "query",
             "description": "The direction of travel.",
             "required": true,
             "schema": {
               "type": "string",
               "enum": [
                 "Average",
                 "From",
                 "To"
               ]
             }
           },
           {
             "name": "travelTimeInterval",
             "in": "query",
             "description": "The total minutes between the travel time bands",
             "required": true,
             "schema": {
               "type": "integer",
               "format": "int32"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               },
               "text/json": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               },
               "application/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               },
               "text/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/TravelTimes/compareOverlay/{z}/mapcenter/{mapCenterLat}/{mapCenterLon}/pinlocation/{pinLat}/{pinLon}/dimensions/{width}/{height}": {
       "get": {
         "tags": [
           "TravelTime"
         ],
         "summary": "Gets the TravelTime overlay.",
         "operationId": "TravelTime_GetCompareOverlay",
         "parameters": [
           {
             "name": "z",
             "in": "path",
             "description": "The zoom level.",
             "required": true,
             "schema": {
               "type": "integer",
               "format": "int32"
             }
           },
           {
             "name": "pinLat",
             "in": "path",
             "description": "The latitude of the pin.",
             "required": true,
             "schema": {
               "type": "number",
               "format": "double"
             }
           },
           {
             "name": "pinLon",
             "in": "path",
             "description": "The longitude of the pin.",
             "required": true,
             "schema": {
               "type": "number",
               "format": "double"
             }
           },
           {
             "name": "mapCenterLat",
             "in": "path",
             "description": "The map center latitude.",
             "required": true,
             "schema": {
               "type": "number",
               "format": "double"
             }
           },
           {
             "name": "mapCenterLon",
             "in": "path",
             "description": "The map center longitude.",
             "required": true,
             "schema": {
               "type": "number",
               "format": "double"
             }
           },
           {
             "name": "scenarioTitle",
             "in": "query",
             "description": "The title of the scenario.",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "timeOfDayId",
             "in": "query",
             "description": "The id for the time of day (AM/INTER/PM)",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "modeId",
             "in": "query",
             "description": "The id of the mode.",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "width",
             "in": "path",
             "description": "The width of the requested overlay.",
             "required": true,
             "schema": {
               "type": "integer",
               "format": "int32"
             }
           },
           {
             "name": "height",
             "in": "path",
             "description": "The height of the requested overlay.",
             "required": true,
             "schema": {
               "type": "integer",
               "format": "int32"
             }
           },
           {
             "name": "direction",
             "in": "query",
             "description": "The direction of travel.",
             "required": true,
             "schema": {
               "type": "string",
               "enum": [
                 "Average",
                 "From",
                 "To"
               ]
             }
           },
           {
             "name": "travelTimeInterval",
             "in": "query",
             "description": "The total minutes between the travel time bands",
             "required": true,
             "schema": {
               "type": "integer",
               "format": "int32"
             }
           },
           {
             "name": "compareType",
             "in": "query",
             "required": true,
             "schema": {
               "type": "string"
             }
           },
           {
             "name": "compareValue",
             "in": "query",
             "required": true,
             "schema": {
               "type": "string"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               },
               "text/json": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               },
               "application/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               },
               "text/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/Object"
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Vehicle/{ids}/Arrivals": {
       "get": {
         "tags": [
           "Vehicle"
         ],
         "summary": "Gets the predictions for a given list of vehicle Id's.",
         "operationId": "Vehicle_Get",
         "parameters": [
           {
             "name": "ids",
             "in": "path",
             "description": "A comma-separated list of vehicle ids e.g. LX58CFV,LX11AZB,LX58CFE. Max approx. 25 ids.",
             "required": true,
             "schema": {
               "type": "array",
               "items": {
                 "type": "string"
               }
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Prediction"
                   }
                 }
               },
               "text/json": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Prediction"
                   }
                 }
               },
               "application/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Prediction"
                   }
                 }
               },
               "text/xml": {
                 "schema": {
                   "type": "array",
                   "items": {
                     "$ref": "#/components/schemas/Prediction"
                   }
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     },
     "/Vehicle/EmissionSurcharge": {
       "get": {
         "tags": [
           "Vehicle"
         ],
         "summary": "Gets the Emissions Surcharge compliance for the Vehicle",
         "operationId": "Vehicle_GetVehicle",
         "parameters": [
           {
             "name": "vrm",
             "in": "query",
             "description": "The Vehicle Registration Mark",
             "required": true,
             "schema": {
               "type": "string"
             }
           }
         ],
         "responses": {
           "200": {
             "description": "OK",
             "content": {
               "application/json": {
                 "schema": {
                   "$ref": "#/components/schemas/EmissionsSurchargeVehicle"
                 }
               },
               "text/json": {
                 "schema": {
                   "$ref": "#/components/schemas/EmissionsSurchargeVehicle"
                 }
               },
               "application/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/EmissionsSurchargeVehicle"
                 }
               },
               "text/xml": {
                 "schema": {
                   "$ref": "#/components/schemas/EmissionsSurchargeVehicle"
                 }
               }
             }
           }
         },
         "deprecated": false
       }
     }
   },
   "servers": [
     {
       "url": "https://api.tfl.gov.uk"
     }
   ],
   "components": {
     "securitySchemes": {
       "apiKey": {
         "type": "apiKey",
         "description": "API Key Authentication",
         "name": "app_key",
         "in": "query"
       },
       "appId": {
         "type": "apiKey",
         "description": "Application ID",
         "name": "app_id",
         "in": "query"
       }
     },
     "schemas": {
       "AccidentDetail": {
         "type": "object",
         "properties": {
           "id": {
             "format": "int32",
             "type": "integer"
           },
           "lat": {
             "format": "double",
             "type": "number"
           },
           "lon": {
             "format": "double",
             "type": "number"
           },
           "location": {
             "type": "string"
           },
           "date": {
             "format": "date-time",
             "type": "string"
           },
           "severity": {
             "type": "string"
           },
           "borough": {
             "type": "string"
           },
           "casualties": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/Casualty"
             }
           },
           "vehicles": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/Vehicle"
             }
           }
         }
       },
       "Casualty": {
         "type": "object",
         "properties": {
           "age": {
             "format": "int32",
             "type": "integer"
           },
           "class": {
             "type": "string"
           },
           "severity": {
             "type": "string"
           },
           "mode": {
             "type": "string"
           },
           "ageBand": {
             "type": "string"
           }
         }
       },
       "Vehicle": {
         "type": "object",
         "properties": {
           "type": {
             "type": "string"
           }
         }
       },
       "AccidentStatsOrderedSummary": {
         "type": "object",
         "properties": {
           "year": {
             "format": "int32",
             "type": "integer"
           },
           "borough": {
             "type": "string"
           },
           "accidents": {
             "format": "int32",
             "type": "integer"
           }
         }
       },
       "Object": {
         "type": "object",
         "properties": {
         }
       },
       "Place": {
         "type": "object",
         "properties": {
           "id": {
             "description": "A unique identifier.",
             "type": "string"
           },
           "url": {
             "description": "The unique location of this resource.",
             "type": "string"
           },
           "commonName": {
             "description": "A human readable name.",
             "type": "string"
           },
           "distance": {
             "format": "double",
             "description": "The distance of the place from its search point, if this is the result\r\n            of a geographical search, otherwise zero.",
             "type": "number"
           },
           "placeType": {
             "description": "The type of Place. See /Place/Meta/placeTypes for possible values.",
             "type": "string"
           },
           "additionalProperties": {
             "description": "A bag of additional key/value pairs with extra information about this place.",
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/AdditionalProperties"
             }
           },
           "children": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/Place"
             }
           },
           "childrenUrls": {
             "type": "array",
             "items": {
               "type": "string"
             }
           },
           "lat": {
             "format": "double",
             "description": "WGS84 latitude of the location.",
             "type": "number"
           },
           "lon": {
             "format": "double",
             "description": "WGS84 longitude of the location.",
             "type": "number"
           }
         }
       },
       "AdditionalProperties": {
         "type": "object",
         "properties": {
           "category": {
             "type": "string"
           },
           "key": {
             "type": "string"
           },
           "sourceSystemKey": {
             "type": "string"
           },
           "value": {
             "type": "string"
           },
           "modified": {
             "format": "date-time",
             "type": "string"
           }
         }
       },
       "CycleSuperhighway": {
         "type": "object",
         "properties": {
           "id": {
             "description": "The Id",
             "type": "string"
           },
           "label": {
             "description": "The long label to show on maps when zoomed in",
             "type": "string"
           },
           "labelShort": {
             "description": "The short label to show on maps",
             "type": "string"
           },
           "geography": {
             "$ref": "#/components/schemas/DbGeography",
             "description":"A LineString or MultiLineString that forms the route of the highway"
           },
           "segmented": {
             "description": "True if the route is split into segments",
             "type": "boolean"
           },
           "modified": {
             "format": "date-time",
             "description": "When the data was last updated",
             "type": "string"
           }
         }
       },
       "DbGeography": {
         "type": "object",
         "properties": {
           "geography": {
             "$ref": "#/components/schemas/DbGeographyWellKnownValue"
           }
         }
       },
       "DbGeographyWellKnownValue": {
         "type": "object",
         "properties": {
           "coordinateSystemId": {
             "format": "int32",
             "type": "integer"
           },
           "wellKnownText": {
             "type": "string"
           },
           "wellKnownBinary": {
             "format": "byte",
             "type": "string"
           }
         }
       },
       "Fare": {
         "type": "object",
         "properties": {
           "id": {
             "format": "int32",
             "type": "integer"
           },
           "passengerType": {
             "type": "string"
           },
           "validFrom": {
             "format": "date-time",
             "type": "string"
           },
           "validUntil": {
             "format": "date-time",
             "type": "string"
           },
           "ticketTime": {
             "type": "string"
           },
           "ticketType": {
             "type": "string"
           },
           "cost": {
             "type": "string"
           },
           "cap": {
             "format": "double",
             "type": "number"
           },
           "description": {
             "type": "string"
           },
           "zone": {
             "type": "string"
           },
           "mode": {
             "type": "string"
           }
         }
       },
       "FaresSection": {
         "type": "object",
         "properties": {
           "header": {
             "type": "string"
           },
           "index": {
             "format": "int32",
             "type": "integer"
           },
           "rows": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/FareDetails"
             }
           },
           "messages": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/Message"
             }
           }
         }
       },
       "FareDetails": {
         "type": "object",
         "properties": {
           "boundsId": {
             "format": "int32",
             "type": "integer"
           },
           "startDate": {
             "format": "date-time",
             "type": "string"
           },
           "endDate": {
             "format": "date-time",
             "type": "string"
           },
           "mode": {
             "type": "string"
           },
           "passengerType": {
             "type": "string"
           },
           "from": {
             "type": "string"
           },
           "to": {
             "type": "string"
           },
           "fromStation": {
             "type": "string"
           },
           "toStation": {
             "type": "string"
           },
           "via": {
             "type": "string"
           },
           "routeCode": {
             "type": "string"
           },
           "displayName": {
             "type": "string"
           },
           "displayOrder": {
             "format": "int32",
             "type": "integer"
           },
           "routeDescription": {
             "type": "string"
           },
           "validatorInformation": {
             "type": "string"
           },
           "operator": {
             "type": "string"
           },
           "specialFare": {
             "type": "boolean"
           },
           "throughFare": {
             "type": "boolean"
           },
           "isTour": {
             "type": "boolean"
           },
           "ticketsAvailable": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/Ticket"
             }
           },
           "messages": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/Message"
             }
           }
         }
       },
       "Message": {
         "type": "object",
         "properties": {
           "bulletOrder": {
             "format": "int32",
             "type": "integer"
           },
           "header": {
             "type": "boolean"
           },
           "messageText": {
             "type": "string"
           },
           "linkText": {
             "type": "string"
           },
           "url": {
             "type": "string"
           }
         }
       },
       "Ticket": {
         "type": "object",
         "properties": {
           "passengerType": {
             "type": "string"
           },
           "ticketType": {
             "$ref": "#/components/schemas/TicketType"
           },
           "ticketTime": {
             "$ref": "#/components/schemas/TicketTime"
           },
           "cost": {
             "type": "string"
           },
           "description": {
             "type": "string"
           },
           "mode": {
             "type": "string"
           },
           "displayOrder": {
             "format": "int32",
             "type": "integer"
           },
           "messages": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/Message"
             }
           }
         }
       },
       "TicketType": {
         "type": "object",
         "properties": {
           "type": {
             "type": "string"
           },
           "description": {
             "type": "string"
           }
         }
       },
       "TicketTime": {
         "type": "object",
         "properties": {
           "type": {
             "type": "string"
           },
           "description": {
             "type": "string"
           }
         }
       },
       "FareBounds": {
         "type": "object",
         "properties": {
           "id": {
             "format": "int32",
             "type": "integer"
           },
           "from": {
             "type": "string"
           },
           "to": {
             "type": "string"
           },
           "via": {
             "type": "string"
           },
           "routeCode": {
             "type": "string"
           },
           "description": {
             "type": "string"
           },
           "displayName": {
             "type": "string"
           },
           "operator": {
             "type": "string"
           },
           "displayOrder": {
             "format": "int32",
             "type": "integer"
           },
           "isPopularFare": {
             "type": "boolean"
           },
           "isPopularTravelCard": {
             "type": "boolean"
           },
           "isTour": {
             "type": "boolean"
           },
           "messages": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/Message"
             }
           }
         }
       },
       "FaresPeriod": {
         "type": "object",
         "properties": {
           "id": {
             "format": "int32",
             "type": "integer"
           },
           "startDate": {
             "format": "date-time",
             "type": "string"
           },
           "viewableDate": {
             "format": "date-time",
             "type": "string"
           },
           "endDate": {
             "format": "date-time",
             "type": "string"
           },
           "isFuture": {
             "type": "boolean"
           }
         }
       },
       "FaresMode": {
         "type": "object",
         "properties": {
           "id": {
             "format": "int32",
             "type": "integer"
           },
           "name": {
             "type": "string"
           },
           "description": {
             "type": "string"
           }
         }
       },
       "PassengerType": {
         "type": "object",
         "properties": {
           "type": {
             "type": "string"
           },
           "description": {
             "type": "string"
           },
           "displayName": {
             "type": "string"
           },
           "displayOrder": {
             "format": "int32",
             "type": "integer"
           }
         }
       },
       "Coordinate": {
         "type": "object",
         "properties": {
           "longitude": {
             "format": "double",
             "type": "number"
           },
           "latitude": {
             "format": "double",
             "type": "number"
           },
           "easting": {
             "format": "double",
             "type": "number"
           },
           "northing": {
             "format": "double",
             "type": "number"
           },
           "xCoord": {
             "format": "int32",
             "type": "integer"
           },
           "yCoord": {
             "format": "int32",
             "type": "integer"
           }
         }
       },
       "GeoCodeSearchMatch": {
         "type": "object",
         "properties": {
           "types": {
             "description": "The type of the place e.g. \"street_address\"",
             "type": "array",
             "items": {
               "type": "string"
             }
           },
           "address": {
             "description": "A string describing the formatted address of the place. Adds additional context to the place's Name.",
             "type": "string"
           },
           "id": {
             "type": "string"
           },
           "url": {
             "type": "string"
           },
           "name": {
             "type": "string"
           },
           "lat": {
             "format": "double",
             "type": "number"
           },
           "lon": {
             "format": "double",
             "type": "number"
           }
         }
       },
       "Mode": {
         "type": "object",
         "properties": {
           "isTflService": {
             "type": "boolean"
           },
           "isFarePaying": {
             "type": "boolean"
           },
           "isScheduledService": {
             "type": "boolean"
           },
           "modeName": {
             "type": "string"
           }
         }
       },
       "ItineraryResult": {
         "description": "A DTO representing a list of possible journeys.",
         "type": "object",
         "properties": {
           "journeys": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/Journey"
             }
           },
           "lines": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/Line"
             }
           },
           "cycleHireDockingStationData": {
             "$ref": "#/components/schemas/JourneyPlannerCycleHireDockingStationData"
           },
           "stopMessages": {
             "type": "array",
             "items": {
               "type": "string"
             }
           },
           "recommendedMaxAgeMinutes": {
             "format": "int32",
             "type": "integer"
           },
           "searchCriteria": {
             "$ref": "#/components/schemas/SearchCriteria"
           },
           "journeyVector": {
             "$ref": "#/components/schemas/JourneyVector"
           }
         }
       },
       "Journey": {
         "description": "Object that represents an end to end journey (see schematic).",
         "type": "object",
         "properties": {
           "startDateTime": {
             "format": "date-time",
             "type": "string"
           },
           "duration": {
             "format": "int32",
             "type": "integer"
           },
           "arrivalDateTime": {
             "format": "date-time",
             "type": "string"
           },
           "legs": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/Leg"
             }
           }
         }
       },
       "Line": {
         "type": "object",
         "properties": {
           "id": {
             "type": "string"
           },
           "name": {
             "type": "string"
           },
           "modeName": {
             "type": "string"
           },
           "disruptions": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/Disruption"
             }
           },
           "created": {
             "format": "date-time",
             "type": "string"
           },
           "modified": {
             "format": "date-time",
             "type": "string"
           },
           "lineStatuses": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/LineStatus"
             }
           },
           "routeSections": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/MatchedRoute"
             }
           },
           "serviceTypes": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/LineServiceTypeInfo"
             }
           },
           "crowding": {
             "$ref": "#/components/schemas/Crowding"
           }
         }
       },
       "JourneyPlannerCycleHireDockingStationData": {
         "type": "object",
         "properties": {
           "originNumberOfBikes": {
             "format": "int32",
             "type": "integer"
           },
           "destinationNumberOfBikes": {
             "format": "int32",
             "type": "integer"
           },
           "originNumberOfEmptySlots": {
             "format": "int32",
             "type": "integer"
           },
           "destinationNumberOfEmptySlots": {
             "format": "int32",
             "type": "integer"
           },
           "originId": {
             "type": "string"
           },
           "destinationId": {
             "type": "string"
           }
         }
       },
       "SearchCriteria": {
         "type": "object",
         "properties": {
           "dateTime": {
             "format": "date-time",
             "type": "string"
           },
           "dateTimeType": {
             "enum": [
               "Arriving",
               "Departing"
             ],
             "type": "string"
           },
           "timeAdjustments": {
             "$ref": "#/components/schemas/TimeAdjustments"
           }
         }
       },
       "JourneyVector": {
         "type": "object",
         "properties": {
           "from": {
             "type": "string"
           },
           "to": {
             "type": "string"
           },
           "via": {
             "type": "string"
           },
           "uri": {
             "type": "string"
           }
         }
       },
       "Leg": {
         "type": "object",
         "properties": {
           "duration": {
             "format": "int32",
             "type": "integer"
           },
           "speed": {
             "type": "string"
           },
           "instruction": {
             "$ref": "#/components/schemas/Instruction",
             "description":"Describes the action the user need to take for this section, E.g. \"walk to the\r\n            district line\""
           },
           "obstacles": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/Obstacle"
             }
           },
           "departureTime": {
             "format": "date-time",
             "type": "string"
           },
           "arrivalTime": {
             "format": "date-time",
             "type": "string"
           },
           "departurePoint": {
             "$ref": "#/components/schemas/Point"
           },
           "arrivalPoint": {
             "$ref": "#/components/schemas/Point"
           },
           "path": {
             "$ref": "#/components/schemas/Path"
           },
           "routeOptions": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/RouteOption"
             }
           },
           "mode": {
             "$ref": "#/components/schemas/Identifier"
           },
           "disruptions": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/Disruption"
             }
           },
           "plannedWorks": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/PlannedWork"
             }
           },
           "distance": {
             "format": "double",
             "type": "number"
           },
           "isDisrupted": {
             "type": "boolean",
             "readOnly": true
           },
           "hasFixedLocations": {
             "type": "boolean",
             "readOnly": true
           }
         }
       },
       "Disruption": {
         "description": "Represents a disruption to a route within the transport network.",
         "type": "object",
         "properties": {
           "category": {
             "description": "Gets or sets the category of this dispruption.",
             "enum": [
               "Undefined",
               "RealTime",
               "PlannedWork",
               "Information",
               "Event",
               "Crowding",
               "StatusAlert"
             ],
             "type": "string"
           },
           "type": {
             "description": "Gets or sets the disruption type of this dispruption.",
             "type": "string"
           },
           "categoryDescription": {
             "description": "Gets or sets the description of the category.",
             "type": "string"
           },
           "description": {
             "description": "Gets or sets the description of this disruption.",
             "type": "string"
           },
           "additionalInfo": {
             "description": "Gets or sets the additionaInfo of this disruption.",
             "type": "string"
           },
           "created": {
             "format": "date-time",
             "description": "Gets or sets the date/time when this disruption was created.",
             "type": "string"
           },
           "lastUpdate": {
             "format": "date-time",
             "description": "Gets or sets the date/time when this disruption was last updated.",
             "type": "string"
           },
           "affectedRoutes": {
             "description": "Gets or sets the routes affected by this disruption",
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/RouteSection"
             }
           },
           "affectedStops": {
             "description": "Gets or sets the stops affected by this disruption",
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/StopPoint"
             }
           },
           "isBlocking": {
             "type": "boolean"
           },
           "isWholeLine": {
             "type": "boolean"
           },
           "closureText": {
             "type": "string"
           }
         }
       },
       "LineStatus": {
         "type": "object",
         "properties": {
           "id": {
             "format": "int32",
             "type": "integer"
           },
           "lineId": {
             "type": "string"
           },
           "statusSeverity": {
             "format": "int32",
             "type": "integer"
           },
           "statusSeverityDescription": {
             "type": "string"
           },
           "reason": {
             "type": "string"
           },
           "created": {
             "format": "date-time",
             "type": "string"
           },
           "modified": {
             "format": "date-time",
             "type": "string"
           },
           "validityPeriods": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/ValidityPeriod"
             }
           },
           "disruption": {
             "$ref": "#/components/schemas/Disruption"
           }
         }
       },
       "MatchedRoute": {
         "type": "object",
         "properties": {
           "routeCode": {
             "description": "The route code",
             "type": "string"
           },
           "name": {
             "description": "Name such as \"72\"",
             "type": "string"
           },
           "direction": {
             "description": "eg: N or S or I or O",
             "type": "string"
           },
           "originationName": {
             "description": "eg: Origination Name",
             "type": "string"
           },
           "destinationName": {
             "description": "eg: Destination Name",
             "type": "string"
           },
           "originator": {
             "description": "eg: Origination",
             "type": "string"
           },
           "destination": {
             "description": "eg: Destination",
             "type": "string"
           },
           "serviceType": {
             "description": "eg: Regular, Night",
             "type": "string"
           }
         }
       },
       "LineServiceTypeInfo": {
         "type": "object",
         "properties": {
           "name": {
             "type": "string"
           },
           "uri": {
             "type": "string"
           }
         }
       },
       "Crowding": {
         "type": "object",
         "properties": {
           "passengerFlows": {
             "description": "Busiest times at a station (static information)",
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/PassengerFlow"
             }
           },
           "trainLoadings": {
             "description": "Train Loading on a scale 1-6, 1 being \"Very quiet\" and 6 being \"Exceptionally busy\" (static information)",
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/TrainLoading"
             }
           }
         }
       },
       "TimeAdjustments": {
         "type": "object",
         "properties": {
           "earliest": {
             "$ref": "#/components/schemas/TimeAdjustment"
           },
           "earlier": {
             "$ref": "#/components/schemas/TimeAdjustment"
           },
           "later": {
             "$ref": "#/components/schemas/TimeAdjustment"
           },
           "latest": {
             "$ref": "#/components/schemas/TimeAdjustment"
           }
         }
       },
       "Instruction": {
         "type": "object",
         "properties": {
           "summary": {
             "type": "string"
           },
           "detailed": {
             "type": "string"
           },
           "steps": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/InstructionStep"
             }
           }
         }
       },
       "Obstacle": {
         "type": "object",
         "properties": {
           "type": {
             "type": "string"
           },
           "incline": {
             "type": "string"
           },
           "stopId": {
             "format": "int32",
             "type": "integer"
           },
           "position": {
             "type": "string"
           }
         }
       },
       "Point": {
         "description": "Represents a point located at a latitude and longitude using the WGS84 co-ordinate system.",
         "type": "object",
         "properties": {
           "lat": {
             "format": "double",
             "description": "WGS84 latitude of the location.",
             "type": "number"
           },
           "lon": {
             "format": "double",
             "description": "WGS84 longitude of the location.",
             "type": "number"
           }
         }
       },
       "Path": {
         "type": "object",
         "properties": {
           "lineString": {
             "type": "string"
           },
           "stopPoints": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/Identifier"
             }
           },
           "elevation": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/JpElevation"
             }
           }
         }
       },
       "RouteOption": {
         "type": "object",
         "properties": {
           "id": {
             "description": "The Id of the route",
             "type": "string"
           },
           "name": {
             "description": "Name such as \"72\"",
             "type": "string"
           },
           "directions": {
             "type": "array",
             "items": {
               "type": "string"
             }
           },
           "lineIdentifier": {
             "$ref": "#/components/schemas/Identifier",
             "description":"The line identifier (e.g. District Line), from where you can obtain line status information e.g. the rainbow board status \"good service\"."
          }
         }
       },
       "Identifier": {
         "type": "object",
         "properties": {
           "id": {
             "type": "string"
           },
           "name": {
             "type": "string"
           },
           "uri": {
             "type": "string"
           },
           "fullName": {
             "type": "string"
           },
           "type": {
             "type": "string"
           },
           "crowding": {
             "$ref": "#/components/schemas/Crowding"
           }
         }
       },
       "PlannedWork": {
         "type": "object",
         "properties": {
           "id": {
             "type": "string"
           },
           "description": {
             "type": "string"
           },
           "createdDateTime": {
             "format": "date-time",
             "type": "string"
           },
           "lastUpdateDateTime": {
             "format": "date-time",
             "type": "string"
           }
         }
       },
       "RouteSection": {
         "type": "object",
         "properties": {
           "id": {
             "description": "The Id of the route",
             "type": "string"
           },
           "lineId": {
             "description": "The Id of the Line",
             "type": "string"
           },
           "routeCode": {
             "description": "The route code",
             "type": "string"
           },
           "name": {
             "description": "Name such as \"72\"",
             "type": "string"
           },
           "direction": {
             "description": "eg: N or S or I or O",
             "type": "string"
           },
           "lineString": {
             "description": "eg: Path coordindates",
             "type": "string"
           },
           "originationName": {
             "description": "eg: Origination Name",
             "type": "string"
           },
           "destinationName": {
             "description": "eg: Destination Name",
             "type": "string"
           },
           "routeSectionNaptanEntrySequence": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/RouteSectionNaptanEntrySequence"
             }
           }
         }
       },
       "StopPoint": {
         "type": "object",
         "properties": {
           "naptanId": {
             "type": "string"
           },
           "platformName": {
             "type": "string"
           },
           "indicator": {
             "description": "The indicator of the stop point e.g. \"Stop K\"",
             "type": "string"
           },
           "stopLetter": {
             "description": "The stop letter, if it could be cleansed from the Indicator e.g. \"K\"",
             "type": "string"
           },
           "modes": {
             "type": "array",
             "items": {
               "type": "string"
             }
           },
           "icsCode": {
             "type": "string"
           },
           "smsCode": {
             "type": "string"
           },
           "stopType": {
             "type": "string"
           },
           "stationNaptan": {
             "type": "string"
           },
           "accessibilitySummary": {
             "type": "string"
           },
           "hubNaptanCode": {
             "type": "string"
           },
           "lines": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/Identifier"
             }
           },
           "lineGroup": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/LineGroup"
             }
           },
           "lineModeGroups": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/LineModeGroup"
             }
           },
           "fullName": {
             "type": "string"
           },
           "naptanMode": {
             "type": "string"
           },
           "status": {
             "type": "boolean"
           },
           "id": {
             "description": "A unique identifier.",
             "type": "string"
           },
           "url": {
             "description": "The unique location of this resource.",
             "type": "string"
           },
           "commonName": {
             "description": "A human readable name.",
             "type": "string"
           },
           "distance": {
             "format": "double",
             "description": "The distance of the place from its search point, if this is the result\r\n            of a geographical search, otherwise zero.",
             "type": "number"
           },
           "placeType": {
             "description": "The type of Place. See /Place/Meta/placeTypes for possible values.",
             "type": "string"
           },
           "additionalProperties": {
             "description": "A bag of additional key/value pairs with extra information about this place.",
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/AdditionalProperties"
             }
           },
           "children": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/Place"
             }
           },
           "childrenUrls": {
             "type": "array",
             "items": {
               "type": "string"
             }
           },
           "lat": {
             "format": "double",
             "description": "WGS84 latitude of the location.",
             "type": "number"
           },
           "lon": {
             "format": "double",
             "description": "WGS84 longitude of the location.",
             "type": "number"
           }
         }
       },
       "ValidityPeriod": {
         "description": "Represents a period for which a planned works is valid.",
         "type": "object",
         "properties": {
           "fromDate": {
             "format": "date-time",
             "description": "Gets or sets the start date.",
             "type": "string"
           },
           "toDate": {
             "format": "date-time",
             "description": "Gets or sets the end date.",
             "type": "string"
           },
           "isNow": {
             "description": "If true is a realtime status rather than planned or info",
             "type": "boolean"
           }
         }
       },
       "PassengerFlow": {
         "type": "object",
         "properties": {
           "timeSlice": {
             "description": "Time in 24hr format with 15 minute intervals e.g. 0500-0515, 0515-0530 etc.",
             "type": "string"
           },
           "value": {
             "format": "int32",
             "description": "Count of passenger flow towards a platform",
             "type": "integer"
           }
         }
       },
       "TrainLoading": {
         "type": "object",
         "properties": {
           "line": {
             "description": "The Line Name e.g. \"Victoria\"",
             "type": "string"
           },
           "lineDirection": {
             "description": "Direction of the Line e.g. NB, SB, WB etc.",
             "type": "string"
           },
           "platformDirection": {
             "description": "Direction displayed on the platform e.g. NB, SB, WB etc.",
             "type": "string"
           },
           "direction": {
             "description": "Direction in regards to Journey Planner i.e. inbound or outbound",
             "type": "string"
           },
           "naptanTo": {
             "description": "Naptan of the adjacent station",
             "type": "string"
           },
           "timeSlice": {
             "description": "Time in 24hr format with 15 minute intervals e.g. 0500-0515, 0515-0530 etc.",
             "type": "string"
           },
           "value": {
             "format": "int32",
             "description": "Scale between 1-6, \r\n             1 = Very quiet, 2 = Quiet, 3 = Fairly busy, 4 = Busy, 5 = Very busy, 6 = Exceptionally busy",
             "type": "integer"
           }
         }
       },
       "TimeAdjustment": {
         "type": "object",
         "properties": {
           "date": {
             "type": "string"
           },
           "time": {
             "type": "string"
           },
           "timeIs": {
             "type": "string"
           },
           "uri": {
             "type": "string"
           }
         }
       },
       "InstructionStep": {
         "type": "object",
         "properties": {
           "description": {
             "type": "string"
           },
           "turnDirection": {
             "type": "string"
           },
           "streetName": {
             "type": "string"
           },
           "distance": {
             "format": "int32",
             "type": "integer"
           },
           "cumulativeDistance": {
             "format": "int32",
             "type": "integer"
           },
           "skyDirection": {
             "format": "int32",
             "type": "integer"
           },
           "skyDirectionDescription": {
             "enum": [
               "North",
               "NorthEast",
               "East",
               "SouthEast",
               "South",
               "SouthWest",
               "West",
               "NorthWest"
             ],
             "type": "string"
           },
           "cumulativeTravelTime": {
             "format": "int32",
             "type": "integer"
           },
           "latitude": {
             "format": "double",
             "type": "number"
           },
           "longitude": {
             "format": "double",
             "type": "number"
           },
           "pathAttribute": {
             "$ref": "#/components/schemas/PathAttribute"
           },
           "descriptionHeading": {
             "type": "string"
           },
           "trackType": {
             "enum": [
               "CycleSuperHighway",
               "CanalTowpath",
               "QuietRoad",
               "ProvisionForCyclists",
               "BusyRoads",
               "None",
               "PushBike"
             ],
             "type": "string"
           }
         }
       },
       "JpElevation": {
         "type": "object",
         "properties": {
           "distance": {
             "format": "int32",
             "type": "integer"
           },
           "startLat": {
             "format": "double",
             "type": "number"
           },
           "startLon": {
             "format": "double",
             "type": "number"
           },
           "endLat": {
             "format": "double",
             "type": "number"
           },
           "endLon": {
             "format": "double",
             "type": "number"
           },
           "heightFromPreviousPoint": {
             "format": "int32",
             "type": "integer"
           },
           "gradient": {
             "format": "double",
             "type": "number"
           }
         }
       },
       "RouteSectionNaptanEntrySequence": {
         "type": "object",
         "properties": {
           "ordinal": {
             "format": "int32",
             "type": "integer"
           },
           "stopPoint": {
             "$ref": "#/components/schemas/StopPoint"
           }
         }
       },
       "LineGroup": {
         "type": "object",
         "properties": {
           "naptanIdReference": {
             "type": "string"
           },
           "stationAtcoCode": {
             "type": "string"
           },
           "lineIdentifier": {
             "type": "array",
             "items": {
               "type": "string"
             }
           }
         }
       },
       "LineModeGroup": {
         "type": "object",
         "properties": {
           "modeName": {
             "type": "string"
           },
           "lineIdentifier": {
             "type": "array",
             "items": {
               "type": "string"
             }
           }
         }
       },
       "PathAttribute": {
         "type": "object",
         "properties": {
           "name": {
             "type": "string"
           },
           "value": {
             "type": "string"
           }
         }
       },
       "StatusSeverity": {
         "type": "object",
         "properties": {
           "modeName": {
             "type": "string"
           },
           "severityLevel": {
             "format": "int32",
             "type": "integer"
           },
           "description": {
             "type": "string"
           }
         }
       },
       "RouteSequence": {
         "type": "object",
         "properties": {
           "lineId": {
             "type": "string"
           },
           "lineName": {
             "type": "string"
           },
           "direction": {
             "type": "string"
           },
           "isOutboundOnly": {
             "type": "boolean"
           },
           "mode": {
             "type": "string"
           },
           "lineStrings": {
             "type": "array",
             "items": {
               "type": "string"
             }
           },
           "stations": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/MatchedStop"
             }
           },
           "stopPointSequences": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/StopPointSequence"
             }
           },
           "orderedLineRoutes": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/OrderedRoute"
             }
           }
         }
       },
       "MatchedStop": {
         "type": "object",
         "properties": {
           "routeId": {
             "format": "int32",
             "type": "integer"
           },
           "parentId": {
             "type": "string"
           },
           "stationId": {
             "type": "string"
           },
           "icsId": {
             "type": "string"
           },
           "topMostParentId": {
             "type": "string"
           },
           "direction": {
             "type": "string"
           },
           "towards": {
             "type": "string"
           },
           "modes": {
             "type": "array",
             "items": {
               "type": "string"
             }
           },
           "stopType": {
             "type": "string"
           },
           "stopLetter": {
             "type": "string"
           },
           "zone": {
             "type": "string"
           },
           "accessibilitySummary": {
             "type": "string"
           },
           "hasDisruption": {
             "type": "boolean"
           },
           "lines": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/Identifier"
             }
           },
           "status": {
             "type": "boolean"
           },
           "id": {
             "type": "string"
           },
           "url": {
             "type": "string"
           },
           "name": {
             "type": "string"
           },
           "lat": {
             "format": "double",
             "type": "number"
           },
           "lon": {
             "format": "double",
             "type": "number"
           }
         }
       },
       "StopPointSequence": {
         "type": "object",
         "properties": {
           "lineId": {
             "type": "string"
           },
           "lineName": {
             "type": "string"
           },
           "direction": {
             "type": "string"
           },
           "branchId": {
             "format": "int32",
             "description": "The id of this branch.",
             "type": "integer"
           },
           "nextBranchIds": {
             "description": "The ids of the next branch(es) in the sequence. Note that the next and previous branch id can be\r\n            identical in the case of a looped route e.g. the Circle line.",
             "type": "array",
             "items": {
               "format": "int32",
               "type": "integer"
             }
           },
           "prevBranchIds": {
             "description": "The ids of the previous branch(es) in the sequence. Note that the next and previous branch id can be\r\n            identical in the case of a looped route e.g. the Circle line.",
             "type": "array",
             "items": {
               "format": "int32",
               "type": "integer"
             }
           },
           "stopPoint": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/MatchedStop"
             }
           },
           "serviceType": {
             "enum": [
               "Regular",
               "Night"
             ],
             "type": "string"
           }
         }
       },
       "OrderedRoute": {
         "type": "object",
         "properties": {
           "name": {
             "type": "string"
           },
           "naptanIds": {
             "type": "array",
             "items": {
               "type": "string"
             }
           },
           "serviceType": {
             "type": "string"
           }
         }
       },
       "DateRange": {
         "type": "object",
         "properties": {
           "startDate": {
             "format": "date-time",
             "type": "string"
           },
           "endDate": {
             "format": "date-time",
             "type": "string"
           }
         }
       },
       "RouteSearchResponse": {
         "type": "object",
         "properties": {
           "input": {
             "type": "string"
           },
           "searchMatches": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/RouteSearchMatch"
             }
           }
         }
       },
       "RouteSearchMatch": {
         "type": "object",
         "properties": {
           "lineId": {
             "type": "string"
           },
           "mode": {
             "type": "string"
           },
           "lineName": {
             "type": "string"
           },
           "lineRouteSection": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/LineRouteSection"
             }
           },
           "matchedRouteSections": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/MatchedRouteSections"
             }
           },
           "matchedStops": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/MatchedStop"
             }
           },
           "id": {
             "type": "string"
           },
           "url": {
             "type": "string"
           },
           "name": {
             "type": "string"
           },
           "lat": {
             "format": "double",
             "type": "number"
           },
           "lon": {
             "format": "double",
             "type": "number"
           }
         }
       },
       "LineRouteSection": {
         "type": "object",
         "properties": {
           "routeId": {
             "format": "int32",
             "type": "integer"
           },
           "direction": {
             "type": "string"
           },
           "destination": {
             "type": "string"
           },
           "fromStation": {
             "type": "string"
           },
           "toStation": {
             "type": "string"
           },
           "serviceType": {
             "type": "string"
           },
           "vehicleDestinationText": {
             "type": "string"
           }
         }
       },
       "MatchedRouteSections": {
         "type": "object",
         "properties": {
           "id": {
             "format": "int32",
             "type": "integer"
           }
         }
       },
       "TimetableResponse": {
         "type": "object",
         "properties": {
           "lineId": {
             "type": "string"
           },
           "lineName": {
             "type": "string"
           },
           "direction": {
             "type": "string"
           },
           "pdfUrl": {
             "type": "string"
           },
           "stations": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/MatchedStop"
             }
           },
           "stops": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/MatchedStop"
             }
           },
           "timetable": {
             "$ref": "#/components/schemas/Timetable"
           },
           "disambiguation": {
             "$ref": "#/components/schemas/Disambiguation"
           },
           "statusErrorMessage": {
             "type": "string"
           }
         }
       },
       "Timetable": {
         "type": "object",
         "properties": {
           "departureStopId": {
             "type": "string"
           },
           "routes": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/TimetableRoute"
             }
           }
         }
       },
       "Disambiguation": {
         "type": "object",
         "properties": {
           "disambiguationOptions": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/DisambiguationOption"
             }
           }
         }
       },
       "TimetableRoute": {
         "type": "object",
         "properties": {
           "stationIntervals": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/StationInterval"
             }
           },
           "schedules": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/Schedule"
             }
           }
         }
       },
       "DisambiguationOption": {
         "type": "object",
         "properties": {
           "description": {
             "type": "string"
           },
           "uri": {
             "type": "string"
           }
         }
       },
       "StationInterval": {
         "type": "object",
         "properties": {
           "id": {
             "type": "string"
           },
           "intervals": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/Interval"
             }
           }
         }
       },
       "Schedule": {
         "type": "object",
         "properties": {
           "name": {
             "type": "string"
           },
           "knownJourneys": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/KnownJourney"
             }
           },
           "firstJourney": {
             "$ref": "#/components/schemas/KnownJourney"
           },
           "lastJourney": {
             "$ref": "#/components/schemas/KnownJourney"
           },
           "periods": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/Period"
             }
           }
         }
       },
       "Interval": {
         "type": "object",
         "properties": {
           "stopId": {
             "type": "string"
           },
           "timeToArrival": {
             "format": "double",
             "type": "number"
           }
         }
       },
       "KnownJourney": {
         "type": "object",
         "properties": {
           "hour": {
             "type": "string"
           },
           "minute": {
             "type": "string"
           },
           "intervalId": {
             "format": "int32",
             "type": "integer"
           }
         }
       },
       "Period": {
         "type": "object",
         "properties": {
           "type": {
             "enum": [
               "Normal",
               "FrequencyHours",
               "FrequencyMinutes",
               "Unknown"
             ],
             "type": "string"
           },
           "fromTime": {
             "$ref": "#/components/schemas/TwentyFourHourClockTime"
           },
           "toTime": {
             "$ref": "#/components/schemas/TwentyFourHourClockTime"
           },
           "frequency": {
             "$ref": "#/components/schemas/ServiceFrequency"
           }
         }
       },
       "TwentyFourHourClockTime": {
         "type": "object",
         "properties": {
           "hour": {
             "type": "string"
           },
           "minute": {
             "type": "string"
           }
         }
       },
       "ServiceFrequency": {
         "type": "object",
         "properties": {
           "lowestFrequency": {
             "format": "double",
             "type": "number"
           },
           "highestFrequency": {
             "format": "double",
             "type": "number"
           }
         }
       },
       "Prediction": {
         "description": "DTO to capture the prediction details",
         "type": "object",
         "properties": {
           "id": {
             "description": "The identitier for the prediction",
             "type": "string"
           },
           "operationType": {
             "format": "int32",
             "description": "The type of the operation (1: is new or has been updated, 2: should be deleted from any client cache)",
             "type": "integer"
           },
           "vehicleId": {
             "description": "The actual vehicle in transit (for train modes, the leading car of the rolling set)",
             "type": "string"
           },
           "naptanId": {
             "description": "Identifier for the prediction",
             "type": "string"
           },
           "stationName": {
             "description": "Station name",
             "type": "string"
           },
           "lineId": {
             "description": "Unique identifier for the Line",
             "type": "string"
           },
           "lineName": {
             "description": "Line Name",
             "type": "string"
           },
           "platformName": {
             "description": "Platform name (for bus, this is the stop letter)",
             "type": "string"
           },
           "direction": {
             "description": "Direction (unified to inbound/outbound)",
             "type": "string"
           },
           "bearing": {
             "description": "Bearing (between 0 to 359)",
             "type": "string"
           },
           "destinationNaptanId": {
             "description": "Naptan Identifier for the prediction's destination",
             "type": "string"
           },
           "destinationName": {
             "description": "Name of the destination",
             "type": "string"
           },
           "timestamp": {
             "format": "date-time",
             "description": "Timestamp for when the prediction was inserted/modified (source column drives what objects are broadcast on each iteration)",
             "type": "string"
           },
           "timeToStation": {
             "format": "int32",
             "description": "Prediction of the Time to station in seconds",
             "type": "integer"
           },
           "currentLocation": {
             "description": "The current location of the vehicle.",
             "type": "string"
           },
           "towards": {
             "description": "Routing information or other descriptive text about the path of the vehicle towards the destination",
             "type": "string"
           },
           "expectedArrival": {
             "format": "date-time",
             "description": "The expected arrival time of the vehicle at the stop/station",
             "type": "string"
           },
           "timeToLive": {
             "format": "date-time",
             "description": "The expiry time for the prediction",
             "type": "string"
           },
           "modeName": {
             "description": "The mode name of the station/line the prediction relates to",
             "type": "string"
           },
           "timing": {
             "$ref": "#/components/schemas/PredictionTiming",
             "description":"Keep the original timestamp from MongoDb fo debugging purposes"
           }
         }
       },
       "PredictionTiming": {
         "type": "object",
         "properties": {
           "countdownServerAdjustment": {
             "type": "string"
           },
           "source": {
             "format": "date-time",
             "type": "string"
           },
           "insert": {
             "format": "date-time",
             "type": "string"
           },
           "read": {
             "format": "date-time",
             "type": "string"
           },
           "sent": {
             "format": "date-time",
             "type": "string"
           },
           "received": {
             "format": "date-time",
             "type": "string"
           }
         }
       },
       "ActiveServiceType": {
         "type": "object",
         "properties": {
           "mode": {
             "type": "string"
           },
           "serviceType": {
             "type": "string"
           }
         }
       },
       "CarParkOccupancy": {
         "type": "object",
         "properties": {
           "id": {
             "type": "string"
           },
           "bays": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/Bay"
             }
           },
           "name": {
             "type": "string"
           },
           "carParkDetailsUrl": {
             "type": "string"
           }
         }
       },
       "Bay": {
         "type": "object",
         "properties": {
           "bayType": {
             "type": "string"
           },
           "bayCount": {
             "format": "int32",
             "type": "integer"
           },
           "free": {
             "format": "int32",
             "type": "integer"
           },
           "occupied": {
             "format": "int32",
             "type": "integer"
           }
         }
       },
       "PlaceCategory": {
         "type": "object",
         "properties": {
           "category": {
             "type": "string"
           },
           "availableKeys": {
             "type": "array",
             "items": {
               "type": "string"
             }
           }
         }
       },
       "SearchResponse": {
         "type": "object",
         "properties": {
           "query": {
             "type": "string"
           },
           "from": {
             "format": "int32",
             "type": "integer"
           },
           "page": {
             "format": "int32",
             "type": "integer"
           },
           "pageSize": {
             "format": "int32",
             "type": "integer"
           },
           "provider": {
             "type": "string"
           },
           "total": {
             "format": "int32",
             "type": "integer"
           },
           "matches": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/SearchMatch"
             }
           },
           "maxScore": {
             "format": "double",
             "type": "number"
           }
         }
       },
       "SearchMatch": {
         "type": "object",
         "properties": {
           "id": {
             "type": "string"
           },
           "url": {
             "type": "string"
           },
           "name": {
             "type": "string"
           },
           "lat": {
             "format": "double",
             "type": "number"
           },
           "lon": {
             "format": "double",
             "type": "number"
           }
         }
       },
       "PostcodeInput": {
         "type": "object",
         "properties": {
           "postcode": {
             "pattern": "^(([gG][iI][rR] {0,}0[aA]{2})|((([a-pr-uwyzA-PR-UWYZ][a-hk-yA-HK-Y]?[0-9][0-9]?)|(([a-pr-uwyzA-PR-UWYZ][0-9][a-hjkstuwA-HJKSTUW])|([a-pr-uwyzA-PR-UWYZ][a-hk-yA-HK-Y][0-9][abehmnprv-yABEHMNPRV-Y]))) {0,}[0-9][abd-hjlnp-uw-zABD-HJLNP-UW-Z]{2}))$",
             "type": "string"
           }
         }
       },
       "PlacePolygon": {
         "type": "object",
         "properties": {
           "geoPoints": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/GeoPoint"
             }
           },
           "commonName": {
             "type": "string"
           }
         }
       },
       "GeoPoint": {
         "required": [
           "lat",
           "lon"
         ],
         "type": "object",
         "properties": {
           "lat": {
             "format": "double",
             "type": "number"
           },
           "lon": {
             "format": "double",
             "type": "number"
           }
         }
       },
       "GeoPointBBox": {
         "required": [
           "swLat",
           "swLon",
           "neLat",
           "neLon"
         ],
         "type": "object",
         "properties": {
           "swLat": {
             "format": "double",
             "type": "number"
           },
           "swLon": {
             "format": "double",
             "type": "number"
           },
           "neLat": {
             "format": "double",
             "type": "number"
           },
           "neLon": {
             "format": "double",
             "type": "number"
           }
         }
       },
       "RoadCorridor": {
         "type": "object",
         "properties": {
           "id": {
             "description": "The Id of the Corridor e.g. \"A406\"",
             "type": "string"
           },
           "displayName": {
             "description": "The display name of the Corridor e.g. \"North Circular (A406)\". This\r\n            may be identical to the Id.",
             "type": "string"
           },
           "group": {
             "description": "The group name of the Corridor e.g. \"Central London\". Most corridors are not grouped, in which case this field can be null.",
             "type": "string"
           },
           "statusSeverity": {
             "description": "Standard multi-mode status severity code",
             "type": "string"
           },
           "statusSeverityDescription": {
             "description": "Description of the status severity as applied to RoadCorridors",
             "type": "string"
           },
           "bounds": {
             "description": "The Bounds of the Corridor, given by the south-east followed by the north-west co-ordinate\r\n            pair in geoJSON format e.g. \"[[-1.241531,51.242151],[1.641223,53.765721]]\"",
             "type": "string"
           },
           "envelope": {
             "description": "The Envelope of the Corridor, given by the corner co-ordinates of a rectangular (four-point) polygon\r\n            in geoJSON format e.g. \"[[-1.241531,51.242151],[-1.241531,53.765721],[1.641223,53.765721],[1.641223,51.242151]]\"",
             "type": "string"
           },
           "statusAggregationStartDate": {
             "format": "date-time",
             "description": "The start of the period over which status has been aggregated, or null if this is the current corridor status.",
             "type": "string"
           },
           "statusAggregationEndDate": {
             "format": "date-time",
             "description": "The end of the period over which status has been aggregated, or null if this is the current corridor status.",
             "type": "string"
           },
           "url": {
             "description": "URL to retrieve this Corridor.",
             "type": "string"
           }
         }
       },
       "DateRangeNullable": {
         "type": "object",
         "properties": {
           "startDate": {
             "format": "date-time",
             "type": "string"
           },
           "endDate": {
             "format": "date-time",
             "type": "string"
           }
         }
       },
       "RoadDisruption": {
         "type": "object",
         "properties": {
           "id": {
             "description": "Unique identifier for the road disruption",
             "type": "string"
           },
           "url": {
             "description": "URL to retrieve this road disruption",
             "type": "string"
           },
           "point": {
             "description": "Latitude and longitude (WGS84) of the centroid of the disruption, stored in a geoJSON-formatted string.",
             "type": "string"
           },
           "severity": {
             "description": "A description of the severity of the disruption.",
             "type": "string"
           },
           "ordinal": {
             "format": "int32",
             "description": "An ordinal of the disruption based on severity, level of interest and corridor.",
             "type": "integer"
           },
           "category": {
             "description": "Describes the nature of disruption e.g. Traffic Incidents, Works",
             "type": "string"
           },
           "subCategory": {
             "description": "Describes the sub-category of disruption e.g. Collapsed Manhole, Abnormal Load",
             "type": "string"
           },
           "comments": {
             "description": "Full text of comments describing the disruption, including details of any road closures and diversions, where appropriate.",
             "type": "string"
           },
           "currentUpdate": {
             "description": "Text of the most recent update from the LSTCC on the state of the\r\n             disruption, including the current traffic impact and any advice to\r\n             road users.",
             "type": "string"
           },
           "currentUpdateDateTime": {
             "format": "date-time",
             "description": "The time when the last CurrentUpdate description was recorded, \r\n            or null if no CurrentUpdate has been applied.",
             "type": "string"
           },
           "corridorIds": {
             "description": "The Ids of affected corridors, if any.",
             "type": "array",
             "items": {
               "type": "string"
             }
           },
           "startDateTime": {
             "format": "date-time",
             "description": "The date and time which the disruption started. For a planned disruption (i.e. planned road works) this date will be in the future.\r\n            For unplanned disruptions, this will default to the date on which the disruption was first recorded, but may be adjusted by the operator.",
             "type": "string"
           },
           "endDateTime": {
             "format": "date-time",
             "description": "The date and time on which the disruption ended. For planned disruptions, this date will have a valid value. For unplanned \r\n            disruptions in progress, this field will be omitted.",
             "type": "string"
           },
           "lastModifiedTime": {
             "format": "date-time",
             "description": "The date and time on which the disruption was last modified in the system. This information can reliably be used by a developer to quickly\r\n            compare two instances of the same disruption to determine if it has been changed.",
             "type": "string"
           },
           "levelOfInterest": {
             "description": "This describes the level of potential impact on traffic operations of the disruption. \r\n            High = e.g. a one-off disruption on a major or high profile route which will require a high level of operational attention \r\n            Medium = This is the default value \r\n            Low = e.g. a frequently occurring disruption which is well known",
             "type": "string"
           },
           "location": {
             "description": "Main road name / number (borough) or preset area name where the disruption is located. This might be useful for a map popup where space is limited.",
             "type": "string"
           },
           "status": {
             "description": "This describes the status of the disruption.  \r\n            Active = currently in progress \r\n            Active Long Term = currently in progress and long term\r\n            Scheduled = scheduled to start within the next 180 days\r\n            Recurring Works = planned maintenance works that follow a regular routine or pattern and whose next occurrence is to start within the next 180 days.\r\n            Recently Cleared = recently cleared in the last 24 hours\r\n            Note that the status of Scheduled or Recurring Works disruptions will change to Active when they start, and will change status again when they end.",
             "type": "string"
           },
           "geography": {
             "$ref": "#/components/schemas/DbGeography",
             "description": "Geography version of Point for output as GeoJSON.\r\n            Can not use Geometry in a consistent way as non-TIMS disruptions do not have a polygon"
           },
           "geometry": {
             "$ref": "#/components/schemas/DbGeography",
             "description":"GeoJSON formatted latitude/longitude (WGS84) pairs forming an enclosed polyline or polygon. The polygon will only be included where affected streets information\r\n            is not available for the disruption, would be inappropriate (e.g. a very large number of streets), or is centred on an area without streets (e.g. a football stadium)."
           },
           "streets": {
             "description": "A collection of zero or more streets affected by the disruption.",
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/Street"
             }
           },
           "isProvisional": {
             "description": "True if the disruption is planned on a future date that is open to change",
             "type": "boolean"
           },
           "hasClosures": {
             "description": "True if any of the affected Streets have a \"Full Closure\" status, false otherwise. A RoadDisruption that has HasClosures is considered a \r\n            Severe or Serious disruption for severity filtering purposes.",
             "type": "boolean"
           },
           "linkText": {
             "description": "The text of any associated link",
             "type": "string"
           },
           "linkUrl": {
             "description": "The url of any associated link",
             "type": "string"
           },
           "roadProject": {
             "$ref": "#/components/schemas/RoadProject",
             "description": "Any associated road project"
           },
           "publishStartDate": {
             "format": "date-time",
             "description": "TDM Additional properties",
             "type": "string"
           },
           "publishEndDate": {
             "format": "date-time",
             "type": "string"
           },
           "timeFrame": {
             "type": "string"
           },
           "roadDisruptionLines": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/RoadDisruptionLine"
             }
           },
           "roadDisruptionImpactAreas": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/RoadDisruptionImpactArea"
             }
           },
           "recurringSchedules": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/RoadDisruptionSchedule"
             }
           }
         }
       },
       "Street": {
         "type": "object",
         "properties": {
           "name": {
             "description": "Street name",
             "type": "string"
           },
           "closure": {
             "description": "Type of road closure. Some example values:\r\n            Open = road is open, not blocked, not closed, not restricted. It maybe that the disruption has been moved out of the carriageway.\r\n            Partial Closure = road is partially blocked, closed or restricted. \r\n            Full Closure = road is fully blocked or closed.",
             "type": "string"
           },
           "directions": {
             "description": "The direction of the disruption on the street. Some example values:\r\n            All Directions\r\n            All Approaches\r\n            Clockwise\r\n            Anti-Clockwise\r\n            Northbound\r\n            Eastbound\r\n            Southbound\r\n            Westbound\r\n            Both Directions",
             "type": "string"
           },
           "segments": {
             "description": "Geographic description of the sections of this street that are affected.",
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/StreetSegment"
             }
           },
           "sourceSystemId": {
             "format": "int64",
             "description": "The ID from the source system of the disruption that this street belongs to.",
             "type": "integer"
           },
           "sourceSystemKey": {
             "description": "The key of the source system of the disruption that this street belongs to.",
             "type": "string"
           }
         }
       },
       "RoadProject": {
         "type": "object",
         "properties": {
           "projectId": {
             "type": "string"
           },
           "schemeName": {
             "type": "string"
           },
           "projectName": {
             "type": "string"
           },
           "projectDescription": {
             "type": "string"
           },
           "projectPageUrl": {
             "type": "string"
           },
           "consultationPageUrl": {
             "type": "string"
           },
           "consultationStartDate": {
             "format": "date-time",
             "type": "string"
           },
           "consultationEndDate": {
             "format": "date-time",
             "type": "string"
           },
           "constructionStartDate": {
             "format": "date-time",
             "type": "string"
           },
           "constructionEndDate": {
             "format": "date-time",
             "type": "string"
           },
           "boroughsBenefited": {
             "type": "array",
             "items": {
               "type": "string"
             }
           },
           "cycleSuperhighwayId": {
             "type": "string"
           },
           "phase": {
             "enum": [
               "Unscoped",
               "Concept",
               "ConsultationEnded",
               "Consultation",
               "Construction",
               "Complete"
             ],
             "type": "string"
           },
           "contactName": {
             "type": "string"
           },
           "contactEmail": {
             "type": "string"
           },
           "externalPageUrl": {
             "type": "string"
           },
           "projectSummaryPageUrl": {
             "type": "string"
           }
         }
       },
       "RoadDisruptionLine": {
         "type": "object",
         "properties": {
           "id": {
             "format": "int32",
             "type": "integer"
           },
           "roadDisruptionId": {
             "type": "string"
           },
           "isDiversion": {
             "type": "boolean"
           },
           "multiLineString": {
             "$ref": "#/components/schemas/DbGeography"
           },
           "startDate": {
             "format": "date-time",
             "type": "string"
           },
           "endDate": {
             "format": "date-time",
             "type": "string"
           },
           "startTime": {
             "type": "string"
           },
           "endTime": {
             "type": "string"
           }
         }
       },
       "RoadDisruptionImpactArea": {
         "type": "object",
         "properties": {
           "id": {
             "format": "int32",
             "type": "integer"
           },
           "roadDisruptionId": {
             "type": "string"
           },
           "polygon": {
             "$ref": "#/components/schemas/DbGeography"
           },
           "startDate": {
             "format": "date-time",
             "type": "string"
           },
           "endDate": {
             "format": "date-time",
             "type": "string"
           },
           "startTime": {
             "type": "string"
           },
           "endTime": {
             "type": "string"
           }
         }
       },
       "RoadDisruptionSchedule": {
         "type": "object",
         "properties": {
           "startTime": {
             "format": "date-time",
             "type": "string"
           },
           "endTime": {
             "format": "date-time",
             "type": "string"
           }
         }
       },
       "StreetSegment": {
         "type": "object",
         "properties": {
           "toid": {
             "description": "A 16 digit unique integer identifying a OS ITN (Ordnance Survey Integrated Transport Network) road link.",
             "type": "string"
           },
           "lineString": {
             "description": "geoJSON formatted LineString containing two latitude/longitude (WGS84) pairs that identify the start and end points of the street segment.",
             "type": "string"
           },
           "sourceSystemId": {
             "format": "int64",
             "description": "The ID from the source system of the disruption that this street belongs to.",
             "type": "integer"
           },
           "sourceSystemKey": {
             "description": "The key of the source system of the disruption that this street belongs to.",
             "type": "string"
           }
         }
       },
       "Redirect": {
         "type": "object",
         "properties": {
           "shortUrl": {
             "type": "string"
           },
           "longUrl": {
             "type": "string"
           },
           "active": {
             "type": "boolean"
           }
         }
       },
       "StopPointCategory": {
         "type": "object",
         "properties": {
           "category": {
             "type": "string"
           },
           "availableKeys": {
             "type": "array",
             "items": {
               "type": "string"
             }
           }
         }
       },
       "LineServiceType": {
         "type": "object",
         "properties": {
           "lineName": {
             "type": "string"
           },
           "lineSpecificServiceTypes": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/LineSpecificServiceType"
             }
           }
         }
       },
       "LineSpecificServiceType": {
         "type": "object",
         "properties": {
           "serviceType": {
             "$ref": "#/components/schemas/LineServiceTypeInfo"
           },
           "stopServesServiceType": {
             "type": "boolean"
           }
         }
       },
       "StopPointRouteSection": {
         "type": "object",
         "properties": {
           "naptanId": {
             "type": "string"
           },
           "lineId": {
             "type": "string"
           },
           "mode": {
             "type": "string"
           },
           "validFrom": {
             "format": "date-time",
             "type": "string"
           },
           "validTo": {
             "format": "date-time",
             "type": "string"
           },
           "direction": {
             "type": "string"
           },
           "routeSectionName": {
             "type": "string"
           },
           "lineString": {
             "type": "string"
           },
           "isActive": {
             "type": "boolean"
           },
           "serviceType": {
             "type": "string"
           },
           "vehicleDestinationText": {
             "type": "string"
           },
           "destinationName": {
             "type": "string"
           }
         }
       },
       "DisruptedPoint": {
         "type": "object",
         "properties": {
           "atcoCode": {
             "type": "string"
           },
           "fromDate": {
             "format": "date-time",
             "type": "string"
           },
           "toDate": {
             "format": "date-time",
             "type": "string"
           },
           "description": {
             "type": "string"
           },
           "commonName": {
             "type": "string"
           },
           "type": {
             "type": "string"
           },
           "mode": {
             "type": "string"
           },
           "stationAtcoCode": {
             "type": "string"
           },
           "appearance": {
             "type": "string"
           },
           "additionalInformation": {
             "type": "string"
           }
         }
       },
       "StopPointsResponse": {
         "description": "A paged response containing StopPoints",
         "type": "object",
         "properties": {
           "centrePoint": {
             "description": "The centre latitude/longitude of this list of StopPoints",
             "type": "array",
             "items": {
               "format": "double",
               "type": "number"
             }
           },
           "stopPoints": {
             "description": "Collection of stop points",
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/StopPoint"
             }
           },
           "pageSize": {
             "format": "int32",
             "description": "The maximum size of the page in this response i.e. the maximum number of StopPoints",
             "type": "integer"
           },
           "total": {
             "format": "int32",
             "description": "The total number of StopPoints available across all pages",
             "type": "integer"
           },
           "page": {
             "format": "int32",
             "description": "The index of this page",
             "type": "integer"
           }
         }
       },
       "RecommendationResponse": {
         "type": "object",
         "properties": {
           "recommendations": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/Recommendation"
             }
           }
         }
       },
       "Recommendation": {
         "type": "object",
         "properties": {
           "id": {
             "format": "int32",
             "type": "integer"
           },
           "rule": {
             "format": "int32",
             "type": "integer"
           },
           "rank": {
             "format": "int32",
             "type": "integer"
           },
           "fareType": {
             "type": "string"
           },
           "product": {
             "type": "string"
           },
           "ticketType": {
             "type": "string"
           },
           "ticketTime": {
             "type": "string"
           },
           "productType": {
             "type": "string"
           },
           "discountCard": {
             "type": "string"
           },
           "zones": {
             "type": "string"
           },
           "cost": {
             "type": "string"
           },
           "priceDescription": {
             "type": "string"
           },
           "priceComparison": {
             "type": "string"
           },
           "recommendedTopUp": {
             "type": "string"
           },
           "notes": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/Message"
             }
           },
           "keyFeatures": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/Message"
             }
           },
           "gettingYourTicket": {
             "type": "array",
             "items": {
               "$ref": "#/components/schemas/Message"
             }
           },
           "singleFare": {
             "format": "double",
             "type": "number"
           }
         }
       },
       "EmissionsSurchargeVehicle": {
         "description": "",
         "type": "object",
         "properties": {
           "vrm": {
             "type": "string"
           },
           "type": {
             "type": "string"
           },
           "make": {
             "type": "string"
           },
           "model": {
             "type": "string"
           },
           "colour": {
             "type": "string"
           },
           "compliance": {
             "enum": [
               "NotCompliant",
               "Compliant",
               "Exempt"
             ],
             "type": "string"
           }
         }
       },
       "ApiVersionInfo": {
         "type": "object",
         "properties": {
           "label": {
             "type": "string"
           },
           "timestamp": {
             "format": "date-time",
             "type": "string"
           },
           "version": {
             "type": "string"
           },
           "assemblies": {
             "type": "array",
             "items": {
               "type": "string"
             }
           }
         }
       }
     }
   }
 }
