//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public struct Episode: APIModel {

    public var absoluteNumber: Int?

    public var airedEpisodeNumber: Int?

    public var airedSeason: Int?

    public var airsAfterSeason: Int?

    public var airsBeforeEpisode: Int?

    public var airsBeforeSeason: Int?

    public var director: String?

    public var directors: [String]?

    public var dvdChapter: Double?

    public var dvdDiscid: String?

    public var dvdEpisodeNumber: Double?

    public var dvdSeason: Int?

    public var episodeName: String?

    public var filename: String?

    public var firstAired: String?

    public var guestStars: [String]?

    public var _id: Int?

    public var imdbId: String?

    public var lastUpdated: Int?

    public var lastUpdatedBy: String?

    public var overview: String?

    public var productionCode: String?

    public var seriesId: String?

    public var showUrl: String?

    public var siteRating: Double?

    public var siteRatingCount: Int?

    public var thumbAdded: String?

    public var thumbAuthor: Int?

    public var thumbHeight: String?

    public var thumbWidth: String?

    public var writers: [String]?

    public init(absoluteNumber: Int? = nil, airedEpisodeNumber: Int? = nil, airedSeason: Int? = nil, airsAfterSeason: Int? = nil, airsBeforeEpisode: Int? = nil, airsBeforeSeason: Int? = nil, director: String? = nil, directors: [String]? = nil, dvdChapter: Double? = nil, dvdDiscid: String? = nil, dvdEpisodeNumber: Double? = nil, dvdSeason: Int? = nil, episodeName: String? = nil, filename: String? = nil, firstAired: String? = nil, guestStars: [String]? = nil, _id: Int? = nil, imdbId: String? = nil, lastUpdated: Int? = nil, lastUpdatedBy: String? = nil, overview: String? = nil, productionCode: String? = nil, seriesId: String? = nil, showUrl: String? = nil, siteRating: Double? = nil, siteRatingCount: Int? = nil, thumbAdded: String? = nil, thumbAuthor: Int? = nil, thumbHeight: String? = nil, thumbWidth: String? = nil, writers: [String]? = nil) {
        self.absoluteNumber = absoluteNumber
        self.airedEpisodeNumber = airedEpisodeNumber
        self.airedSeason = airedSeason
        self.airsAfterSeason = airsAfterSeason
        self.airsBeforeEpisode = airsBeforeEpisode
        self.airsBeforeSeason = airsBeforeSeason
        self.director = director
        self.directors = directors
        self.dvdChapter = dvdChapter
        self.dvdDiscid = dvdDiscid
        self.dvdEpisodeNumber = dvdEpisodeNumber
        self.dvdSeason = dvdSeason
        self.episodeName = episodeName
        self.filename = filename
        self.firstAired = firstAired
        self.guestStars = guestStars
        self._id = _id
        self.imdbId = imdbId
        self.lastUpdated = lastUpdated
        self.lastUpdatedBy = lastUpdatedBy
        self.overview = overview
        self.productionCode = productionCode
        self.seriesId = seriesId
        self.showUrl = showUrl
        self.siteRating = siteRating
        self.siteRatingCount = siteRatingCount
        self.thumbAdded = thumbAdded
        self.thumbAuthor = thumbAuthor
        self.thumbHeight = thumbHeight
        self.thumbWidth = thumbWidth
        self.writers = writers
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        absoluteNumber = try container.decodeIfPresent("absoluteNumber")
        airedEpisodeNumber = try container.decodeIfPresent("airedEpisodeNumber")
        airedSeason = try container.decodeIfPresent("airedSeason")
        airsAfterSeason = try container.decodeIfPresent("airsAfterSeason")
        airsBeforeEpisode = try container.decodeIfPresent("airsBeforeEpisode")
        airsBeforeSeason = try container.decodeIfPresent("airsBeforeSeason")
        director = try container.decodeIfPresent("director")
        directors = try container.decodeArrayIfPresent("directors")
        dvdChapter = try container.decodeIfPresent("dvdChapter")
        dvdDiscid = try container.decodeIfPresent("dvdDiscid")
        dvdEpisodeNumber = try container.decodeIfPresent("dvdEpisodeNumber")
        dvdSeason = try container.decodeIfPresent("dvdSeason")
        episodeName = try container.decodeIfPresent("episodeName")
        filename = try container.decodeIfPresent("filename")
        firstAired = try container.decodeIfPresent("firstAired")
        guestStars = try container.decodeArrayIfPresent("guestStars")
        _id = try container.decodeIfPresent("id")
        imdbId = try container.decodeIfPresent("imdbId")
        lastUpdated = try container.decodeIfPresent("lastUpdated")
        lastUpdatedBy = try container.decodeIfPresent("lastUpdatedBy")
        overview = try container.decodeIfPresent("overview")
        productionCode = try container.decodeIfPresent("productionCode")
        seriesId = try container.decodeIfPresent("seriesId")
        showUrl = try container.decodeIfPresent("showUrl")
        siteRating = try container.decodeIfPresent("siteRating")
        siteRatingCount = try container.decodeIfPresent("siteRatingCount")
        thumbAdded = try container.decodeIfPresent("thumbAdded")
        thumbAuthor = try container.decodeIfPresent("thumbAuthor")
        thumbHeight = try container.decodeIfPresent("thumbHeight")
        thumbWidth = try container.decodeIfPresent("thumbWidth")
        writers = try container.decodeArrayIfPresent("writers")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(absoluteNumber, forKey: "absoluteNumber")
        try container.encodeIfPresent(airedEpisodeNumber, forKey: "airedEpisodeNumber")
        try container.encodeIfPresent(airedSeason, forKey: "airedSeason")
        try container.encodeIfPresent(airsAfterSeason, forKey: "airsAfterSeason")
        try container.encodeIfPresent(airsBeforeEpisode, forKey: "airsBeforeEpisode")
        try container.encodeIfPresent(airsBeforeSeason, forKey: "airsBeforeSeason")
        try container.encodeIfPresent(director, forKey: "director")
        try container.encodeIfPresent(directors, forKey: "directors")
        try container.encodeIfPresent(dvdChapter, forKey: "dvdChapter")
        try container.encodeIfPresent(dvdDiscid, forKey: "dvdDiscid")
        try container.encodeIfPresent(dvdEpisodeNumber, forKey: "dvdEpisodeNumber")
        try container.encodeIfPresent(dvdSeason, forKey: "dvdSeason")
        try container.encodeIfPresent(episodeName, forKey: "episodeName")
        try container.encodeIfPresent(filename, forKey: "filename")
        try container.encodeIfPresent(firstAired, forKey: "firstAired")
        try container.encodeIfPresent(guestStars, forKey: "guestStars")
        try container.encodeIfPresent(_id, forKey: "id")
        try container.encodeIfPresent(imdbId, forKey: "imdbId")
        try container.encodeIfPresent(lastUpdated, forKey: "lastUpdated")
        try container.encodeIfPresent(lastUpdatedBy, forKey: "lastUpdatedBy")
        try container.encodeIfPresent(overview, forKey: "overview")
        try container.encodeIfPresent(productionCode, forKey: "productionCode")
        try container.encodeIfPresent(seriesId, forKey: "seriesId")
        try container.encodeIfPresent(showUrl, forKey: "showUrl")
        try container.encodeIfPresent(siteRating, forKey: "siteRating")
        try container.encodeIfPresent(siteRatingCount, forKey: "siteRatingCount")
        try container.encodeIfPresent(thumbAdded, forKey: "thumbAdded")
        try container.encodeIfPresent(thumbAuthor, forKey: "thumbAuthor")
        try container.encodeIfPresent(thumbHeight, forKey: "thumbHeight")
        try container.encodeIfPresent(thumbWidth, forKey: "thumbWidth")
        try container.encodeIfPresent(writers, forKey: "writers")
    }

}
