//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

extension TFL.Line {

    public enum GetLineArrivalsByPath {

      public static let service = APIService<Response>(id: "getLineArrivalsByPath", tag: "Line", method: "GET", path: "/Line/{ids}/Arrivals/{stopPointId}", hasBody: false)

      /** The direction of travel. Can be inbound or outbound */
      public enum Direction: String {
          case inbound = "inbound"
          case outbound = "outbound"
          case all = "all"

          public static let cases: [Direction] = [
            .inbound,
            .outbound,
            .all,
          ]
      }

      public class Request: APIRequest<Response> {

          public struct Options {

              /** Id of stop to get arrival predictions for (station naptan code e.g. 940GZZLUASL, you can use /StopPoint/Search/{query} endpoint to find a stop point id from a station name) */
              public var stopPointId: String

              /** A comma-separated list of line ids e.g. victoria,circle,N133. Max. approx. 20 ids. */
              public var ids: [String]

              /** The direction of travel. Can be inbound or outbound */
              public var direction: Direction

              public init(stopPointId: String, ids: [String], direction: Direction) {
                  self.stopPointId = stopPointId
                  self.ids = ids
                  self.direction = direction
              }
          }

          public var options: Options

          public init(options: Options) {
              self.options = options
              super.init(service: GetLineArrivalsByPath.service)
          }

          /// convenience initialiser so an Option doesn't have to be created
          public convenience init(stopPointId: String, ids: [String], direction: Direction) {
              let options = Options(stopPointId: stopPointId, ids: ids, direction: direction)
              self.init(options: options)
          }

          public override var path: String {
              return super.path.replacingOccurrences(of: "{" + "stopPointId" + "}", with: "\(self.options.stopPointId)").replacingOccurrences(of: "{" + "ids" + "}", with: "\(self.options.ids.joined(separator: ","))")
          }

          public override var parameters: [String: Any] {
              var params: JSONDictionary = [:]
              params["direction"] = options.direction.encode()
              return params
          }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = [Prediction]

            /** OK */
            case success200([Prediction])

            public var success: [Prediction]? {
                switch self {
                case .success200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .success200(let response): return response
                }
            }

            public var statusCode: Int {
              switch self {
              case .success200: return 200
              }
            }

            public var successful: Bool {
              switch self {
              case .success200: return true
              }
            }

            public init(statusCode: Int, data: Data) throws {
                switch statusCode {
                case 200: self = try .success200(JSONDecoder.decode(data: data))
                default: throw APIError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
