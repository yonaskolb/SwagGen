//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class Credit: Person {

    /** The type of role the credit performed, e.g. actor. */
    #if swift(>=4.2)
    public enum Role: String, Codable, Equatable, CaseIterable {
    #else
    public enum Role: String, Codable {
    #endif
        case actor = "actor"
        case associateproducer = "associateproducer"
        case coactor = "coactor"
        case director = "director"
        case executiveproducer = "executiveproducer"
        case filminglocation = "filminglocation"
        case guest = "guest"
        case narrator = "narrator"
        case other = "other"
        case presenter = "presenter"
        case producer = "producer"
        case productmanager = "productmanager"
        case thememusicby = "thememusicby"
        case voice = "voice"
        case writer = "writer"
        #if swift(<4.2)
        public static let cases: [Role] = [
          .actor,
          .associateproducer,
          .coactor,
          .director,
          .executiveproducer,
          .filminglocation,
          .guest,
          .narrator,
          .other,
          .presenter,
          .producer,
          .productmanager,
          .thememusicby,
          .voice,
          .writer,
        ]
        #endif
    }

    /** The type of role the credit performed, e.g. actor. */
    public var role: Role

    /** The name of the character. */
    public var character: String?

    public init(name: String, path: String, role: Role, character: String? = nil) {
        self.role = role
        self.character = character
        super.init(name: name, path: path)
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        role = try container.decode("role")
        character = try container.decodeIfPresent("character")
        try super.init(from: decoder)
    }

    public override func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(role, forKey: "role")
        try container.encodeIfPresent(character, forKey: "character")
        try super.encode(to: encoder)
    }

    override public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? Credit else { return false }
      guard self.role == object.role else { return false }
      guard self.character == object.character else { return false }
      return super.isEqual(to: object)
    }
}
