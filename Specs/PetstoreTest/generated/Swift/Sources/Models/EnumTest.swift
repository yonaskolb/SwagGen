//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EnumTest: APIModel {

    #if swift(>=4.2)
    public enum EnumInteger: Int, Codable, Equatable, CaseIterable {
    #else
    public enum EnumInteger: Int, Codable {
    #endif
        case _1 = 1
        case negative1 = -1
        #if swift(<4.2)
        public static let cases: [EnumInteger] = [
          ._1,
          .negative1,
        ]
        #endif
    }

    #if swift(>=4.2)
    public enum EnumNumber: Double, Codable, Equatable, CaseIterable {
    #else
    public enum EnumNumber: Double, Codable {
    #endif
        case _11 = 1.1
        case negative12 = -1.2
        #if swift(<4.2)
        public static let cases: [EnumNumber] = [
          ._11,
          .negative12,
        ]
        #endif
    }

    #if swift(>=4.2)
    public enum EnumString: String, Codable, Equatable, CaseIterable {
    #else
    public enum EnumString: String, Codable {
    #endif
        case upper = "UPPER"
        case lower = "lower"
        case empty = ""
        #if swift(<4.2)
        public static let cases: [EnumString] = [
          .upper,
          .lower,
          .empty,
        ]
        #endif
    }

    public var enumInteger: EnumInteger?

    public var enumNumber: EnumNumber?

    public var enumString: EnumString?

    public var outerEnum: OuterEnum?

    public init(enumInteger: EnumInteger? = nil, enumNumber: EnumNumber? = nil, enumString: EnumString? = nil, outerEnum: OuterEnum? = nil) {
        self.enumInteger = enumInteger
        self.enumNumber = enumNumber
        self.enumString = enumString
        self.outerEnum = outerEnum
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        enumInteger = try container.decodeIfPresent("enum_integer")
        enumNumber = try container.decodeIfPresent("enum_number")
        enumString = try container.decodeIfPresent("enum_string")
        outerEnum = try container.decodeIfPresent("outerEnum")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encodeIfPresent(enumInteger, forKey: "enum_integer")
        try container.encodeIfPresent(enumNumber, forKey: "enum_number")
        try container.encodeIfPresent(enumString, forKey: "enum_string")
        try container.encodeIfPresent(outerEnum, forKey: "outerEnum")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EnumTest else { return false }
      guard self.enumInteger == object.enumInteger else { return false }
      guard self.enumNumber == object.enumNumber else { return false }
      guard self.enumString == object.enumString else { return false }
      guard self.outerEnum == object.outerEnum else { return false }
      return true
    }

    public static func == (lhs: EnumTest, rhs: EnumTest) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
