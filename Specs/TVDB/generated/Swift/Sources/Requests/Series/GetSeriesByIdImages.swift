//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension TVDB.Series {

    /** Returns a summary of the images for a particular series */
    public enum GetSeriesByIdImages {

        public static let service = APIService<Response>(id: "getSeriesByIdImages", tag: "Series", method: "GET", path: "/series/{id}/images", hasBody: false, securityRequirement: SecurityRequirement(type: "jwtToken", scopes: []))

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** ID of the series */
                public var id: Int

                /** Records are returned with the Episode name and Overview in the desired language, if it exists. If there is no translation for the given language, then the record is still returned but with empty values for the translated fields. */
                public var acceptLanguage: String?

                public init(id: Int, acceptLanguage: String? = nil) {
                    self.id = id
                    self.acceptLanguage = acceptLanguage
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: GetSeriesByIdImages.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(id: Int, acceptLanguage: String? = nil) {
                let options = Options(id: id, acceptLanguage: acceptLanguage)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "id" + "}", with: "\(self.options.id)")
            }

            override var headerParameters: [String: String] {
                var headers: [String: String] = [:]
                if let acceptLanguage = options.acceptLanguage {
                  headers["Accept-Language"] = acceptLanguage
                }
                return headers
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = SeriesImagesCounts

            /** A summary of the image types and counts available for the given series. */
            case status200(SeriesImagesCounts)

            /** Returned if your JWT token is missing or expired */
            case status401(NotAuthorized)

            /** Returned if the given series ID does not exist */
            case status404(NotFound)

            public var success: SeriesImagesCounts? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status401(let response): return response
                case .status404(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status401: return 401
                case .status404: return 404
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status401: return false
                case .status404: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(SeriesImagesCounts.self, from: data))
                case 401: self = try .status401(decoder.decode(NotAuthorized.self, from: data))
                case 404: self = try .status404(decoder.decode(NotFound.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
