//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension AppStoreConnect.Builds {

    public enum BuildsGetCollection {

        public static let service = APIService<Response>(id: "builds-get_collection", tag: "Builds", method: "GET", path: "/v1/builds", hasBody: false, securityRequirements: [SecurityRequirement(type: "itc-bearer-token", scopes: [])])

        /** filter by attribute 'betaAppReviewSubmission.betaReviewState' */
        public enum FilterbetaAppReviewSubmissionBetaReviewState: String, Codable, Equatable, CaseIterable {
            case waitingForReview = "WAITING_FOR_REVIEW"
            case inReview = "IN_REVIEW"
            case rejected = "REJECTED"
            case approved = "APPROVED"
        }

        /** filter by attribute 'preReleaseVersion.platform' */
        public enum FilterpreReleaseVersionPlatform: String, Codable, Equatable, CaseIterable {
            case ios = "IOS"
            case macOs = "MAC_OS"
            case tvOs = "TV_OS"
        }

        /** filter by attribute 'processingState' */
        public enum FilterprocessingState: String, Codable, Equatable, CaseIterable {
            case processing = "PROCESSING"
            case failed = "FAILED"
            case invalid = "INVALID"
            case valid = "VALID"
        }

        /** comma-separated list of sort expressions; resources will be sorted as specified */
        public enum Sort: String, Codable, Equatable, CaseIterable {
            case preReleaseVersion = "preReleaseVersion"
            case _preReleaseVersion = "-preReleaseVersion"
            case uploadedDate = "uploadedDate"
            case _uploadedDate = "-uploadedDate"
            case version = "version"
            case _version = "-version"
        }

        /** the fields to include for returned resources of type builds */
        public enum Fieldsbuilds: String, Codable, Equatable, CaseIterable {
            case app = "app"
            case appEncryptionDeclaration = "appEncryptionDeclaration"
            case appStoreVersion = "appStoreVersion"
            case betaAppReviewSubmission = "betaAppReviewSubmission"
            case betaBuildLocalizations = "betaBuildLocalizations"
            case betaGroups = "betaGroups"
            case buildBetaDetail = "buildBetaDetail"
            case diagnosticSignatures = "diagnosticSignatures"
            case expirationDate = "expirationDate"
            case expired = "expired"
            case iconAssetToken = "iconAssetToken"
            case icons = "icons"
            case individualTesters = "individualTesters"
            case minOsVersion = "minOsVersion"
            case perfPowerMetrics = "perfPowerMetrics"
            case preReleaseVersion = "preReleaseVersion"
            case processingState = "processingState"
            case uploadedDate = "uploadedDate"
            case usesNonExemptEncryption = "usesNonExemptEncryption"
            case version = "version"
        }

        /** comma-separated list of relationships to include */
        public enum Include: String, Codable, Equatable, CaseIterable {
            case app = "app"
            case appEncryptionDeclaration = "appEncryptionDeclaration"
            case appStoreVersion = "appStoreVersion"
            case betaAppReviewSubmission = "betaAppReviewSubmission"
            case betaBuildLocalizations = "betaBuildLocalizations"
            case buildBetaDetail = "buildBetaDetail"
            case icons = "icons"
            case individualTesters = "individualTesters"
            case preReleaseVersion = "preReleaseVersion"
        }

        /** the fields to include for returned resources of type appEncryptionDeclarations */
        public enum FieldsappEncryptionDeclarations: String, Codable, Equatable, CaseIterable {
            case app = "app"
            case appEncryptionDeclarationState = "appEncryptionDeclarationState"
            case availableOnFrenchStore = "availableOnFrenchStore"
            case builds = "builds"
            case codeValue = "codeValue"
            case containsProprietaryCryptography = "containsProprietaryCryptography"
            case containsThirdPartyCryptography = "containsThirdPartyCryptography"
            case documentName = "documentName"
            case documentType = "documentType"
            case documentUrl = "documentUrl"
            case exempt = "exempt"
            case platform = "platform"
            case uploadedDate = "uploadedDate"
            case usesEncryption = "usesEncryption"
        }

        /** the fields to include for returned resources of type betaAppReviewSubmissions */
        public enum FieldsbetaAppReviewSubmissions: String, Codable, Equatable, CaseIterable {
            case betaReviewState = "betaReviewState"
            case build = "build"
        }

        /** the fields to include for returned resources of type buildBetaDetails */
        public enum FieldsbuildBetaDetails: String, Codable, Equatable, CaseIterable {
            case autoNotifyEnabled = "autoNotifyEnabled"
            case build = "build"
            case externalBuildState = "externalBuildState"
            case internalBuildState = "internalBuildState"
        }

        /** the fields to include for returned resources of type buildIcons */
        public enum FieldsbuildIcons: String, Codable, Equatable, CaseIterable {
            case iconAsset = "iconAsset"
            case iconType = "iconType"
        }

        /** the fields to include for returned resources of type perfPowerMetrics */
        public enum FieldsperfPowerMetrics: String, Codable, Equatable, CaseIterable {
            case deviceType = "deviceType"
            case metricType = "metricType"
            case platform = "platform"
        }

        /** the fields to include for returned resources of type preReleaseVersions */
        public enum FieldspreReleaseVersions: String, Codable, Equatable, CaseIterable {
            case app = "app"
            case builds = "builds"
            case platform = "platform"
            case version = "version"
        }

        /** the fields to include for returned resources of type appStoreVersions */
        public enum FieldsappStoreVersions: String, Codable, Equatable, CaseIterable {
            case ageRatingDeclaration = "ageRatingDeclaration"
            case app = "app"
            case appStoreReviewDetail = "appStoreReviewDetail"
            case appStoreState = "appStoreState"
            case appStoreVersionLocalizations = "appStoreVersionLocalizations"
            case appStoreVersionPhasedRelease = "appStoreVersionPhasedRelease"
            case appStoreVersionSubmission = "appStoreVersionSubmission"
            case build = "build"
            case copyright = "copyright"
            case createdDate = "createdDate"
            case downloadable = "downloadable"
            case earliestReleaseDate = "earliestReleaseDate"
            case idfaDeclaration = "idfaDeclaration"
            case platform = "platform"
            case releaseType = "releaseType"
            case routingAppCoverage = "routingAppCoverage"
            case usesIdfa = "usesIdfa"
            case versionString = "versionString"
        }

        /** the fields to include for returned resources of type diagnosticSignatures */
        public enum FieldsdiagnosticSignatures: String, Codable, Equatable, CaseIterable {
            case diagnosticType = "diagnosticType"
            case logs = "logs"
            case signature = "signature"
            case weight = "weight"
        }

        /** the fields to include for returned resources of type betaTesters */
        public enum FieldsbetaTesters: String, Codable, Equatable, CaseIterable {
            case apps = "apps"
            case betaGroups = "betaGroups"
            case builds = "builds"
            case email = "email"
            case firstName = "firstName"
            case inviteType = "inviteType"
            case lastName = "lastName"
        }

        /** the fields to include for returned resources of type betaBuildLocalizations */
        public enum FieldsbetaBuildLocalizations: String, Codable, Equatable, CaseIterable {
            case build = "build"
            case locale = "locale"
            case whatsNew = "whatsNew"
        }

        /** the fields to include for returned resources of type apps */
        public enum Fieldsapps: String, Codable, Equatable, CaseIterable {
            case appInfos = "appInfos"
            case appStoreVersions = "appStoreVersions"
            case availableInNewTerritories = "availableInNewTerritories"
            case availableTerritories = "availableTerritories"
            case betaAppLocalizations = "betaAppLocalizations"
            case betaAppReviewDetail = "betaAppReviewDetail"
            case betaGroups = "betaGroups"
            case betaLicenseAgreement = "betaLicenseAgreement"
            case betaTesters = "betaTesters"
            case builds = "builds"
            case bundleId = "bundleId"
            case contentRightsDeclaration = "contentRightsDeclaration"
            case endUserLicenseAgreement = "endUserLicenseAgreement"
            case gameCenterEnabledVersions = "gameCenterEnabledVersions"
            case inAppPurchases = "inAppPurchases"
            case isOrEverWasMadeForKids = "isOrEverWasMadeForKids"
            case name = "name"
            case perfPowerMetrics = "perfPowerMetrics"
            case preOrder = "preOrder"
            case preReleaseVersions = "preReleaseVersions"
            case prices = "prices"
            case primaryLocale = "primaryLocale"
            case sku = "sku"
        }

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** filter by attribute 'betaAppReviewSubmission.betaReviewState' */
                public var filterbetaAppReviewSubmissionBetaReviewState: [FilterbetaAppReviewSubmissionBetaReviewState]?

                /** filter by attribute 'expired' */
                public var filterexpired: [String]?

                /** filter by attribute 'preReleaseVersion.platform' */
                public var filterpreReleaseVersionPlatform: [FilterpreReleaseVersionPlatform]?

                /** filter by attribute 'preReleaseVersion.version' */
                public var filterpreReleaseVersionVersion: [String]?

                /** filter by attribute 'processingState' */
                public var filterprocessingState: [FilterprocessingState]?

                /** filter by attribute 'usesNonExemptEncryption' */
                public var filterusesNonExemptEncryption: [String]?

                /** filter by attribute 'version' */
                public var filterversion: [String]?

                /** filter by id(s) of related 'app' */
                public var filterapp: [String]?

                /** filter by id(s) of related 'appStoreVersion' */
                public var filterappStoreVersion: [String]?

                /** filter by id(s) of related 'betaGroups' */
                public var filterbetaGroups: [String]?

                /** filter by id(s) of related 'preReleaseVersion' */
                public var filterpreReleaseVersion: [String]?

                /** filter by id(s) */
                public var filterid: [String]?

                /** comma-separated list of sort expressions; resources will be sorted as specified */
                public var sort: [Sort]?

                /** the fields to include for returned resources of type builds */
                public var fieldsbuilds: [Fieldsbuilds]?

                /** maximum resources per page */
                public var limit: Int?

                /** comma-separated list of relationships to include */
                public var include: [Include]?

                /** the fields to include for returned resources of type appEncryptionDeclarations */
                public var fieldsappEncryptionDeclarations: [FieldsappEncryptionDeclarations]?

                /** the fields to include for returned resources of type betaAppReviewSubmissions */
                public var fieldsbetaAppReviewSubmissions: [FieldsbetaAppReviewSubmissions]?

                /** the fields to include for returned resources of type buildBetaDetails */
                public var fieldsbuildBetaDetails: [FieldsbuildBetaDetails]?

                /** the fields to include for returned resources of type buildIcons */
                public var fieldsbuildIcons: [FieldsbuildIcons]?

                /** the fields to include for returned resources of type perfPowerMetrics */
                public var fieldsperfPowerMetrics: [FieldsperfPowerMetrics]?

                /** the fields to include for returned resources of type preReleaseVersions */
                public var fieldspreReleaseVersions: [FieldspreReleaseVersions]?

                /** the fields to include for returned resources of type appStoreVersions */
                public var fieldsappStoreVersions: [FieldsappStoreVersions]?

                /** the fields to include for returned resources of type diagnosticSignatures */
                public var fieldsdiagnosticSignatures: [FieldsdiagnosticSignatures]?

                /** the fields to include for returned resources of type betaTesters */
                public var fieldsbetaTesters: [FieldsbetaTesters]?

                /** the fields to include for returned resources of type betaBuildLocalizations */
                public var fieldsbetaBuildLocalizations: [FieldsbetaBuildLocalizations]?

                /** the fields to include for returned resources of type apps */
                public var fieldsapps: [Fieldsapps]?

                /** maximum number of related betaBuildLocalizations returned (when they are included) */
                public var limitbetaBuildLocalizations: Int?

                /** maximum number of related icons returned (when they are included) */
                public var limiticons: Int?

                /** maximum number of related individualTesters returned (when they are included) */
                public var limitindividualTesters: Int?

                public init(filterbetaAppReviewSubmissionBetaReviewState: [FilterbetaAppReviewSubmissionBetaReviewState]? = nil, filterexpired: [String]? = nil, filterpreReleaseVersionPlatform: [FilterpreReleaseVersionPlatform]? = nil, filterpreReleaseVersionVersion: [String]? = nil, filterprocessingState: [FilterprocessingState]? = nil, filterusesNonExemptEncryption: [String]? = nil, filterversion: [String]? = nil, filterapp: [String]? = nil, filterappStoreVersion: [String]? = nil, filterbetaGroups: [String]? = nil, filterpreReleaseVersion: [String]? = nil, filterid: [String]? = nil, sort: [Sort]? = nil, fieldsbuilds: [Fieldsbuilds]? = nil, limit: Int? = nil, include: [Include]? = nil, fieldsappEncryptionDeclarations: [FieldsappEncryptionDeclarations]? = nil, fieldsbetaAppReviewSubmissions: [FieldsbetaAppReviewSubmissions]? = nil, fieldsbuildBetaDetails: [FieldsbuildBetaDetails]? = nil, fieldsbuildIcons: [FieldsbuildIcons]? = nil, fieldsperfPowerMetrics: [FieldsperfPowerMetrics]? = nil, fieldspreReleaseVersions: [FieldspreReleaseVersions]? = nil, fieldsappStoreVersions: [FieldsappStoreVersions]? = nil, fieldsdiagnosticSignatures: [FieldsdiagnosticSignatures]? = nil, fieldsbetaTesters: [FieldsbetaTesters]? = nil, fieldsbetaBuildLocalizations: [FieldsbetaBuildLocalizations]? = nil, fieldsapps: [Fieldsapps]? = nil, limitbetaBuildLocalizations: Int? = nil, limiticons: Int? = nil, limitindividualTesters: Int? = nil) {
                    self.filterbetaAppReviewSubmissionBetaReviewState = filterbetaAppReviewSubmissionBetaReviewState
                    self.filterexpired = filterexpired
                    self.filterpreReleaseVersionPlatform = filterpreReleaseVersionPlatform
                    self.filterpreReleaseVersionVersion = filterpreReleaseVersionVersion
                    self.filterprocessingState = filterprocessingState
                    self.filterusesNonExemptEncryption = filterusesNonExemptEncryption
                    self.filterversion = filterversion
                    self.filterapp = filterapp
                    self.filterappStoreVersion = filterappStoreVersion
                    self.filterbetaGroups = filterbetaGroups
                    self.filterpreReleaseVersion = filterpreReleaseVersion
                    self.filterid = filterid
                    self.sort = sort
                    self.fieldsbuilds = fieldsbuilds
                    self.limit = limit
                    self.include = include
                    self.fieldsappEncryptionDeclarations = fieldsappEncryptionDeclarations
                    self.fieldsbetaAppReviewSubmissions = fieldsbetaAppReviewSubmissions
                    self.fieldsbuildBetaDetails = fieldsbuildBetaDetails
                    self.fieldsbuildIcons = fieldsbuildIcons
                    self.fieldsperfPowerMetrics = fieldsperfPowerMetrics
                    self.fieldspreReleaseVersions = fieldspreReleaseVersions
                    self.fieldsappStoreVersions = fieldsappStoreVersions
                    self.fieldsdiagnosticSignatures = fieldsdiagnosticSignatures
                    self.fieldsbetaTesters = fieldsbetaTesters
                    self.fieldsbetaBuildLocalizations = fieldsbetaBuildLocalizations
                    self.fieldsapps = fieldsapps
                    self.limitbetaBuildLocalizations = limitbetaBuildLocalizations
                    self.limiticons = limiticons
                    self.limitindividualTesters = limitindividualTesters
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: BuildsGetCollection.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(filterbetaAppReviewSubmissionBetaReviewState: [FilterbetaAppReviewSubmissionBetaReviewState]? = nil, filterexpired: [String]? = nil, filterpreReleaseVersionPlatform: [FilterpreReleaseVersionPlatform]? = nil, filterpreReleaseVersionVersion: [String]? = nil, filterprocessingState: [FilterprocessingState]? = nil, filterusesNonExemptEncryption: [String]? = nil, filterversion: [String]? = nil, filterapp: [String]? = nil, filterappStoreVersion: [String]? = nil, filterbetaGroups: [String]? = nil, filterpreReleaseVersion: [String]? = nil, filterid: [String]? = nil, sort: [Sort]? = nil, fieldsbuilds: [Fieldsbuilds]? = nil, limit: Int? = nil, include: [Include]? = nil, fieldsappEncryptionDeclarations: [FieldsappEncryptionDeclarations]? = nil, fieldsbetaAppReviewSubmissions: [FieldsbetaAppReviewSubmissions]? = nil, fieldsbuildBetaDetails: [FieldsbuildBetaDetails]? = nil, fieldsbuildIcons: [FieldsbuildIcons]? = nil, fieldsperfPowerMetrics: [FieldsperfPowerMetrics]? = nil, fieldspreReleaseVersions: [FieldspreReleaseVersions]? = nil, fieldsappStoreVersions: [FieldsappStoreVersions]? = nil, fieldsdiagnosticSignatures: [FieldsdiagnosticSignatures]? = nil, fieldsbetaTesters: [FieldsbetaTesters]? = nil, fieldsbetaBuildLocalizations: [FieldsbetaBuildLocalizations]? = nil, fieldsapps: [Fieldsapps]? = nil, limitbetaBuildLocalizations: Int? = nil, limiticons: Int? = nil, limitindividualTesters: Int? = nil) {
                let options = Options(filterbetaAppReviewSubmissionBetaReviewState: filterbetaAppReviewSubmissionBetaReviewState, filterexpired: filterexpired, filterpreReleaseVersionPlatform: filterpreReleaseVersionPlatform, filterpreReleaseVersionVersion: filterpreReleaseVersionVersion, filterprocessingState: filterprocessingState, filterusesNonExemptEncryption: filterusesNonExemptEncryption, filterversion: filterversion, filterapp: filterapp, filterappStoreVersion: filterappStoreVersion, filterbetaGroups: filterbetaGroups, filterpreReleaseVersion: filterpreReleaseVersion, filterid: filterid, sort: sort, fieldsbuilds: fieldsbuilds, limit: limit, include: include, fieldsappEncryptionDeclarations: fieldsappEncryptionDeclarations, fieldsbetaAppReviewSubmissions: fieldsbetaAppReviewSubmissions, fieldsbuildBetaDetails: fieldsbuildBetaDetails, fieldsbuildIcons: fieldsbuildIcons, fieldsperfPowerMetrics: fieldsperfPowerMetrics, fieldspreReleaseVersions: fieldspreReleaseVersions, fieldsappStoreVersions: fieldsappStoreVersions, fieldsdiagnosticSignatures: fieldsdiagnosticSignatures, fieldsbetaTesters: fieldsbetaTesters, fieldsbetaBuildLocalizations: fieldsbetaBuildLocalizations, fieldsapps: fieldsapps, limitbetaBuildLocalizations: limitbetaBuildLocalizations, limiticons: limiticons, limitindividualTesters: limitindividualTesters)
                self.init(options: options)
            }

            public override var queryParameters: [String: Any] {
                var params: [String: Any] = [:]
                if let filterbetaAppReviewSubmissionBetaReviewState = options.filterbetaAppReviewSubmissionBetaReviewState?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["filter[betaAppReviewSubmission.betaReviewState]"] = filterbetaAppReviewSubmissionBetaReviewState
                }
                if let filterexpired = options.filterexpired?.joined(separator: ",") {
                  params["filter[expired]"] = filterexpired
                }
                if let filterpreReleaseVersionPlatform = options.filterpreReleaseVersionPlatform?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["filter[preReleaseVersion.platform]"] = filterpreReleaseVersionPlatform
                }
                if let filterpreReleaseVersionVersion = options.filterpreReleaseVersionVersion?.joined(separator: ",") {
                  params["filter[preReleaseVersion.version]"] = filterpreReleaseVersionVersion
                }
                if let filterprocessingState = options.filterprocessingState?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["filter[processingState]"] = filterprocessingState
                }
                if let filterusesNonExemptEncryption = options.filterusesNonExemptEncryption?.joined(separator: ",") {
                  params["filter[usesNonExemptEncryption]"] = filterusesNonExemptEncryption
                }
                if let filterversion = options.filterversion?.joined(separator: ",") {
                  params["filter[version]"] = filterversion
                }
                if let filterapp = options.filterapp?.joined(separator: ",") {
                  params["filter[app]"] = filterapp
                }
                if let filterappStoreVersion = options.filterappStoreVersion?.joined(separator: ",") {
                  params["filter[appStoreVersion]"] = filterappStoreVersion
                }
                if let filterbetaGroups = options.filterbetaGroups?.joined(separator: ",") {
                  params["filter[betaGroups]"] = filterbetaGroups
                }
                if let filterpreReleaseVersion = options.filterpreReleaseVersion?.joined(separator: ",") {
                  params["filter[preReleaseVersion]"] = filterpreReleaseVersion
                }
                if let filterid = options.filterid?.joined(separator: ",") {
                  params["filter[id]"] = filterid
                }
                if let sort = options.sort?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["sort"] = sort
                }
                if let fieldsbuilds = options.fieldsbuilds?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[builds]"] = fieldsbuilds
                }
                if let limit = options.limit {
                  params["limit"] = limit
                }
                if let include = options.include?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["include"] = include
                }
                if let fieldsappEncryptionDeclarations = options.fieldsappEncryptionDeclarations?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[appEncryptionDeclarations]"] = fieldsappEncryptionDeclarations
                }
                if let fieldsbetaAppReviewSubmissions = options.fieldsbetaAppReviewSubmissions?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[betaAppReviewSubmissions]"] = fieldsbetaAppReviewSubmissions
                }
                if let fieldsbuildBetaDetails = options.fieldsbuildBetaDetails?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[buildBetaDetails]"] = fieldsbuildBetaDetails
                }
                if let fieldsbuildIcons = options.fieldsbuildIcons?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[buildIcons]"] = fieldsbuildIcons
                }
                if let fieldsperfPowerMetrics = options.fieldsperfPowerMetrics?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[perfPowerMetrics]"] = fieldsperfPowerMetrics
                }
                if let fieldspreReleaseVersions = options.fieldspreReleaseVersions?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[preReleaseVersions]"] = fieldspreReleaseVersions
                }
                if let fieldsappStoreVersions = options.fieldsappStoreVersions?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[appStoreVersions]"] = fieldsappStoreVersions
                }
                if let fieldsdiagnosticSignatures = options.fieldsdiagnosticSignatures?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[diagnosticSignatures]"] = fieldsdiagnosticSignatures
                }
                if let fieldsbetaTesters = options.fieldsbetaTesters?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[betaTesters]"] = fieldsbetaTesters
                }
                if let fieldsbetaBuildLocalizations = options.fieldsbetaBuildLocalizations?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[betaBuildLocalizations]"] = fieldsbetaBuildLocalizations
                }
                if let fieldsapps = options.fieldsapps?.encode().map({ String(describing: $0) }).joined(separator: ",") {
                  params["fields[apps]"] = fieldsapps
                }
                if let limitbetaBuildLocalizations = options.limitbetaBuildLocalizations {
                  params["limit[betaBuildLocalizations]"] = limitbetaBuildLocalizations
                }
                if let limiticons = options.limiticons {
                  params["limit[icons]"] = limiticons
                }
                if let limitindividualTesters = options.limitindividualTesters {
                  params["limit[individualTesters]"] = limitindividualTesters
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = BuildsResponse

            /** List of Builds */
            case status200(BuildsResponse)

            /** Parameter error(s) */
            case status400(ErrorResponse)

            /** Forbidden error */
            case status403(ErrorResponse)

            public var success: BuildsResponse? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var failure: ErrorResponse? {
                switch self {
                case .status400(let response): return response
                case .status403(let response): return response
                default: return nil
                }
            }

            /// either success or failure value. Success is anything in the 200..<300 status code range
            public var responseResult: APIResponseResult<BuildsResponse, ErrorResponse> {
                if let successValue = success {
                    return .success(successValue)
                } else if let failureValue = failure {
                    return .failure(failureValue)
                } else {
                    fatalError("Response does not have success or failure response")
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status400(let response): return response
                case .status403(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status400: return 400
                case .status403: return 403
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status400: return false
                case .status403: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(BuildsResponse.self, from: data))
                case 400: self = try .status400(decoder.decode(ErrorResponse.self, from: data))
                case 403: self = try .status403(decoder.decode(ErrorResponse.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
