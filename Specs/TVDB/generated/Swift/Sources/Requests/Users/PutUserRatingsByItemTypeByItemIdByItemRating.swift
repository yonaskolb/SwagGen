//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension TVDB.Users {

    /** This route updates a given rating of a given type. */
    public enum PutUserRatingsByItemTypeByItemIdByItemRating {

        public static let service = APIService<Response>(id: "putUserRatingsByItemTypeByItemIdByItemRating", tag: "Users", method: "PUT", path: "/user/ratings/{itemType}/{itemId}/{itemRating}", hasBody: false, securityRequirement: SecurityRequirement(type: "jwtToken", scopes: []))

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** Item to update. Can be either 'series', 'episode', or 'image' */
                public var itemType: String

                /** ID of the ratings record that you wish to modify */
                public var itemId: Int

                /** The updated rating number */
                public var itemRating: Int

                public init(itemType: String, itemId: Int, itemRating: Int) {
                    self.itemType = itemType
                    self.itemId = itemId
                    self.itemRating = itemRating
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: PutUserRatingsByItemTypeByItemIdByItemRating.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(itemType: String, itemId: Int, itemRating: Int) {
                let options = Options(itemType: itemType, itemId: itemId, itemRating: itemRating)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "itemType" + "}", with: "\(self.options.itemType)").replacingOccurrences(of: "{" + "itemId" + "}", with: "\(self.options.itemId)").replacingOccurrences(of: "{" + "itemRating" + "}", with: "\(self.options.itemRating)")
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = UserRatingsDataNoLinks

            /** Update OK if the update was successful */
            case status200(UserRatingsDataNoLinks)

            /** Returned if your JWT token is missing or expired */
            case status401(NotAuthorized)

            /** Returned if no rating is found that matches your given parameters */
            case status404(NotFound)

            public var success: UserRatingsDataNoLinks? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                case .status401(let response): return response
                case .status404(let response): return response
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status401: return 401
                case .status404: return 404
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status401: return false
                case .status404: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(UserRatingsDataNoLinks.self, from: data))
                case 401: self = try .status401(decoder.decode(NotAuthorized.self, from: data))
                case 404: self = try .status404(decoder.decode(NotFound.self, from: data))
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
