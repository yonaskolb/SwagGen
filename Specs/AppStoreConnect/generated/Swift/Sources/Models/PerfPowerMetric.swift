//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class PerfPowerMetric: APIModel {

    public enum `Type`: String, Codable, Equatable, CaseIterable {
        case perfPowerMetrics = "perfPowerMetrics"
    }

    public var links: ResourceLinks

    public var id: String

    public var type: `Type`

    public var attributes: Attributes?

    public class Attributes: APIModel {

        public enum MetricType: String, Codable, Equatable, CaseIterable {
            case disk = "DISK"
            case hang = "HANG"
            case battery = "BATTERY"
            case launch = "LAUNCH"
            case memory = "MEMORY"
            case animation = "ANIMATION"
        }

        public enum Platform: String, Codable, Equatable, CaseIterable {
            case ios = "IOS"
        }

        public var deviceType: String?

        public var metricType: MetricType?

        public var platform: Platform?

        public init(deviceType: String? = nil, metricType: MetricType? = nil, platform: Platform? = nil) {
            self.deviceType = deviceType
            self.metricType = metricType
            self.platform = platform
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            deviceType = try container.decodeIfPresent("deviceType")
            metricType = try container.decodeIfPresent("metricType")
            platform = try container.decodeIfPresent("platform")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encodeIfPresent(deviceType, forKey: "deviceType")
            try container.encodeIfPresent(metricType, forKey: "metricType")
            try container.encodeIfPresent(platform, forKey: "platform")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Attributes else { return false }
          guard self.deviceType == object.deviceType else { return false }
          guard self.metricType == object.metricType else { return false }
          guard self.platform == object.platform else { return false }
          return true
        }

        public static func == (lhs: Attributes, rhs: Attributes) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(links: ResourceLinks, id: String, type: `Type`, attributes: Attributes? = nil) {
        self.links = links
        self.id = id
        self.type = type
        self.attributes = attributes
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decode("links")
        id = try container.decode("id")
        type = try container.decode("type")
        attributes = try container.decodeIfPresent("attributes")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(links, forKey: "links")
        try container.encode(id, forKey: "id")
        try container.encode(type, forKey: "type")
        try container.encodeIfPresent(attributes, forKey: "attributes")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PerfPowerMetric else { return false }
      guard self.links == object.links else { return false }
      guard self.id == object.id else { return false }
      guard self.type == object.type else { return false }
      guard self.attributes == object.attributes else { return false }
      return true
    }

    public static func == (lhs: PerfPowerMetric, rhs: PerfPowerMetric) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
