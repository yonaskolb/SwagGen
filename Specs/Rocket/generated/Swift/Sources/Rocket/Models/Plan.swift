//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation
import JSONUtilities

public class Plan: JSONDecodable, JSONEncodable, PrettyPrintable {

    /** The type of plan. */
    public enum `Type`: String {
        case free = "Free"
        case subscription = "Subscription"

        public static let cases: [`Type`] = [
          .free,
          .subscription,
        ]
    }

    /** The revenue type a plan targets. */
    public enum RevenueType: String {
        case tvod = "TVOD"
        case svod = "SVOD"

        public static let cases: [RevenueType] = [
          .tvod,
          .svod,
        ]
    }

    /** The type of billing period used. */
    public enum BillingPeriodType: String {
        case week = "week"
        case month = "month"
        case year = "year"
        case none = "none"

        public static let cases: [BillingPeriodType] = [
          .week,
          .month,
          .year,
          .none,
        ]
    }

    /** The identifier of a plan. */
    public var id: String

    /** The title of a plan. */
    public var title: String

    /** The short tagline for a plan. */
    public var tagline: String

    /** The type of plan. */
    public var type: `Type`

    /** True if a plan should be highlighted as featured, false if not. */
    public var isFeatured: Bool

    /** True if a plan is active, false if its retired. */
    public var isActive: Bool

    /** True if a plan should not be presented in the primary plan options, false if not. */
    public var isPrivate: Bool

    /** The revenue type a plan targets. */
    public var revenueType: RevenueType

    /** The subscription code a plan targets. */
    public var subscriptionCode: String

    /** An alias for a plan. */
    public var alias: String

    /** The list of benefits to display for a plan. */
    public var benefits: [String]

    /** The type of billing period used. */
    public var billingPeriodType: BillingPeriodType

    /** Given the `billingPeriodType` this is how frequently it will run. e.g. every 2 weeks. */
    public var billingPeriodFrequency: Int

    /** True if a plan has a trial period, false if not. */
    public var hasTrialPeriod: Bool

    /** How many days a trial period runs for a plan. Only valid if `hasTrialPeriod` is true. */
    public var trialPeriodDays: Int

    /** The terms and conditions for a plan. */
    public var termsAndConditions: String

    /** The currency a plan is offered in. */
    public var currency: String

    /** A map of custom fields defined by a curator for a plan. */
    public var customFields: [String: Any]?

    /** The price of a plan. If a free plan then undefined. */
    public var price: Float?

    public init(id: String, title: String, tagline: String, type: `Type`, isFeatured: Bool, isActive: Bool, isPrivate: Bool, revenueType: RevenueType, subscriptionCode: String, alias: String, benefits: [String], billingPeriodType: BillingPeriodType, billingPeriodFrequency: Int, hasTrialPeriod: Bool, trialPeriodDays: Int, termsAndConditions: String, currency: String, customFields: [String: Any]? = nil, price: Float? = nil) {
        self.id = id
        self.title = title
        self.tagline = tagline
        self.type = type
        self.isFeatured = isFeatured
        self.isActive = isActive
        self.isPrivate = isPrivate
        self.revenueType = revenueType
        self.subscriptionCode = subscriptionCode
        self.alias = alias
        self.benefits = benefits
        self.billingPeriodType = billingPeriodType
        self.billingPeriodFrequency = billingPeriodFrequency
        self.hasTrialPeriod = hasTrialPeriod
        self.trialPeriodDays = trialPeriodDays
        self.termsAndConditions = termsAndConditions
        self.currency = currency
        self.customFields = customFields
        self.price = price
    }

    public required init(jsonDictionary: JSONDictionary) throws {
        id = try jsonDictionary.json(atKeyPath: "id")
        title = try jsonDictionary.json(atKeyPath: "title")
        tagline = try jsonDictionary.json(atKeyPath: "tagline")
        type = try jsonDictionary.json(atKeyPath: "type")
        isFeatured = try jsonDictionary.json(atKeyPath: "isFeatured")
        isActive = try jsonDictionary.json(atKeyPath: "isActive")
        isPrivate = try jsonDictionary.json(atKeyPath: "isPrivate")
        revenueType = try jsonDictionary.json(atKeyPath: "revenueType")
        subscriptionCode = try jsonDictionary.json(atKeyPath: "subscriptionCode")
        alias = try jsonDictionary.json(atKeyPath: "alias")
        benefits = try jsonDictionary.json(atKeyPath: "benefits")
        billingPeriodType = try jsonDictionary.json(atKeyPath: "billingPeriodType")
        billingPeriodFrequency = try jsonDictionary.json(atKeyPath: "billingPeriodFrequency")
        hasTrialPeriod = try jsonDictionary.json(atKeyPath: "hasTrialPeriod")
        trialPeriodDays = try jsonDictionary.json(atKeyPath: "trialPeriodDays")
        termsAndConditions = try jsonDictionary.json(atKeyPath: "termsAndConditions")
        currency = try jsonDictionary.json(atKeyPath: "currency")
        customFields = jsonDictionary.json(atKeyPath: "customFields")
        price = jsonDictionary.json(atKeyPath: "price")
    }

    public func encode() -> JSONDictionary {
        var dictionary: JSONDictionary = [:]
        dictionary["id"] = id
        dictionary["title"] = title
        dictionary["tagline"] = tagline
        dictionary["type"] = type.encode()
        dictionary["isFeatured"] = isFeatured
        dictionary["isActive"] = isActive
        dictionary["isPrivate"] = isPrivate
        dictionary["revenueType"] = revenueType.encode()
        dictionary["subscriptionCode"] = subscriptionCode
        dictionary["alias"] = alias
        dictionary["benefits"] = benefits
        dictionary["billingPeriodType"] = billingPeriodType.encode()
        dictionary["billingPeriodFrequency"] = billingPeriodFrequency
        dictionary["hasTrialPeriod"] = hasTrialPeriod
        dictionary["trialPeriodDays"] = trialPeriodDays
        dictionary["termsAndConditions"] = termsAndConditions
        dictionary["currency"] = currency
        if let customFields = customFields {
            dictionary["customFields"] = customFields
        }
        if let price = price {
            dictionary["price"] = price
        }
        return dictionary
    }

    /// pretty prints all properties including nested models
    public var prettyPrinted: String {
        return "\(type(of: self)):\n\(encode().recursivePrint(indentIndex: 1))"
    }
}
