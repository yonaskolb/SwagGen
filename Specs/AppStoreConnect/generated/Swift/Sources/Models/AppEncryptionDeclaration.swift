//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class AppEncryptionDeclaration: APIModel {

    public enum `Type`: String, Codable, Equatable, CaseIterable {
        case appEncryptionDeclarations = "appEncryptionDeclarations"
    }

    public var links: ResourceLinks

    public var id: String

    public var type: `Type`

    public var attributes: Attributes?

    public var relationships: Relationships?

    public class Attributes: APIModel {

        public var appEncryptionDeclarationState: AppEncryptionDeclarationState?

        public var availableOnFrenchStore: Bool?

        public var codeValue: String?

        public var containsProprietaryCryptography: Bool?

        public var containsThirdPartyCryptography: Bool?

        public var documentName: String?

        public var documentType: String?

        public var documentUrl: String?

        public var exempt: Bool?

        public var platform: Platform?

        public var uploadedDate: DateTime?

        public var usesEncryption: Bool?

        public init(appEncryptionDeclarationState: AppEncryptionDeclarationState? = nil, availableOnFrenchStore: Bool? = nil, codeValue: String? = nil, containsProprietaryCryptography: Bool? = nil, containsThirdPartyCryptography: Bool? = nil, documentName: String? = nil, documentType: String? = nil, documentUrl: String? = nil, exempt: Bool? = nil, platform: Platform? = nil, uploadedDate: DateTime? = nil, usesEncryption: Bool? = nil) {
            self.appEncryptionDeclarationState = appEncryptionDeclarationState
            self.availableOnFrenchStore = availableOnFrenchStore
            self.codeValue = codeValue
            self.containsProprietaryCryptography = containsProprietaryCryptography
            self.containsThirdPartyCryptography = containsThirdPartyCryptography
            self.documentName = documentName
            self.documentType = documentType
            self.documentUrl = documentUrl
            self.exempt = exempt
            self.platform = platform
            self.uploadedDate = uploadedDate
            self.usesEncryption = usesEncryption
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            appEncryptionDeclarationState = try container.decodeIfPresent("appEncryptionDeclarationState")
            availableOnFrenchStore = try container.decodeIfPresent("availableOnFrenchStore")
            codeValue = try container.decodeIfPresent("codeValue")
            containsProprietaryCryptography = try container.decodeIfPresent("containsProprietaryCryptography")
            containsThirdPartyCryptography = try container.decodeIfPresent("containsThirdPartyCryptography")
            documentName = try container.decodeIfPresent("documentName")
            documentType = try container.decodeIfPresent("documentType")
            documentUrl = try container.decodeIfPresent("documentUrl")
            exempt = try container.decodeIfPresent("exempt")
            platform = try container.decodeIfPresent("platform")
            uploadedDate = try container.decodeIfPresent("uploadedDate")
            usesEncryption = try container.decodeIfPresent("usesEncryption")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encodeIfPresent(appEncryptionDeclarationState, forKey: "appEncryptionDeclarationState")
            try container.encodeIfPresent(availableOnFrenchStore, forKey: "availableOnFrenchStore")
            try container.encodeIfPresent(codeValue, forKey: "codeValue")
            try container.encodeIfPresent(containsProprietaryCryptography, forKey: "containsProprietaryCryptography")
            try container.encodeIfPresent(containsThirdPartyCryptography, forKey: "containsThirdPartyCryptography")
            try container.encodeIfPresent(documentName, forKey: "documentName")
            try container.encodeIfPresent(documentType, forKey: "documentType")
            try container.encodeIfPresent(documentUrl, forKey: "documentUrl")
            try container.encodeIfPresent(exempt, forKey: "exempt")
            try container.encodeIfPresent(platform, forKey: "platform")
            try container.encodeIfPresent(uploadedDate, forKey: "uploadedDate")
            try container.encodeIfPresent(usesEncryption, forKey: "usesEncryption")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Attributes else { return false }
          guard self.appEncryptionDeclarationState == object.appEncryptionDeclarationState else { return false }
          guard self.availableOnFrenchStore == object.availableOnFrenchStore else { return false }
          guard self.codeValue == object.codeValue else { return false }
          guard self.containsProprietaryCryptography == object.containsProprietaryCryptography else { return false }
          guard self.containsThirdPartyCryptography == object.containsThirdPartyCryptography else { return false }
          guard self.documentName == object.documentName else { return false }
          guard self.documentType == object.documentType else { return false }
          guard self.documentUrl == object.documentUrl else { return false }
          guard self.exempt == object.exempt else { return false }
          guard self.platform == object.platform else { return false }
          guard self.uploadedDate == object.uploadedDate else { return false }
          guard self.usesEncryption == object.usesEncryption else { return false }
          return true
        }

        public static func == (lhs: Attributes, rhs: Attributes) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public class Relationships: APIModel {

        public var app: App?

        public class App: APIModel {

            public var data: DataType?

            public var links: Links?

            public class DataType: APIModel {

                public enum `Type`: String, Codable, Equatable, CaseIterable {
                    case apps = "apps"
                }

                public var id: String

                public var type: `Type`

                public init(id: String, type: `Type`) {
                    self.id = id
                    self.type = type
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    id = try container.decode("id")
                    type = try container.decode("type")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encode(id, forKey: "id")
                    try container.encode(type, forKey: "type")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? DataType else { return false }
                  guard self.id == object.id else { return false }
                  guard self.type == object.type else { return false }
                  return true
                }

                public static func == (lhs: DataType, rhs: DataType) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            public class Links: APIModel {

                public var related: String?

                public var _self: String?

                public init(related: String? = nil, _self: String? = nil) {
                    self.related = related
                    self._self = _self
                }

                public required init(from decoder: Decoder) throws {
                    let container = try decoder.container(keyedBy: StringCodingKey.self)

                    related = try container.decodeIfPresent("related")
                    _self = try container.decodeIfPresent("self")
                }

                public func encode(to encoder: Encoder) throws {
                    var container = encoder.container(keyedBy: StringCodingKey.self)

                    try container.encodeIfPresent(related, forKey: "related")
                    try container.encodeIfPresent(_self, forKey: "self")
                }

                public func isEqual(to object: Any?) -> Bool {
                  guard let object = object as? Links else { return false }
                  guard self.related == object.related else { return false }
                  guard self._self == object._self else { return false }
                  return true
                }

                public static func == (lhs: Links, rhs: Links) -> Bool {
                    return lhs.isEqual(to: rhs)
                }
            }

            public init(data: DataType? = nil, links: Links? = nil) {
                self.data = data
                self.links = links
            }

            public required init(from decoder: Decoder) throws {
                let container = try decoder.container(keyedBy: StringCodingKey.self)

                data = try container.decodeIfPresent("data")
                links = try container.decodeIfPresent("links")
            }

            public func encode(to encoder: Encoder) throws {
                var container = encoder.container(keyedBy: StringCodingKey.self)

                try container.encodeIfPresent(data, forKey: "data")
                try container.encodeIfPresent(links, forKey: "links")
            }

            public func isEqual(to object: Any?) -> Bool {
              guard let object = object as? App else { return false }
              guard self.data == object.data else { return false }
              guard self.links == object.links else { return false }
              return true
            }

            public static func == (lhs: App, rhs: App) -> Bool {
                return lhs.isEqual(to: rhs)
            }
        }

        public init(app: App? = nil) {
            self.app = app
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            app = try container.decodeIfPresent("app")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encodeIfPresent(app, forKey: "app")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Relationships else { return false }
          guard self.app == object.app else { return false }
          return true
        }

        public static func == (lhs: Relationships, rhs: Relationships) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(links: ResourceLinks, id: String, type: `Type`, attributes: Attributes? = nil, relationships: Relationships? = nil) {
        self.links = links
        self.id = id
        self.type = type
        self.attributes = attributes
        self.relationships = relationships
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decode("links")
        id = try container.decode("id")
        type = try container.decode("type")
        attributes = try container.decodeIfPresent("attributes")
        relationships = try container.decodeIfPresent("relationships")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(links, forKey: "links")
        try container.encode(id, forKey: "id")
        try container.encode(type, forKey: "type")
        try container.encodeIfPresent(attributes, forKey: "attributes")
        try container.encodeIfPresent(relationships, forKey: "relationships")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? AppEncryptionDeclaration else { return false }
      guard self.links == object.links else { return false }
      guard self.id == object.id else { return false }
      guard self.type == object.type else { return false }
      guard self.attributes == object.attributes else { return false }
      guard self.relationships == object.relationships else { return false }
      return true
    }

    public static func == (lhs: AppEncryptionDeclaration, rhs: AppEncryptionDeclaration) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
