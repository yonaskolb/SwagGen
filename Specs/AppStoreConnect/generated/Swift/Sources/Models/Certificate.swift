//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class Certificate: APIModel {

    public enum `Type`: String, Codable, Equatable, CaseIterable {
        case certificates = "certificates"
    }

    public var links: ResourceLinks

    public var id: String

    public var type: `Type`

    public var attributes: Attributes?

    public class Attributes: APIModel {

        public var certificateContent: String?

        public var certificateType: CertificateType?

        public var displayName: String?

        public var expirationDate: DateTime?

        public var name: String?

        public var platform: BundleIdPlatform?

        public var serialNumber: String?

        public init(certificateContent: String? = nil, certificateType: CertificateType? = nil, displayName: String? = nil, expirationDate: DateTime? = nil, name: String? = nil, platform: BundleIdPlatform? = nil, serialNumber: String? = nil) {
            self.certificateContent = certificateContent
            self.certificateType = certificateType
            self.displayName = displayName
            self.expirationDate = expirationDate
            self.name = name
            self.platform = platform
            self.serialNumber = serialNumber
        }

        public required init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: StringCodingKey.self)

            certificateContent = try container.decodeIfPresent("certificateContent")
            certificateType = try container.decodeIfPresent("certificateType")
            displayName = try container.decodeIfPresent("displayName")
            expirationDate = try container.decodeIfPresent("expirationDate")
            name = try container.decodeIfPresent("name")
            platform = try container.decodeIfPresent("platform")
            serialNumber = try container.decodeIfPresent("serialNumber")
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.container(keyedBy: StringCodingKey.self)

            try container.encodeIfPresent(certificateContent, forKey: "certificateContent")
            try container.encodeIfPresent(certificateType, forKey: "certificateType")
            try container.encodeIfPresent(displayName, forKey: "displayName")
            try container.encodeIfPresent(expirationDate, forKey: "expirationDate")
            try container.encodeIfPresent(name, forKey: "name")
            try container.encodeIfPresent(platform, forKey: "platform")
            try container.encodeIfPresent(serialNumber, forKey: "serialNumber")
        }

        public func isEqual(to object: Any?) -> Bool {
          guard let object = object as? Attributes else { return false }
          guard self.certificateContent == object.certificateContent else { return false }
          guard self.certificateType == object.certificateType else { return false }
          guard self.displayName == object.displayName else { return false }
          guard self.expirationDate == object.expirationDate else { return false }
          guard self.name == object.name else { return false }
          guard self.platform == object.platform else { return false }
          guard self.serialNumber == object.serialNumber else { return false }
          return true
        }

        public static func == (lhs: Attributes, rhs: Attributes) -> Bool {
            return lhs.isEqual(to: rhs)
        }
    }

    public init(links: ResourceLinks, id: String, type: `Type`, attributes: Attributes? = nil) {
        self.links = links
        self.id = id
        self.type = type
        self.attributes = attributes
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringCodingKey.self)

        links = try container.decode("links")
        id = try container.decode("id")
        type = try container.decode("type")
        attributes = try container.decodeIfPresent("attributes")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringCodingKey.self)

        try container.encode(links, forKey: "links")
        try container.encode(id, forKey: "id")
        try container.encode(type, forKey: "type")
        try container.encodeIfPresent(attributes, forKey: "attributes")
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? Certificate else { return false }
      guard self.links == object.links else { return false }
      guard self.id == object.id else { return false }
      guard self.type == object.type else { return false }
      guard self.attributes == object.attributes else { return false }
      return true
    }

    public static func == (lhs: Certificate, rhs: Certificate) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
